[
    {
        "id": "3b2d37cb88baf6c6",
        "type": "tab",
        "label": "Stima Dente",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c4f35bb0ae2de5ca",
        "type": "tab",
        "label": "SIMULAZIONE DATI RAW",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "98a3eee5c375d831",
        "type": "tab",
        "label": "A22-1006 STIMA CINGHIA",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "50e3bf45.5484a",
        "type": "tab",
        "label": "regressione",
        "disabled": true,
        "info": ""
    },
    {
        "id": "74d727b3.e9bb48",
        "type": "tab",
        "label": "BAUMER",
        "disabled": true,
        "info": ""
    },
    {
        "id": "a22dc052.c61d",
        "type": "tab",
        "label": "Marco_WesSocket",
        "disabled": true,
        "info": ""
    },
    {
        "id": "14a4eac34f957bfe",
        "type": "tab",
        "label": "Flow 4",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5fd4048819c968a5",
        "type": "tab",
        "label": "VR-PEDANA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "af0fdb124df673fc",
        "type": "ui_group",
        "name": "MISURA DENTE",
        "tab": "da4d8239ebfcc72f",
        "order": 1,
        "disp": true,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da4d8239ebfcc72f",
        "type": "ui_tab",
        "name": "HOME",
        "icon": "mi-home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b635847297ce6874",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "fe2d9aca880f0181",
        "type": "ui_spacer",
        "z": "3b2d37cb88baf6c6",
        "name": "spacer",
        "group": "af0fdb124df673fc",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "7fb2887f63ac3dbe",
        "type": "ui_spacer",
        "z": "3b2d37cb88baf6c6",
        "name": "spacer",
        "group": "af0fdb124df673fc",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "b342ba1cb197c926",
        "type": "ui_spacer",
        "z": "3b2d37cb88baf6c6",
        "name": "spacer",
        "group": "af0fdb124df673fc",
        "order": 12,
        "width": 28,
        "height": 1
    },
    {
        "id": "27824c37.1dfa24",
        "type": "websocket-listener",
        "path": "/ws/vr_webpage",
        "wholemsg": "false"
    },
    {
        "id": "93465203.06692",
        "type": "ui_group",
        "name": "Default",
        "tab": "da4d8239ebfcc72f",
        "order": 2,
        "disp": false,
        "width": "30",
        "collapse": false
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "Files",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "88528b78d7331c3d",
        "type": "inject",
        "z": "3b2d37cb88baf6c6",
        "name": "Cinghia grandissima 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "Cinghia grandissima 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26140,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4081,647773],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36331,121,36320,114,36308,107,36294,112,36281,112,36269,106,36254,119,36240,123,36225,130,36213,126,36200,128,36187,126,36175,123,36161,126,36149,122,36138,113,36124,118,36112,112,36097,123,36085,117,36073,113,36058,121,36046,119,36033,117,36021,113,36006,125,35992,129,35980,125,35967,124,35955,121,35943,116,35928,127,35918,111,35904,113,35890,121,35876,125,35865,116,35850,127,35837,126,35826,118,35812,120,35800,114,35787,114,35774,116,35759,127,35746,128,35734,124,35721,123,35709,116,35694,129,35680,132,35668,130,35658,113,35644,120,35630,124,35617,124,35604,122,35591,124,35578,127,35567,121,35553,125,35540,129,35527,130,35515,128,35503,122,35490,126,35478,120,35465,121,35454,113,35439,127,35427,118,35413,129,35403,111,35389,121,35376,124,35363,123,35351,121,35337,128,35325,124,35311,130,35299,130,35284,142,35273,135,35260,136,35248,127,35235,133,35223,126,35211,126,35199,117,35185,129,35172,128,35160,128,35148,121,35134,131,35122,127,35109,124,35097,121,35084,123,35073,113,35059,118,35047,117,35034,122,35021,121,35009,118,34995,123,34981,136,34969,131,34957,129,34943,138,34930,142,34919,126,34905,133,34894,127,34880,133,34868,134,34856,125,34845,113,34831,126,34818,133,34806,129,34793,135,34780,136,34768,131,34756,127,34742,142,34730,139,34719,123,34707,124,34696,114,34682,121,34669,125,34656,135,34642,142,34630,145,34617,142,34606,132,34594,132,34581,131,34570,117,34557,124,34470,819,34457,832,34445,836,34426,899,34402,1020,34371,1206,34347,1331,34318,1498,34282,1742,34260,1851,34249,1856,34237,1856,34225,1871,34213,1879,34202,1876,34189,1889,34178,1896,34167,1890,34157,1882,34146,1881,34134,1890,34123,1884,34113,1877,34103,1868,34092,1866,34081,1866,34069,1874,34058,1878,34046,1882,34035,1883,34024,1881,34012,1893,34001,1892,33990,1901,33979,1895,33969,1888,33959,1877,33948,1868,33937,1871,33924,1895,33913,1890,33902,1896,33891,1893,33880,1889,33868,1904,33858,1895,33847,1890,33836,1889,33825,1887,33815,1883,33804,1876,33793,1880,33781,1896,33769,1899,33759,1894,33748,1888,33737,1894,33725,1897,33714,1897,33704,1883,33694,1876,33682,1889,33671,1885,33660,1881,33649,1890,33638,1882,33626,1902,33615,1903,33604,1902,33594,1890,33583,1886,33572,1890,33560,1898,33549,1898,33539,1877,33527,1892,33516,1893,33505,1898,33495,1886,33483,1901,33472,1904,33461,1903,33450,1905,33439,1913,33428,1908,33417,1905,33406,1901,33395,1897,33384,1901,33373,1901,33362,1903,33352,1901,33341,1898,33330,1896,33319,1905,33308,1908,33297,1911,33286,1904,33275,1896,33264,1894,33253,1894,33243,1890,33231,1895,33220,1903,33209,1905,33198,1905,33188,1898,33176,1904,33166,1902,33155,1905,33144,1907,33133,1908,33122,1899,33111,1897,33100,1893,33089,1893,33078,1898,33067,1899,33056,1901,33045,1900,33034,1901,33023,1913,33012,1911,33002,1905,32991,1910,32980,1895,32969,1896,32958,1893,32947,1900,32936,1899,32925,1912,32914,1920,32903,1927,32892,1930,32881,1935,32870,1928,32859,1916,32848,1910,32838,1901,32827,1907,32816,1910,32805,1909,32794,1918,32783,1918,32772,1918,32761,1923,32750,1922,32739,1923,32728,1920,32717,1915,32706,1908,32695,1905,32685,1913,32674,1908,32663,1914,32652,1916,32641,1920,32630,1920,32619,1926,32608,1926,32597,1927,32586,1928,32575,1917,32564,1914,32553,1918,32542,1913,32532,1913,32521,1916,32510,1916,32499,1920,32488,1921,32477,1924,32466,1931,32455,1929,32444,1925,32434,1934,32423,1925,32411,1909,32400,1914,32390,1926,32379,1930,32368,1920,32357,1921,32346,1935,32335,1938,32325,1938,32314,1936,32303,1939,32292,1933,32281,1928,32270,1929,32259,1927,32248,1931,32237,1932,32226,1927,32215,1935,32205,1939,32194,1943,32183,1947,32172,1940,32161,1942,32150,1929,32138,1916,32128,1925,32117,1929,32106,1931,32095,1926,32084,1929,32073,1930,32063,1941,32052,1940,32041,1941,32030,1941,32019,1939,32008,1935,31997,1934,31985,1919,31974,1923,31963,1931,31952,1926,31942,1941,31931,1941,31919,1932,31909,1949,31898,1948,31888,1955,31876,1949,31865,1942,31854,1935,31842,1926,31832,1935,31821,1942,31810,1940,31799,1949,31788,1943,31777,1945,31766,1943,31756,1951,31745,1957,31734,1956,31723,1960,31712,1952,31700,1943,31690,1949,31679,1951,31668,1949,31656,1944,31646,1948,31635,1954,31624,1954,31613,1959,31602,1956,31591,1956,31580,1952,31568,1946,31557,1945,31546,1944,31535,1945,31524,1947,31514,1950,31503,1952,31492,1958,31482,1968,31471,1964,31460,1965,31449,1963,31437,1950,31425,1941,31414,1940,31403,1941,31392,1943,31382,1950,31371,1957,31361,1960,31350,1961,31338,1960,31328,1965,31317,1965,31306,1966,31294,1964,31282,1958,31271,1954,31260,1955,31248,1945,31236,1935,31216,1852,31190,1712,31169,1619,31150,1548,31133,1492,31114,1423,31095,1354,31079,1308,31058,1225,31040,1163,31022,1113,31002,1034,30973,881,30960,869,30858,187,30850,224,30839,232,30827,241,30813,228,30801,230,30790,238,30777,236,30765,235,30751,226,30740,237,30727,233,30716,241,30704,242,30690,232,30678,236,30666,240,30653,235,30641,238,30629,242,30616,236,30603,233,30591,242,30578,234,30565,236,30553,242,30541,242,30529,251,30515,239,30503,239,30491,244,30478,244,30465,243,30453,248,30440,241,30427,237,30416,248,30403,250,30391,252,30378,248,30365,244,30353,253,30341,252,30328,249,30315,249,30303,257,30291,256,30278,252,30265,253,30251,244,30239,245,30226,246,30214,248,30201,245,30189,251,30176,245,30164,254,30151,251,30139,251,30126,251,30114,256,30101,254,30090,260,30076,257,30064,257,30051,257,30039,259,30026,258,30014,260,30000,252,29989,261,29975,255,29962,254,29951,261,29938,257,29925,259,29913,260,29899,256,29887,259,29876,269,29862,265,29849,263,29836,265,29824,267,29812,275,29800,277,29788,283,29772,269,29760,272,29746,266,29735,278,29723,279,29709,278,29696,275,29683,275,29671,279,29657,275,29644,274,29631,271,29620,281,29607,280,29595,284,29581,282,29567,273,29556,284,29543,286,29531,288,29518,290,29505,287,29491,285,29479,289,29466,287,29451,279,29440,286,29427,285,29414,284,29401,285,29388,285,29375,286,29363,289,29352,299,29339,298,29327,302,29312,291,29299,294,29288,300,29275,299,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "1723a6090f333a06",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Preparazione Dati",
        "func": "//let inizio=Date.now();\n\nlet xStart=     msg.payload.msgData[1].Profile.xStart;\nlet length=     msg.payload.msgData[1].Profile.length;\nlet prec=       msg.payload.msgData[1].Profile.prec;\nlet qualityID=  msg.payload.msgData[1].Profile.qualityID;\nlet points=     msg.payload.msgData[1].Profile.points;\n\n\nlet dati=   [];\nlet dati_x= [];\nlet dati_y= [];\nlet dati_xy= [];\n\nfor (let i = length*2 -2 ; i >=0  ; i-=2){\n    let jason={};\n    \n    jason.x= points[i]+ xStart; \n    jason.y= points[i+1];\n    \n    dati.push(jason);\n}\n\n\ndati.forEach(punto => { \n    punto.x=punto.x/prec; \n    punto.y=punto.y/prec;  \n    dati_x.push(punto.x);  \n    dati_y.push(punto.y);\n    dati_xy.push([punto.x,punto.y]);\n    } );\n\n//let durata=Date.now()-inizio;\n\nmsg.flusso_dati={};\nmsg.flusso_dati.points=     dati;\nmsg.flusso_dati.points_x=   dati_x;\nmsg.flusso_dati.points_y=   dati_y;\nmsg.flusso_dati.points_xy=   dati_xy;\n\n//msg.durata =    durata;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "106107b1847934b5"
            ]
        ]
    },
    {
        "id": "76aee1e5d858a4d1",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "campiona minimo e massimo",
        "func": "\nconst N_PUNTI_DA_CAMPIONARE_MIN_MAX=200\n\n//COPIO ARRAY POINTS X\nvar arr_x = msg.points_x;\nvar arr_y = msg.points_y;\n\nvar max_x = [];\nvar max_y = [];\nvar min_x = [];\nvar min_y = [];\n\n//filtro i massimi\nfor (let index = 0; index < N_PUNTI_DA_CAMPIONARE_MIN_MAX; index++) {\n    \n    let indexOfMaxValue = arr_y.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\n    \n\n    max_x.push(arr_x[indexOfMaxValue]);\n    max_y.push(arr_y[indexOfMaxValue]);\n\n    //CANCELLO ELEMENTI CON QUEL DATO INDICE MAX\n    arr_x.splice(indexOfMaxValue, 1);\n    arr_y.splice(indexOfMaxValue, 1);\n\n\n\n\n    \n}\nconst average = max_y[0];//max_y.reduce((a, b) => a + b, 0) / max_y.length;\nmax_x=[];\nmax_y = [];\nfor (let i = 0; i < msg.points_y.length; i++) {\n\n    const delta = Math.abs(msg.points_y[i] - average);\n    if (delta<2)\n    {\n        max_x.push(msg.points_x[i]);\n        max_y.push(msg.points_y[i]);\n    }\n    \n}\n/*\n//filtro i minimi\nfor (let index = 0; index < N_PUNTI_DA_CAMPIONARE_MIN_MAX; index++) {\n\n    \n    let indexOfMinValue = arr_y.indexOf(Math.min.apply(Math, arr_y)); //arr_y.reduce((iMin, x, i, arr) => x < arr[iMin] ? i : iMin, 0);\n\n    min_x.push(arr_x[indexOfMinValue]);\n    min_y.push(arr_y[indexOfMinValue]);\n\n    //CANCELLO ELEMENTI CON QUEL DATO INDICE MIN \n    arr_x.splice(indexOfMinValue, 1);\n    arr_y.splice(indexOfMinValue, 1);\n\n}\n*/\nfor (let index = 0; index < 80; index++) {\n\n\n    \n    min_x.push(arr_x[index]);\n    min_y.push(arr_y[index]);\n\n\n\n}\nfor (let index = arr_x.length - 1; index >= arr_x.length-80; --index) {\n\n\n\n    min_x.push(arr_x[index]);\n    min_y.push(arr_y[index]);\n\n\n\n}\n\nvar xy_min=[]\nfor (let i = 0; i < min_y.length; i++) {\n    \n    let jason = {};\n\n    jason.x = min_x[i];\n    jason.y = min_y[i];\n\n    xy_min.push(jason);\n}\nvar xy_max = []\nfor (let i = 0; i < max_y.length; i++) {\n\n    let jason = {};\n\n    jason.x = max_x[i];\n    jason.y = max_y[i];\n\n    xy_max.push(jason);\n}\n\n\nmsg.arr_min_y = min_y;\nmsg.arr_min_x = min_x;\n\nmsg.arr_max_y = max_y;\nmsg.arr_max_x = max_x;\n\nmsg.xy_min = xy_min;\nmsg.xy_max = xy_max;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ee9048dc36007ad5",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "ransac base",
        "func": "if (msg.errore.stato)\n    return msg;\ntry\n{\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_inferiori;\n\n\n    global.set(\"PARAMETRI.ransac.problema.data\", data);\n    var problema = global.get(\"PARAMETRI.ransac.problema\");\n    var params = global.get(\"PARAMETRI.ransac.base\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n    // node.warn('solution ok');\n    //msg.ransac={};\n    msg.ransac.soluz_base = solution;\n    //rotazione di +90 CCW della retta della base\n    // y' = x\n    // x' = - (m*y'+b) \n    //msg.ransac.soluz_normale_alla_base = {};\n    //msg.ransac.soluz_normale_alla_base.model = {};\n    msg.ransac.soluz_normale_alla_base.model.m = -solution.model.m;\n    msg.ransac.soluz_normale_alla_base.model.b = -solution.model.b;\n\n    if (solution.status !== \"Success\")\n    {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Base\";\n    }\n\n}\ncatch(er)\n{\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "988f4c39bdb18ba3"
            ]
        ]
    },
    {
        "id": "988f4c39bdb18ba3",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "ransac massimi",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_superiori;\n\n    global.set(\"PARAMETRI.ransac.problema.data\", data);\n    var problema = global.get(\"PARAMETRI.ransac.problema\");\n    var params = global.get(\"PARAMETRI.ransac.massimi\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n\n\n    msg.ransac.soluz_massimi = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Superiore\";\n    }\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "c39e70d5d75e53a4"
            ]
        ]
    },
    {
        "id": "dfd64063f931f9d4",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Divisione Punti Sup e Inf",
        "func": "\n\ntry {\n    var points_x = msg.flusso_dati.points_x;\n    var points_y = msg.flusso_dati.points_y;\n\n    var max_y = Math.max(...msg.flusso_dati.points_y);\n    var min_y = Math.min(...msg.flusso_dati.points_y);\n\n    var mean_y = (max_y+min_y)/2.0;\n    var dmeanmax = max_y - mean_y;\n    var dmeanmin = mean_y - min_y;\n\n    var upper_points = [];\n    var lower_points=[];\n    var lato_sinistro=[];\n    var lato_destro=[];\n    var lista_x_punti_sup = [];\n    var centro_dente_x = 0;\n    for (let i = 0; i < points_y.length; i++) {\n        \n        let jason = {};\n        if (points_y[i] > mean_y + dmeanmax/1.4)\n        {\n            jason.x = points_x[i];\n            jason.y = points_y[i];\n            upper_points.push(jason);\n            lista_x_punti_sup.push(points_x[i]);\n        }\n        else if (points_y[i] < mean_y - dmeanmin/1.4)\n        {\n            jason.x = points_x[i];\n            jason.y = points_y[i];\n            lower_points.push(jason);\n        }\n        else\n        {\n            /*\n            if (points_x[i]<0)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_sinistro.push(jason); \n            }\n            else if (points_x[i] > 0)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_destro.push(jason); \n            }\n            */\n        }        \n    }//fine for\n\n    //trovo il centro dente\n    var max_x_sup = Math.max(...lista_x_punti_sup);\n    var min_x_sup = Math.min(...lista_x_punti_sup);\n    var dist_sup = Math.abs(max_x_sup - min_x_sup);\n    centro_dente_x = min_x_sup + dist_sup/2.0;\n    //estraggo i punti lato sx  e dx\n    for (let i = 0; i < points_y.length; i++) {\n\n        let jason = {};\n        if (points_y[i] > mean_y + dmeanmax / 1.4) {\n            ;\n        }\n        else if (points_y[i] < mean_y - dmeanmin / 1.4) {\n            ;\n        }\n        else {\n            \n            if (points_x[i] < centro_dente_x)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_sinistro.push(jason); \n            }\n            else if (points_x[i] > centro_dente_x)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_destro.push(jason); \n            }\n            \n        }\n    }//fine for\n\n    //msg.divisione={};\n    msg.divisione.punti_superiori = upper_points;\n    msg.divisione.punti_inferiori = lower_points;\n    msg.divisione.punto_medio = mean_y;\n    msg.divisione.centro_dente_x = centro_dente_x;\n    msg.divisione.max_y = max_y;\n    msg.divisione.min_y = min_y;\n    msg.divisione.punti_latosx = lato_sinistro;\n    msg.divisione.punti_latodx = lato_destro;\n\n\n    //controllo che ogni arrray abbia i punti minimi sufficienti per eseguire i calcoli successivi\n    var n_min_punti = global.get(\"PARAMETRI.divisione.n_min_punti\");\n    if (upper_points.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti Superiori: \" + upper_points.length + \" < \" + n_min_punti;\n    }\n    if (lower_points.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti Inferiori: \" + lower_points.length + \" < \" + n_min_punti;\n    }\n    if (lato_sinistro.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato sx: \" + lato_sinistro.length + \" < \" + n_min_punti;\n    }\n    if (lato_destro.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato dx: \" + lato_destro.length + \" < \" + n_min_punti;\n    }\n\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n};\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "ee9048dc36007ad5"
            ]
        ]
    },
    {
        "id": "c39e70d5d75e53a4",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "ransac lato sx",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry\n{\n\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_latosx;\n\n    global.set(\"PARAMETRI.ransac.problema.data\", data);\n    var problema = global.get(\"PARAMETRI.ransac.problema\");\n    var params = global.get(\"PARAMETRI.ransac.sx\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n\n\n    msg.ransac.soluz_latosx = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Lato SX\";\n    }\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 380,
        "wires": [
            [
                "b885f857a6be17a2"
            ]
        ]
    },
    {
        "id": "b885f857a6be17a2",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "ransac lato dx",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n\n\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_latodx;\n\n    global.set(\"PARAMETRI.ransac.problema.data\", data);\n    var problema = global.get(\"PARAMETRI.ransac.problema\");\n    var params = global.get(\"PARAMETRI.ransac.dx\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n    msg.ransac.soluz_latodx = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Lato DX\";\n    }\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "a0b53a1aba933478"
            ]
        ]
    },
    {
        "id": "7d9b7f6864f9236e",
        "type": "debug",
        "z": "3b2d37cb88baf6c6",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 500,
        "wires": []
    },
    {
        "id": "a0b53a1aba933478",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Calcolo Intersezioni",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n\n    var retta_base = msg.ransac.soluz_base;\n    var retta_sx = msg.ransac.soluz_latosx;\n    var retta_dx = msg.ransac.soluz_latodx;\n\n\n    //intersezione BASE-SX\n    var Dintersect = (retta_sx.model.b - retta_base.model.b);\n    var Dslope = (retta_base.model.m - retta_sx.model.m);\n    var x_base_sx = Dintersect / Dslope;\n    var y_base_sx = retta_base.model.m * x_base_sx + retta_base.model.b;\n    console.warn(\"==INTERSEZIONE BASE-SX==\")\n    console.warn(\"x:\" + x_base_sx + \" z:\" + y_base_sx + \"\\n\");\n\n    //intersezione BASE-DX\n    Dintersect = (retta_dx.model.b - retta_base.model.b);\n    Dslope = (retta_base.model.m - retta_dx.model.m);\n    var x_base_dx = Dintersect / Dslope;\n    var y_base_dx = retta_base.model.m * x_base_dx + retta_base.model.b;\n    console.warn(\"==INTERSEZIONE BASE-DX==\")\n    console.warn(\"x:\" + x_base_dx + \" z:\" + y_base_dx + \"\\n\");\n\n    //distanza LT\n    var dX = (x_base_dx - x_base_sx);\n    var dY = (y_base_dx - y_base_sx);\n    var dX2 = dX*dX;\n    var dY2 = dY*dY;\n    var lt = Math.sqrt(dX2 + dY2);\n    console.warn(\"==DISTANZA Lt==\")\n    console.warn(\"Lt:\" + lt + \"mm\\n\");\n    //msg.stima={};\n    //msg.stima.intersezione={};\n    msg.stima.intersezione.base_sx = { \"x\": x_base_sx, \"y\": y_base_sx};\n    msg.stima.intersezione.base_dx = { \"x\": x_base_dx, \"y\": y_base_dx };\n    msg.stima.intersezione.lt = lt;\n    msg.stima.intersezione.lt_fixed = lt.toFixed(3); //3 cifre dopo la virgola\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "caeec0b18cccae0b"
            ]
        ]
    },
    {
        "id": "8d540fbd244e0e02",
        "type": "inject",
        "z": "3b2d37cb88baf6c6",
        "name": "Cinghia grandissima 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":28504,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4204,277755],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,136,36315,134,36302,135,36289,137,36277,132,36263,139,36249,144,36237,135,36226,127,36210,141,36196,148,36184,142,36171,144,36159,140,36147,131,36137,118,36123,124,36109,130,36095,134,36081,137,36068,141,36053,148,36042,139,36028,147,36017,133,36005,130,35991,136,35979,128,35965,136,35950,145,35936,152,35923,150,35912,141,35900,135,35887,137,35874,137,35859,149,35846,151,35835,137,35820,146,35807,147,35794,151,35783,139,35770,139,35756,141,35744,137,35731,139,35718,141,35705,141,35691,145,35680,135,35667,134,35654,134,35640,140,35625,150,35613,150,35599,154,35587,149,35574,150,35561,153,35549,149,35536,153,35523,151,35509,163,35498,149,35485,155,35471,164,35460,149,35447,152,35433,161,35421,161,35409,152,35397,150,35384,150,35371,155,35358,156,35345,159,35332,159,35319,161,35306,163,35294,163,35283,149,35271,144,35257,157,35244,156,35232,151,35219,153,35206,153,35194,149,35183,143,35170,143,35157,146,35144,150,35131,150,35118,155,35106,149,35092,160,35080,150,35067,153,35054,157,35042,155,35030,151,35018,144,35004,155,34991,159,34978,156,34965,162,34952,161,34940,156,34927,158,34916,152,34901,164,34890,151,34876,167,34864,163,34852,161,34839,163,34828,153,34815,153,34803,154,34790,154,34778,154,34764,163,34753,153,34740,157,34728,152,34715,159,34702,161,34691,154,34677,169,34664,166,34653,162,34640,165,34628,158,34614,168,34602,169,34589,169,34578,160,34565,165,34552,168,34540,165,34528,162,34515,167,34502,172,34490,166,34477,171,34466,159,34453,170,34440,170,34430,151,34416,165,34404,162,34391,163,34379,162,34366,166,34354,166,34341,166,34329,168,34316,165,34304,167,34291,168,34280,162,34267,164,34255,162,34241,170,34229,170,34216,177,34204,171,34192,167,34179,176,34167,174,34155,168,34142,170,34130,170,34118,173,34106,170,34093,170,34081,173,34069,171,34057,165,34045,161,34032,168,34019,173,34007,179,33994,182,33982,182,33970,177,33958,171,33946,170,33933,180,33921,180,33909,173,33897,172,33884,182,33871,184,33859,186,33846,190,33835,184,33823,168,33810,179,33799,170,33786,177,33773,186,33761,185,33749,185,33736,186,33724,179,33712,178,33700,179,33688,177,33676,176,33664,170,33651,179,33638,186,33627,175,33614,181,33602,177,33590,171,33577,176,33565,185,33553,184,33541,176,33528,179,33516,185,33503,198,33491,189,33479,182,33467,188,33454,187,33415,880,33403,870,33392,869,33380,870,33368,865,33356,890,33343,922,33328,1018,33313,1131,33299,1185,33286,1250,33272,1311,33259,1354,33246,1427,33233,1483,33220,1548,33207,1611,33193,1719,33179,1830,33165,1909,33154,1927,33143,1937,33132,1944,33121,1949,33110,1954,33099,1953,33088,1945,33077,1948,33066,1948,33055,1948,33045,1937,33034,1925,33023,1927,33012,1922,33001,1939,32990,1935,32979,1943,32968,1942,32957,1951,32946,1954,32935,1952,32925,1951,32914,1956,32903,1949,32892,1942,32881,1939,32870,1942,32859,1944,32848,1943,32837,1948,32826,1958,32815,1961,32805,1954,32794,1946,32783,1953,32772,1960,32761,1948,32750,1945,32739,1945,32728,1950,32717,1951,32707,1957,32696,1955,32685,1955,32674,1957,32663,1956,32652,1956,32641,1959,32630,1958,32619,1951,32608,1948,32597,1947,32587,1949,32576,1955,32565,1953,32554,1945,32543,1949,32532,1953,32521,1952,32510,1950,32500,1960,32489,1960,32478,1955,32467,1952,32456,1951,32445,1947,32434,1949,32423,1948,32412,1952,32401,1953,32390,1954,32380,1962,32369,1955,32358,1960,32347,1950,32336,1949,32325,1955,32314,1952,32303,1947,32292,1954,32281,1952,32270,1952,32259,1949,32249,1950,32238,1948,32227,1954,32216,1957,32206,1968,32194,1961,32183,1956,32172,1954,32161,1949,32150,1949,32140,1950,32129,1953,32118,1946,32107,1954,32096,1948,32085,1953,32075,1963,32064,1965,32053,1964,32042,1964,32031,1959,32019,1944,32008,1948,31997,1953,31986,1948,31976,1954,31965,1955,31953,1943,31943,1957,31932,1966,31921,1967,31911,1970,31899,1961,31888,1964,31877,1953,31865,1950,31854,1948,31843,1948,31833,1952,31822,1956,31811,1956,31800,1955,31789,1959,31779,1970,31768,1970,31756,1963,31745,1962,31734,1962,31723,1956,31712,1956,31701,1956,31690,1956,31679,1961,31669,1964,31658,1969,31647,1971,31636,1971,31625,1971,31614,1965,31602,1957,31591,1955,31580,1950,31569,1953,31558,1956,31547,1960,31537,1964,31525,1959,31516,1977,31504,1970,31494,1973,31482,1971,31471,1969,31461,1974,31449,1963,31437,1956,31426,1959,31415,1958,31405,1960,31394,1965,31382,1959,31371,1958,31360,1954,31348,1947,31339,1962,31328,1965,31316,1963,31307,1976,31294,1965,31283,1961,31273,1970,31262,1977,31250,1970,31239,1971,31228,1969,31217,1975,31206,1976,31195,1974,31184,1974,31172,1971,31161,1971,31149,1963,31139,1969,31127,1967,31116,1967,31105,1968,31095,1978,31085,1983,31073,1982,31062,1983,31051,1982,31039,1978,31028,1977,31017,1981,31006,1978,30994,1970,30982,1962,30970,1955,30960,1968,30950,1976,30939,1978,30929,1985,30917,1975,30906,1984,30896,1987,30885,1987,30873,1980,30860,1973,30849,1970,30838,1974,30827,1974,30816,1972,30805,1975,30794,1978,30782,1974,30772,1979,30761,1978,30750,1982,30738,1977,30727,1977,30716,1977,30705,1978,30693,1976,30681,1969,30669,1962,30659,1971,30649,1976,30638,1981,30627,1984,30615,1979,30605,1986,30594,1991,30581,1978,30569,1977,30559,1983,30547,1982,30535,1977,30524,1976,30513,1978,30502,1981,30492,1989,30480,1989,30468,1982,30455,1971,30443,1973,30434,1986,30423,1988,30411,1981,30400,1989,30387,1977,30376,1977,30365,1980,30354,1981,30343,1988,30331,1980,30320,1983,30308,1983,30297,1981,30282,1961,30270,1960,30261,1975,30251,1980,30238,1974,30228,1983,30217,1982,30206,1983,30195,1985,30184,1987,30173,1993,30162,1995,30149,1988,30136,1978,30051,1560,30014,1414,29980,1286,29950,1186,29758,263,29745,258,29730,250,29719,257,29705,251,29692,254,29679,253,29667,256,29654,258,29640,251,29627,249,29616,259,29603,260,29590,260,29577,259,29564,259,29552,266,29540,269,29526,266,29513,263,29499,260,29488,266,29474,261,29461,261,29448,262,29435,261,29422,259,29410,265,29396,259,29385,272,29372,271,29359,270,29345,266,29331,257,29319,263,29307,269,29293,262,29282,272,29268,266,29256,272,29243,273]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "df4c217df3f3fd38",
        "type": "template",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "HTML CHART ",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<canvas id=\"chart\"></canvas>\n<!--\n<script src=\"/js/chart/chart.js\"></script> \n\n<script src=\"/js/chart/chartjs-plugin-zoom.min.js\"></script> \n\n<script src=\"/js/chart/hammer.min.js\"></script> \n-->\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/1.1.1/chartjs-plugin-zoom.min.js\" \n    integrity=\"sha512-NxlWEbNbTV6acWnTsWRLIiwzOw0IwHQOYUCKBiu/NqZ+5jSy7gjMbpYI+/4KvaNuZ1qolbw+Vnd76pbIUYEG8g==\" \n    crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js\" \n    integrity=\"sha512-UXumZrZNiOwnTcZSHLOfcTs0aos2MzBWHXOHOuB0J/R44QB0dwY5JgfbvljXcklVf65Gc4El6RjZ+lnwd2az2g==\" \n    crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n\n<script>  \n//var ransac_min_inliers = JSON.stringify(payload.ransac_min.inliers).replace(/\"/g, \"'\").replace(/'/g, \"\")\nnew Chart(document.getElementById(\"chart\"), {\n    animationEnabled: true,\n    //type: 'line',\n    data: {\n      datasets: [\n        /*\n        {\n          type: 'scatter',\n          label:'Inliers Base',\n          backgroundColor: \"rgba(25, 6, 194, 1)\",\n          borderColor: 'rgb(65, 72, 255)',\n          data: {{ransac_min_inliers}}\n        },\n        */ \n        {\n          type: 'line',\n          label:'Profilo Z', \n          backgroundColor: \"rgba(255, 45, 36, 1)\",\n          borderColor: 'rgb(245, 102, 102)',\n          data: {{viz.profilo_z}} \n        },\n        {\n        type: 'line',\n        label:'Base Stimata',\n        backgroundColor: \"rgba(255, 45, 36, 1)\",\n        borderColor: 'rgb(245, 102, 102)',\n        data: {{viz.punti_retta_base}} \n        },\n        {\n        type: 'line',\n        label:'Normale alla base',\n        backgroundColor: \"rgba(255, 45, 36, 1)\",\n        borderColor: 'rgb(245, 102, 102)',\n        data: {{viz.punti_retta_normale_alla_base}} \n        },\n        {\n        type: 'line',\n        label:'Massimi Stimati',\n        backgroundColor: \"rgba(255, 45, 36, 1)\",\n        borderColor: 'rgb(245, 102, 102)',\n        data: {{viz.punti_retta_massimi}}\n        }\n      ]\n    },\n\n    options: {\n        scales: {\n            xAxes:[{\n                labelFontColor: '#FAC003',\n                \n            }],\n            y: {\n                beginAtZero: true, \n                //min: -35,\n                //max: 20\n               }\n            },\n        plugins: {\n            title: {\n                display: true,\n                color: \"rgba(0, 0, 0, 1.0000)\",\n                fullsize: true,\n                text: \"PROFILO CINGHIA\",\n                font:{\n                    size: 25\n                }\n            },  \n          zoom: {\n            pan: {\n                enabled: true,\n                mode: 'xy',\n                modifierKey: 'ctrl'\n            },  \n            zoom: {\n              wheel: {\n                enabled: true\n              },\n              pinch: {\n                enabled: false\n              },\n              mode: 'x'\n            }\n          }\n        }\n    }\n});\n\n</script>\n",
        "output": "str",
        "x": 940,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "935e5e5ea3a97694",
        "type": "ui_template",
        "z": "3b2d37cb88baf6c6",
        "group": "af0fdb124df673fc",
        "name": "Z Profile Chart",
        "order": 13,
        "width": 28,
        "height": 15,
        "format": "",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "caeec0b18cccae0b",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Calcolo Angoli",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry\n{\n    //ANGOLO TRA LATO SX E NORMALE ALLA BASE\n    var m_normbase = msg.ransac.soluz_normale_alla_base.model.m;\n    var m_sx = msg.ransac.soluz_latosx.model.m;\n    var alfa_sx_norm_base = 90-Math.atan2(m_normbase + m_sx, 1 + m_normbase * m_sx)*(180.0/Math.PI);\n    //var alfa_sx_norm_base = Math.atan(-m_normbase + m_sx / (1 + m_normbase * m_sx)) * 180.0 / Math.PI;\n    msg.stima.angolo={};\n    msg.stima.angolo.sx = alfa_sx_norm_base;\n    msg.stima.angolo.sx_fixed = alfa_sx_norm_base.toFixed(3);//3 cifre dopo la virgola\n    console.warn(\"==ANGOLO RETTA SX==\")\n    console.warn(\"Asx: \" + alfa_sx_norm_base + \"°\\n\");\n\n\n    //ANGOLO TRA LATO DX E NORMALE ALLA BASE\n    //var m_normbase = msg.ransac.soluz_normale_alla_base.model.m;\n    var m_dx = msg.ransac.soluz_latodx.model.m;\n    var alfa_dx_norm_base = 90+Math.atan2(m_normbase + m_dx, 1 + m_normbase * m_dx) * (180.0 / Math.PI);\n    //var alfa_dx_norm_base = Math.atan(-m_normbase + m_dx / (1 + m_normbase * m_dx)) * 180.0 / Math.PI;\n    msg.stima.angolo.dx = alfa_dx_norm_base;\n    msg.stima.angolo.dx_fixed = alfa_dx_norm_base.toFixed(3);//3 cifre dopo la virgola\n    console.warn(\"==ANGOLO RETTA DX==\")\n    console.warn(\"Adx: \" + alfa_dx_norm_base + \"°\\n\");\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 560,
        "wires": [
            [
                "a0235d5f73b53134"
            ]
        ]
    },
    {
        "id": "a0235d5f73b53134",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Conversione per Visualizzazione",
        "func": "//retta base\nif (msg.errore.stato)\n    return msg;\n\ntry\n{\n    var punti_retta_base = [];\n    var punti_retta_normale_alla_base = [];\n    for (let x = -35; x < 35; x++) {\n\n        let jason={};\n        let jason2 = {};\n        jason.x = x;\n        jason.y = msg.ransac.soluz_base.model.m * x + msg.ransac.soluz_base.model.b;\n\n        punti_retta_base.push(jason);\n        //rotazione di 90deg\n        jason2.x = msg.ransac.soluz_normale_alla_base.model.m * x + msg.ransac.soluz_normale_alla_base.model.b;\n        jason2.y = x;\n        if (jason2.y >= msg.divisione.min_y - 10 && jason2.y <= msg.divisione.max_y + 10) {\n            punti_retta_normale_alla_base.push(jason2)\n        }\n        \n\n    }\n    //msg.viz={};\n    msg.viz.punti_retta_base = JSON.stringify(punti_retta_base).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_retta_normale_alla_base = JSON.stringify(punti_retta_normale_alla_base).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    //msg.viz.profilo_z = JSON.stringify(msg.flusso_dati.points).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //retta massimi\n    var punti_retta_massimi = [];\n    for (let x = -35; x < 35; x++) {\n\n        let jason = {};\n        jason.x = x;\n        jason.y = msg.ransac.soluz_massimi.model.m * x + msg.ransac.soluz_massimi.model.b;\n\n        punti_retta_massimi.push(jason);\n    \n    }\n    msg.viz.punti_retta_massimi = JSON.stringify(punti_retta_massimi).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n\n    //retta lato sx\n    var punti_retta_latosx = [];\n    for (let x = -35; x < 35; x++) {\n\n        let jason = {};\n        jason.x = x;\n        jason.y = msg.ransac.soluz_latosx.model.m * x + msg.ransac.soluz_latosx.model.b;\n\n        if (jason.y >= msg.divisione.min_y-10 && jason.y <= msg.divisione.max_y+10)\n        {\n            punti_retta_latosx.push(jason);\n        }\n            \n\n    }\n    msg.viz.punti_retta_latosx = JSON.stringify(punti_retta_latosx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n\n    //retta lato dx\n    var punti_retta_latodx = [];\n    for (let x = -35; x < 35; x++) {\n\n        let jason = {};\n        jason.x = x;\n        jason.y = msg.ransac.soluz_latodx.model.m * x + msg.ransac.soluz_latodx.model.b;\n\n        if (jason.y >= msg.divisione.min_y - 10 && jason.y <= msg.divisione.max_y + 10) {\n            punti_retta_latodx.push(jason);\n        }\n        \n\n    }\n    msg.viz.punti_retta_latodx = JSON.stringify(punti_retta_latodx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //intersezione SX\n    var punto_intersezione_sx = [msg.stima.intersezione.base_sx];\n    msg.viz.punto_intersezione_sx = JSON.stringify(punto_intersezione_sx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //intersezione DX\n    var punto_intersezione_dx = [msg.stima.intersezione.base_dx];\n    msg.viz.punto_intersezione_dx = JSON.stringify(punto_intersezione_dx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //punti lato SX usati per il calcolo del ransac retta sx\n    msg.viz.punti_latosx = JSON.stringify(msg.divisione.punti_latosx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //punti lato DX usati per il calcolo del ransac retta dx\n    msg.viz.punti_latodx = JSON.stringify(msg.divisione.punti_latodx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //punti lato superiore usati per il calcolo del ransac retta superiore\n    msg.viz.punti_superiori = JSON.stringify(msg.divisione.punti_superiori).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //punti lato inferiore (base) usati per il calcolo del ransac retta base\n    msg.viz.punti_inferiori = JSON.stringify(msg.divisione.punti_inferiori).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "df4c217df3f3fd38",
                "7eb0d6ff7c7e36a4",
                "ce30c5697b133d78",
                "7d9b7f6864f9236e",
                "d92218077bce43d6",
                "c136e1da80dbc5d8",
                "a63daff1b5f47dd8"
            ]
        ]
    },
    {
        "id": "4d09ed9641382910",
        "type": "template",
        "z": "3b2d37cb88baf6c6",
        "name": "HTML CHART CANVAS",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<script src=\"/statiche/canvasjs.min.js\"></script>\n<div id=\"chartContainer\" style=\"height: 100%; width: 100%;\"></div>\n<script>\n{ //window.onload = function () \n\nvar chart = new CanvasJS.Chart(\"chartContainer\", {\n    zoomEnabled: true,\n    zoomType: \"x\",\n\ttheme:\"light2\",\n\tanimationEnabled: false,\n\ttitle:{\n\t\ttext: \"{{topic}}\"\n\t},\n\taxisY :{\n\t\ttitle: \"Z [mm]\",\n\t\tsuffix: \"\"\n\t},\n\ttoolTip: {\n\t\tshared: \"true\"\n\t},\n\tlegend:{\n\t\tcursor:\"pointer\",\n\t\titemclick : toggleDataSeries\n\t},\n\tdata: [{\n\t\ttype: \"scatter\",\n\t\tvisible: true,\n\t\tcolor: \"blue\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Profilo Z\",\n\t\tdataPoints: {{viz.profilo_z}}\n\t},\t\t\n\t{\n\t\ttype: \"line\", \n\t\tmarkerType: \"none\",\n\t\tlineThickness: 3,\n\t\tshowInLegend: true,\n\t\tvisible: true,\n\t\tcolor: \"orange\",\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Base Stimata\",\n\t\tdataPoints: {{viz.punti_retta_base}}\n\t},\n\t/*\n\t{\n\t\ttype: \"line\",\n\t\tmarkerType: \"none\",\n\t\tlineThickness: 3,\n\t\tvisible: true,\n\t\tshowInLegend: true,\n\t\tcolor: \"green\",\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Normale alla base\",\n\t\tdataPoints: {{viz.punti_retta_normale_alla_base}}\n\t},*/\n\t{\n\t\ttype: \"line\",\n\t\tmarkerType: \"none\",\n\t\tlineThickness: 3,\n\t\tvisible: true,\n\t\tshowInLegend: true,\n\t\tcolor: \"black\",\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Retta SX\",\n\t\tdataPoints: {{viz.punti_retta_latosx}}\n\t},\n\t\t{\n\t\ttype: \"line\",\n\t\tmarkerType: \"none\",\n\t\tlineThickness: 3,\n\t\tvisible: true,\n\t\tshowInLegend: true,\n\t\tcolor: \"black\",\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Retta DX\",\n\t\tdataPoints: {{viz.punti_retta_latodx}}\n\t\t},\n\t{\n\t\ttype: \"line\", \n\t\tshowInLegend: true,\n\t\tmarkerType: \"none\",\n\t\tlineThickness: 3,\n\t\tcolor: \"red\",\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Massimi Stimati\",\n\t\tdataPoints: {{viz.punti_retta_massimi}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 15,\n\t\tvisible: true,\n\t\tcolor: \"red\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Intersezione SX\",\n\t\tdataPoints: {{viz.punto_intersezione_sx}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 15,\n\t\tvisible: true,\n\t\tcolor: \"red\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Intersezione DX\",\n\t\tdataPoints: {{viz.punto_intersezione_dx}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 5,\n\t\tvisible: true,\n\t\tcolor: \"grey\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Punti calcolo Ransac SX\",\n\t\tdataPoints: {{viz.punti_latosx}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 5,\n\t\tvisible: true,\n\t\tcolor: \"yellow\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Punti calcolo Ransac DX\",\n\t\tdataPoints: {{viz.punti_latodx}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 5,\n\t\tvisible: true,\n\t\tcolor: \"green\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Punti calcolo Ransac Base\",\n\t\tdataPoints: {{viz.punti_inferiori}}\n\t},\n\t{\n\t\ttype: \"scatter\",\n\t\tmarkerSize: 5,\n\t\tvisible: true,\n\t\tcolor: \"magenta\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Punti calcolo Ransac Superiore\",\n\t\tdataPoints: {{viz.punti_superiori}}\n\t}\n\t]\n});\nchart.render();\n\nfunction toggleDataSeries(e) {\n\tif (typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible ){\n\t\te.dataSeries.visible = false;\n\t} else {\n\t\te.dataSeries.visible = true;\n\t}\n\tchart.render();\n}\n\n}\n</script>\n\n\n\n",
        "output": "str",
        "x": 1190,
        "y": 280,
        "wires": [
            [
                "935e5e5ea3a97694"
            ]
        ]
    },
    {
        "id": "bb83dc2e4ad873d9",
        "type": "ui_button",
        "z": "3b2d37cb88baf6c6",
        "name": "",
        "group": "af0fdb124df673fc",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "cinghia GRAND 6",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":28504,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4204,277755],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,136,36315,134,36302,135,36289,137,36277,132,36263,139,36249,144,36237,135,36226,127,36210,141,36196,148,36184,142,36171,144,36159,140,36147,131,36137,118,36123,124,36109,130,36095,134,36081,137,36068,141,36053,148,36042,139,36028,147,36017,133,36005,130,35991,136,35979,128,35965,136,35950,145,35936,152,35923,150,35912,141,35900,135,35887,137,35874,137,35859,149,35846,151,35835,137,35820,146,35807,147,35794,151,35783,139,35770,139,35756,141,35744,137,35731,139,35718,141,35705,141,35691,145,35680,135,35667,134,35654,134,35640,140,35625,150,35613,150,35599,154,35587,149,35574,150,35561,153,35549,149,35536,153,35523,151,35509,163,35498,149,35485,155,35471,164,35460,149,35447,152,35433,161,35421,161,35409,152,35397,150,35384,150,35371,155,35358,156,35345,159,35332,159,35319,161,35306,163,35294,163,35283,149,35271,144,35257,157,35244,156,35232,151,35219,153,35206,153,35194,149,35183,143,35170,143,35157,146,35144,150,35131,150,35118,155,35106,149,35092,160,35080,150,35067,153,35054,157,35042,155,35030,151,35018,144,35004,155,34991,159,34978,156,34965,162,34952,161,34940,156,34927,158,34916,152,34901,164,34890,151,34876,167,34864,163,34852,161,34839,163,34828,153,34815,153,34803,154,34790,154,34778,154,34764,163,34753,153,34740,157,34728,152,34715,159,34702,161,34691,154,34677,169,34664,166,34653,162,34640,165,34628,158,34614,168,34602,169,34589,169,34578,160,34565,165,34552,168,34540,165,34528,162,34515,167,34502,172,34490,166,34477,171,34466,159,34453,170,34440,170,34430,151,34416,165,34404,162,34391,163,34379,162,34366,166,34354,166,34341,166,34329,168,34316,165,34304,167,34291,168,34280,162,34267,164,34255,162,34241,170,34229,170,34216,177,34204,171,34192,167,34179,176,34167,174,34155,168,34142,170,34130,170,34118,173,34106,170,34093,170,34081,173,34069,171,34057,165,34045,161,34032,168,34019,173,34007,179,33994,182,33982,182,33970,177,33958,171,33946,170,33933,180,33921,180,33909,173,33897,172,33884,182,33871,184,33859,186,33846,190,33835,184,33823,168,33810,179,33799,170,33786,177,33773,186,33761,185,33749,185,33736,186,33724,179,33712,178,33700,179,33688,177,33676,176,33664,170,33651,179,33638,186,33627,175,33614,181,33602,177,33590,171,33577,176,33565,185,33553,184,33541,176,33528,179,33516,185,33503,198,33491,189,33479,182,33467,188,33454,187,33415,880,33403,870,33392,869,33380,870,33368,865,33356,890,33343,922,33328,1018,33313,1131,33299,1185,33286,1250,33272,1311,33259,1354,33246,1427,33233,1483,33220,1548,33207,1611,33193,1719,33179,1830,33165,1909,33154,1927,33143,1937,33132,1944,33121,1949,33110,1954,33099,1953,33088,1945,33077,1948,33066,1948,33055,1948,33045,1937,33034,1925,33023,1927,33012,1922,33001,1939,32990,1935,32979,1943,32968,1942,32957,1951,32946,1954,32935,1952,32925,1951,32914,1956,32903,1949,32892,1942,32881,1939,32870,1942,32859,1944,32848,1943,32837,1948,32826,1958,32815,1961,32805,1954,32794,1946,32783,1953,32772,1960,32761,1948,32750,1945,32739,1945,32728,1950,32717,1951,32707,1957,32696,1955,32685,1955,32674,1957,32663,1956,32652,1956,32641,1959,32630,1958,32619,1951,32608,1948,32597,1947,32587,1949,32576,1955,32565,1953,32554,1945,32543,1949,32532,1953,32521,1952,32510,1950,32500,1960,32489,1960,32478,1955,32467,1952,32456,1951,32445,1947,32434,1949,32423,1948,32412,1952,32401,1953,32390,1954,32380,1962,32369,1955,32358,1960,32347,1950,32336,1949,32325,1955,32314,1952,32303,1947,32292,1954,32281,1952,32270,1952,32259,1949,32249,1950,32238,1948,32227,1954,32216,1957,32206,1968,32194,1961,32183,1956,32172,1954,32161,1949,32150,1949,32140,1950,32129,1953,32118,1946,32107,1954,32096,1948,32085,1953,32075,1963,32064,1965,32053,1964,32042,1964,32031,1959,32019,1944,32008,1948,31997,1953,31986,1948,31976,1954,31965,1955,31953,1943,31943,1957,31932,1966,31921,1967,31911,1970,31899,1961,31888,1964,31877,1953,31865,1950,31854,1948,31843,1948,31833,1952,31822,1956,31811,1956,31800,1955,31789,1959,31779,1970,31768,1970,31756,1963,31745,1962,31734,1962,31723,1956,31712,1956,31701,1956,31690,1956,31679,1961,31669,1964,31658,1969,31647,1971,31636,1971,31625,1971,31614,1965,31602,1957,31591,1955,31580,1950,31569,1953,31558,1956,31547,1960,31537,1964,31525,1959,31516,1977,31504,1970,31494,1973,31482,1971,31471,1969,31461,1974,31449,1963,31437,1956,31426,1959,31415,1958,31405,1960,31394,1965,31382,1959,31371,1958,31360,1954,31348,1947,31339,1962,31328,1965,31316,1963,31307,1976,31294,1965,31283,1961,31273,1970,31262,1977,31250,1970,31239,1971,31228,1969,31217,1975,31206,1976,31195,1974,31184,1974,31172,1971,31161,1971,31149,1963,31139,1969,31127,1967,31116,1967,31105,1968,31095,1978,31085,1983,31073,1982,31062,1983,31051,1982,31039,1978,31028,1977,31017,1981,31006,1978,30994,1970,30982,1962,30970,1955,30960,1968,30950,1976,30939,1978,30929,1985,30917,1975,30906,1984,30896,1987,30885,1987,30873,1980,30860,1973,30849,1970,30838,1974,30827,1974,30816,1972,30805,1975,30794,1978,30782,1974,30772,1979,30761,1978,30750,1982,30738,1977,30727,1977,30716,1977,30705,1978,30693,1976,30681,1969,30669,1962,30659,1971,30649,1976,30638,1981,30627,1984,30615,1979,30605,1986,30594,1991,30581,1978,30569,1977,30559,1983,30547,1982,30535,1977,30524,1976,30513,1978,30502,1981,30492,1989,30480,1989,30468,1982,30455,1971,30443,1973,30434,1986,30423,1988,30411,1981,30400,1989,30387,1977,30376,1977,30365,1980,30354,1981,30343,1988,30331,1980,30320,1983,30308,1983,30297,1981,30282,1961,30270,1960,30261,1975,30251,1980,30238,1974,30228,1983,30217,1982,30206,1983,30195,1985,30184,1987,30173,1993,30162,1995,30149,1988,30136,1978,30051,1560,30014,1414,29980,1286,29950,1186,29758,263,29745,258,29730,250,29719,257,29705,251,29692,254,29679,253,29667,256,29654,258,29640,251,29627,249,29616,259,29603,260,29590,260,29577,259,29564,259,29552,266,29540,269,29526,266,29513,263,29499,260,29488,266,29474,261,29461,261,29448,262,29435,261,29422,259,29410,265,29396,259,29385,272,29372,271,29359,270,29345,266,29331,257,29319,263,29307,269,29293,262,29282,272,29268,266,29256,272,29243,273]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}}]}]}",
        "payloadType": "json",
        "topic": "Cinghia grandissima 6",
        "topicType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "cd3441ab527df89d",
        "type": "ui_button",
        "z": "3b2d37cb88baf6c6",
        "name": "",
        "group": "af0fdb124df673fc",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "cinghia GRAND 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26140,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4081,647773],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36331,121,36320,114,36308,107,36294,112,36281,112,36269,106,36254,119,36240,123,36225,130,36213,126,36200,128,36187,126,36175,123,36161,126,36149,122,36138,113,36124,118,36112,112,36097,123,36085,117,36073,113,36058,121,36046,119,36033,117,36021,113,36006,125,35992,129,35980,125,35967,124,35955,121,35943,116,35928,127,35918,111,35904,113,35890,121,35876,125,35865,116,35850,127,35837,126,35826,118,35812,120,35800,114,35787,114,35774,116,35759,127,35746,128,35734,124,35721,123,35709,116,35694,129,35680,132,35668,130,35658,113,35644,120,35630,124,35617,124,35604,122,35591,124,35578,127,35567,121,35553,125,35540,129,35527,130,35515,128,35503,122,35490,126,35478,120,35465,121,35454,113,35439,127,35427,118,35413,129,35403,111,35389,121,35376,124,35363,123,35351,121,35337,128,35325,124,35311,130,35299,130,35284,142,35273,135,35260,136,35248,127,35235,133,35223,126,35211,126,35199,117,35185,129,35172,128,35160,128,35148,121,35134,131,35122,127,35109,124,35097,121,35084,123,35073,113,35059,118,35047,117,35034,122,35021,121,35009,118,34995,123,34981,136,34969,131,34957,129,34943,138,34930,142,34919,126,34905,133,34894,127,34880,133,34868,134,34856,125,34845,113,34831,126,34818,133,34806,129,34793,135,34780,136,34768,131,34756,127,34742,142,34730,139,34719,123,34707,124,34696,114,34682,121,34669,125,34656,135,34642,142,34630,145,34617,142,34606,132,34594,132,34581,131,34570,117,34557,124,34470,819,34457,832,34445,836,34426,899,34402,1020,34371,1206,34347,1331,34318,1498,34282,1742,34260,1851,34249,1856,34237,1856,34225,1871,34213,1879,34202,1876,34189,1889,34178,1896,34167,1890,34157,1882,34146,1881,34134,1890,34123,1884,34113,1877,34103,1868,34092,1866,34081,1866,34069,1874,34058,1878,34046,1882,34035,1883,34024,1881,34012,1893,34001,1892,33990,1901,33979,1895,33969,1888,33959,1877,33948,1868,33937,1871,33924,1895,33913,1890,33902,1896,33891,1893,33880,1889,33868,1904,33858,1895,33847,1890,33836,1889,33825,1887,33815,1883,33804,1876,33793,1880,33781,1896,33769,1899,33759,1894,33748,1888,33737,1894,33725,1897,33714,1897,33704,1883,33694,1876,33682,1889,33671,1885,33660,1881,33649,1890,33638,1882,33626,1902,33615,1903,33604,1902,33594,1890,33583,1886,33572,1890,33560,1898,33549,1898,33539,1877,33527,1892,33516,1893,33505,1898,33495,1886,33483,1901,33472,1904,33461,1903,33450,1905,33439,1913,33428,1908,33417,1905,33406,1901,33395,1897,33384,1901,33373,1901,33362,1903,33352,1901,33341,1898,33330,1896,33319,1905,33308,1908,33297,1911,33286,1904,33275,1896,33264,1894,33253,1894,33243,1890,33231,1895,33220,1903,33209,1905,33198,1905,33188,1898,33176,1904,33166,1902,33155,1905,33144,1907,33133,1908,33122,1899,33111,1897,33100,1893,33089,1893,33078,1898,33067,1899,33056,1901,33045,1900,33034,1901,33023,1913,33012,1911,33002,1905,32991,1910,32980,1895,32969,1896,32958,1893,32947,1900,32936,1899,32925,1912,32914,1920,32903,1927,32892,1930,32881,1935,32870,1928,32859,1916,32848,1910,32838,1901,32827,1907,32816,1910,32805,1909,32794,1918,32783,1918,32772,1918,32761,1923,32750,1922,32739,1923,32728,1920,32717,1915,32706,1908,32695,1905,32685,1913,32674,1908,32663,1914,32652,1916,32641,1920,32630,1920,32619,1926,32608,1926,32597,1927,32586,1928,32575,1917,32564,1914,32553,1918,32542,1913,32532,1913,32521,1916,32510,1916,32499,1920,32488,1921,32477,1924,32466,1931,32455,1929,32444,1925,32434,1934,32423,1925,32411,1909,32400,1914,32390,1926,32379,1930,32368,1920,32357,1921,32346,1935,32335,1938,32325,1938,32314,1936,32303,1939,32292,1933,32281,1928,32270,1929,32259,1927,32248,1931,32237,1932,32226,1927,32215,1935,32205,1939,32194,1943,32183,1947,32172,1940,32161,1942,32150,1929,32138,1916,32128,1925,32117,1929,32106,1931,32095,1926,32084,1929,32073,1930,32063,1941,32052,1940,32041,1941,32030,1941,32019,1939,32008,1935,31997,1934,31985,1919,31974,1923,31963,1931,31952,1926,31942,1941,31931,1941,31919,1932,31909,1949,31898,1948,31888,1955,31876,1949,31865,1942,31854,1935,31842,1926,31832,1935,31821,1942,31810,1940,31799,1949,31788,1943,31777,1945,31766,1943,31756,1951,31745,1957,31734,1956,31723,1960,31712,1952,31700,1943,31690,1949,31679,1951,31668,1949,31656,1944,31646,1948,31635,1954,31624,1954,31613,1959,31602,1956,31591,1956,31580,1952,31568,1946,31557,1945,31546,1944,31535,1945,31524,1947,31514,1950,31503,1952,31492,1958,31482,1968,31471,1964,31460,1965,31449,1963,31437,1950,31425,1941,31414,1940,31403,1941,31392,1943,31382,1950,31371,1957,31361,1960,31350,1961,31338,1960,31328,1965,31317,1965,31306,1966,31294,1964,31282,1958,31271,1954,31260,1955,31248,1945,31236,1935,31216,1852,31190,1712,31169,1619,31150,1548,31133,1492,31114,1423,31095,1354,31079,1308,31058,1225,31040,1163,31022,1113,31002,1034,30973,881,30960,869,30858,187,30850,224,30839,232,30827,241,30813,228,30801,230,30790,238,30777,236,30765,235,30751,226,30740,237,30727,233,30716,241,30704,242,30690,232,30678,236,30666,240,30653,235,30641,238,30629,242,30616,236,30603,233,30591,242,30578,234,30565,236,30553,242,30541,242,30529,251,30515,239,30503,239,30491,244,30478,244,30465,243,30453,248,30440,241,30427,237,30416,248,30403,250,30391,252,30378,248,30365,244,30353,253,30341,252,30328,249,30315,249,30303,257,30291,256,30278,252,30265,253,30251,244,30239,245,30226,246,30214,248,30201,245,30189,251,30176,245,30164,254,30151,251,30139,251,30126,251,30114,256,30101,254,30090,260,30076,257,30064,257,30051,257,30039,259,30026,258,30014,260,30000,252,29989,261,29975,255,29962,254,29951,261,29938,257,29925,259,29913,260,29899,256,29887,259,29876,269,29862,265,29849,263,29836,265,29824,267,29812,275,29800,277,29788,283,29772,269,29760,272,29746,266,29735,278,29723,279,29709,278,29696,275,29683,275,29671,279,29657,275,29644,274,29631,271,29620,281,29607,280,29595,284,29581,282,29567,273,29556,284,29543,286,29531,288,29518,290,29505,287,29491,285,29479,289,29466,287,29451,279,29440,286,29427,285,29414,284,29401,285,29388,285,29375,286,29363,289,29352,299,29339,298,29327,302,29312,291,29299,294,29288,300,29275,299,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}}]}]}",
        "payloadType": "json",
        "topic": "Cinghia grandissima 1",
        "topicType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "102ae19f80acd740",
        "type": "change",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "PARAMETRI.ransac.sx.inliersRatio",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "e64c73836a79f0b8",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "",
        "func": "\n \n\nglobal.set(\"PARAMETRI\", msg.parameter); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "12a0132aa04a0568",
        "type": "inject",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "parameter",
                "v": "{\"ransac\":{\"sx\":{\"sampleSize\":2,\"threshold\":0.1,\"maxIterations\":100,\"inliersRatio\":0.6,\"improveModelWithConcensusSet\":true},\"dx\":{\"sampleSize\":2,\"threshold\":0.1,\"maxIterations\":100,\"inliersRatio\":0.6,\"improveModelWithConcensusSet\":true},\"base\":{\"sampleSize\":2,\"threshold\":0.1,\"maxIterations\":100,\"inliersRatio\":0.6,\"improveModelWithConcensusSet\":true},\"massimi\":{\"sampleSize\":2,\"threshold\":0.1,\"maxIterations\":100,\"inliersRatio\":0.6,\"improveModelWithConcensusSet\":true}},\"separazione\":{},\"viz\":{}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "e64c73836a79f0b8"
            ]
        ]
    },
    {
        "id": "2e713e72ad582e2d",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Lettura Parametri allo StartUp",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n/*********************** MODELLO DEL PROBLEMA RANSAC ****************/\n//STIMA RETTA IN 2D\nvar problem = {\n    // Your model, is how you compute your parameters or\n    // variable you want to find. Here there are m and b\n    model: function (sample) {\n        var p1 = sample[0];\n        var p2 = sample[1];\n        // You should validate p2.x != p1.x\n        var m = (p2.y - p1.y) / (p2.x - p1.x);\n        var b = p1.y - m * p1.x;\n        return {\n            m: m,\n            b: b\n        }\n    },\n    // Given model values, return a number indicate if you\n    // accept the point as inlier\n    fit: function (model, point) {\n        var y_estimated = model.m * point.x + model.b;\n        var error = point.y - y_estimated;\n        return Math.abs(error);\n    },\n\n    data: {}\n};\n\n/********************** PARAMETRI RANSAC **************/\n//TODO: LEGGERLI DA DB\nvar gparams = {\n    \"ransac\": {\n        \"sx\": {\n            \"sampleSize\": 2,\n                \"threshold\": 0.25,\n                    \"maxIterations\": 20,\n                        \"inliersRatio\": 0.4,\n            \"improveModelWithConcensusSet\": false\n        },\n        \"dx\": {\n            \"sampleSize\": 2,\n                \"threshold\": 0.25,\n                    \"maxIterations\": 20,\n                        \"inliersRatio\": 0.4,\n            \"improveModelWithConcensusSet\": false\n        },\n        \"base\": {\n            \"sampleSize\": 2,\n                \"threshold\": 0.3,\n                    \"maxIterations\": 20,\n                        \"inliersRatio\": 0.6,\n            \"improveModelWithConcensusSet\": false\n        },\n        \"massimi\": {\n            \"sampleSize\": 2,\n                \"threshold\": 0.3,\n                    \"maxIterations\": 20,\n                        \"inliersRatio\": 0.6,\n            \"improveModelWithConcensusSet\": false\n        },\n        \"problema\": problem\n    },\n    \"divisione\": { \"n_min_punti\": 4 },\n    \"inizializzazione\": {\"init_ok\": false},\n    \"viz\": { }\n};\n\n\n\nglobal.set(\"PARAMETRI\", gparams);\n\nglobal.set(\"PARAMETRI.inizializzazione.init_ok\", true);\n\n",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d92218077bce43d6",
        "type": "ui_text",
        "z": "3b2d37cb88baf6c6",
        "group": "af0fdb124df673fc",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "ANGOLO SX",
        "format": "{{msg.stima.angolo.sx_fixed}}°",
        "layout": "col-center",
        "className": "",
        "x": 1190,
        "y": 540,
        "wires": []
    },
    {
        "id": "c136e1da80dbc5d8",
        "type": "ui_text",
        "z": "3b2d37cb88baf6c6",
        "group": "af0fdb124df673fc",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "ANGOLO DX",
        "format": "{{msg.stima.angolo.dx_fixed}}°",
        "layout": "col-center",
        "className": "",
        "x": 1190,
        "y": 580,
        "wires": []
    },
    {
        "id": "a63daff1b5f47dd8",
        "type": "ui_text",
        "z": "3b2d37cb88baf6c6",
        "group": "af0fdb124df673fc",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "DISTANZA Lt",
        "format": "{{msg.stima.intersezione.lt_fixed}} mm",
        "layout": "col-center",
        "className": "",
        "x": 1190,
        "y": 620,
        "wires": []
    },
    {
        "id": "6a561461185e71d1",
        "type": "ui_button",
        "z": "3b2d37cb88baf6c6",
        "name": "",
        "group": "af0fdb124df673fc",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "cinghia med 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":11857,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3360,121352],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36322,167,36307,173,36295,170,36281,178,36267,179,36256,171,36241,181,36229,176,36217,174,36202,185,36190,176,36175,189,36165,172,36151,180,36138,181,36126,175,36113,174,36101,171,36087,173,36074,177,36061,175,36049,172,36035,177,36020,185,36009,178,35997,172,35982,184,35968,186,35957,180,35943,185,35929,188,35916,187,35906,174,35890,188,35877,188,35866,180,35852,183,35841,175,35827,179,35813,187,35800,189,35787,188,35775,185,35761,188,35748,188,35736,186,35723,182,35712,176,35697,185,35684,183,35671,186,35658,184,35644,191,35631,192,35619,189,35606,188,35595,177,35581,186,35569,181,35555,192,35543,188,35528,199,35518,183,35504,190,35493,182,35478,195,35466,194,35452,199,35441,194,35428,192,35417,186,35403,189,35392,183,35377,197,35363,204,35352,192,35342,176,35328,190,35314,194,35301,195,35290,187,35278,180,35264,190,35252,185,35239,191,35225,198,35212,200,35199,202,35188,193,35175,193,35163,194,35150,196,35136,205,35125,195,35111,203,35100,192,35088,188,35075,191,35062,188,35049,191,35036,192,35023,195,35011,193,34999,191,34985,201,34973,192,34960,198,34946,207,34934,204,34921,204,34909,205,34896,204,34884,200,34871,201,34859,203,34846,208,34833,208,34820,212,34809,205,34797,199,34785,193,34772,202,34758,212,34746,211,34735,203,34723,197,34710,205,34697,204,34685,199,34672,207,34659,209,34647,206,34634,214,34622,215,34611,198,34598,205,34586,199,34573,201,34560,207,34549,198,34537,196,34524,204,34510,212,34499,201,34487,201,34474,199,34462,198,34449,206,34436,213,34424,203,34412,207,34400,198,34387,204,34375,203,34363,202,34349,213,34336,217,34325,207,34312,214,34300,204,34287,213,34276,203,34264,200,34251,201,34238,207,34226,209,34213,214,34201,210,34188,214,34176,215,34163,213,34151,210,34140,203,34127,212,34115,208,34102,214,34091,201,34078,205,34066,202,34054,202,34041,205,34028,215,34016,218,34004,212,33992,209,33980,205,33968,206,33955,213,33943,214,33931,214,33918,215,33906,215,33894,217,33882,208,33869,215,33857,217,33845,216,33833,216,33820,213,33808,209,33796,211,33784,215,33771,216,33759,223,33747,221,33734,218,33722,224,33710,223,33698,218,33686,215,33673,219,33661,223,33649,217,33637,217,33624,222,33612,219,33600,216,33588,221,33575,226,33563,226,33551,220,33538,226,33526,222,33514,218,33502,217,33490,220,33477,226,33465,221,33453,218,33441,228,33428,230,33416,224,33404,226,33392,232,33380,235,33368,225,33356,217,33343,226,33331,230,33319,225,33307,229,33295,235,33283,228,33270,240,33258,233,33246,244,33234,242,33221,240,33209,236,33197,228,33185,237,33173,234,33161,224,33149,229,33136,240,33125,227,33112,228,33100,227,33088,231,33076,237,33064,239,33052,227,33039,228,33027,247,33015,266,33003,256,32991,249,32974,646,32962,689,32949,725,32937,756,32925,798,32913,834,32901,868,32889,901,32877,952,32865,974,32853,1016,32842,1037,32830,1072,32818,1107,32807,1147,32795,1185,32784,1213,32772,1241,32761,1281,32750,1319,32738,1354,32727,1380,32716,1381,32704,1383,32693,1382,32682,1386,32671,1388,32659,1391,32648,1394,32637,1393,32625,1383,32614,1391,32603,1391,32591,1395,32580,1384,32569,1374,32557,1371,32546,1385,32535,1385,32523,1380,32512,1383,32501,1388,32489,1380,32478,1380,32467,1385,32456,1385,32444,1389,32433,1396,32422,1393,32411,1398,32399,1400,32388,1397,32377,1395,32365,1390,32354,1383,32343,1391,32331,1390,32320,1390,32309,1387,32297,1389,32286,1388,32275,1397,32264,1400,32252,1391,32241,1389,32230,1395,32219,1399,32207,1398,32196,1394,32185,1399,32173,1400,32162,1399,32150,1393,32139,1401,32128,1402,32117,1398,32105,1395,32094,1398,32083,1402,32071,1397,32060,1400,32049,1397,32038,1402,32026,1404,32015,1398,32003,1401,31992,1394,31980,1388,31969,1397,31958,1400,31946,1397,31935,1402,31924,1398,31913,1409,31902,1410,31890,1403,31878,1403,31867,1408,31856,1411,31845,1410,31834,1415,31822,1408,31810,1402,31799,1405,31788,1406,31776,1404,31764,1403,31753,1407,31742,1407,31731,1405,31720,1414,31707,1398,31696,1406,31685,1409,31674,1408,31663,1412,31652,1424,31641,1427,31629,1420,31617,1412,31606,1420,31595,1423,31583,1409,31571,1403,31558,1381,31544,1348,31529,1307,31514,1261,31499,1220,31484,1176,31468,1121,31454,1086,31438,1038,31424,1004,31408,957,31392,909,31377,869,31362,830,31344,762,31330,732,31315,706,31299,662,31284,625,31245,340,31229,306,31215,288,31202,280,31190,277,31178,284,31166,284,31153,276,31141,283,31128,281,31116,277,31104,281,31092,284,31080,288,31067,285,31055,284,31041,275,31030,283,31018,286,31005,281,30993,281,30980,283,30968,285,30956,282,30943,280,30931,280,30918,277,30906,282,30894,283,30883,292,30870,286,30858,289,30846,292,30833,291,30821,294,30808,288,30796,287,30783,287,30771,285,30759,287,30746,287,30734,284,30721,281,30710,293,30698,295,30685,291,30673,291,30660,290,30648,294,30635,289,30623,290,30611,293,30598,292,30586,299,30573,295,30560,288,30547,291,30536,301,30523,294,30510,297,30497,293,30485,291,30472,293,30460,298,30447,291,30434,291,30422,296,30410,297,30397,293,30385,298,30373,302,30361,306,30347,293,30336,308,30323,305,30310,298,30297,298,30285,299,30273,302,30259,299,30247,297,30234,297,30222,298,30209,297,30197,300,30184,299,30171,294,30159,300,30147,304,30135,306,30122,304,30109,304,30096,302,30084,301,30071,302,30059,303,30046,304,30034,303,30021,303,30008,302,29996,301,29983,300,29971,305,29959,307,29945,301,29934,307,29921,306,29909,309,29896,309,29883,309,29869,304,29857,310,29844,305,29831,309,29819,310,29805,309,29791,302,29779,304,29766,305,29754,308,29741,308,29729,311,29716,314,29703,311,29689,308,29676,304,29663,306,29651,308,29637,305,29624,301,29610,300,29599,307,29586,305,29572,303,29559,301,29547,304,29534,305,29523,316,29508,303,29496,307,29483,307,29469,302,29457,304,29444,304,29432,310,29419,309,29406,309,29394,312,29380,307,29366,304,29353,303,29343,315,29328,308,29317,318,29304,318,29291,317,29278,315,29263,307,29253,321]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}}]}]}",
        "payloadType": "json",
        "topic": "Cinghia media 1",
        "topicType": "str",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "48a1151a40a2254d",
        "type": "ui_button",
        "z": "3b2d37cb88baf6c6",
        "name": "",
        "group": "af0fdb124df673fc",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "cinghia piccola 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":17341,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3637,645152],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36316,193,36301,203,36292,187,36277,198,36263,203,36252,191,36239,193,36226,194,36213,193,36199,196,36186,198,36173,198,36159,204,36145,208,36133,207,36122,194,36106,209,36093,209,36080,211,36069,199,36058,191,36042,209,36029,207,36018,197,36003,210,35991,202,35976,215,35964,208,35952,203,35938,210,35926,207,35913,204,35900,205,35886,210,35872,220,35860,213,35848,206,35834,214,35821,216,35810,203,35798,199,35785,200,35770,210,35760,196,35747,194,35732,207,35718,212,35704,221,35691,219,35679,215,35666,215,35653,213,35640,214,35627,217,35613,220,35601,216,35589,213,35577,212,35563,220,35549,227,35538,215,35525,220,35513,216,35502,208,35488,213,35476,212,35462,218,35449,218,35436,221,35424,219,35412,213,35400,214,35386,218,35375,212,35360,225,35349,216,35336,220,35324,211,35311,218,35298,219,35286,215,35272,223,35261,215,35247,222,35236,210,35223,213,35209,221,35198,213,35185,211,35172,215,35159,219,35147,216,35134,214,35121,223,35107,230,35096,216,35084,214,35071,217,35058,220,35047,209,35033,220,35020,220,35008,219,34995,218,34983,214,34970,216,34958,210,34945,219,34933,210,34919,219,34906,221,34894,219,34882,218,34869,219,34857,219,34844,224,34831,226,34820,212,34807,219,34795,215,34783,211,34771,212,34758,216,34745,223,34734,211,34721,216,34707,227,34695,224,34683,216,34671,217,34658,221,34646,215,34634,218,34621,216,34609,216,34596,222,34585,214,34572,212,34559,220,34547,220,34535,215,34522,224,34509,222,34497,221,34484,224,34472,220,34460,220,34448,218,34436,216,34423,215,34410,222,34398,220,34386,219,34373,223,34361,220,34348,221,34336,222,34324,221,34312,216,34299,221,34287,216,34276,204,34263,211,34250,212,34238,212,34225,214,34212,221,34200,222,34187,221,34175,218,34163,220,34151,218,34139,215,34126,215,34114,214,34102,219,34090,216,34077,222,34065,223,34053,214,34041,211,34029,214,34016,213,34004,211,33992,210,33980,211,33968,211,33955,219,33942,220,33930,220,33918,213,33906,211,33894,216,33882,210,33869,214,33857,213,33845,216,33833,214,33820,215,33808,220,33796,212,33784,209,33771,213,33760,202,33748,203,33735,213,33723,214,33710,210,33699,202,33686,206,33674,204,33662,208,33650,202,33637,213,33624,217,33612,211,33600,208,33588,211,33576,209,33564,205,33552,205,33539,203,33527,208,33515,209,33502,212,33490,208,33478,204,33466,208,33454,207,33441,206,33429,203,33417,205,33405,198,33393,203,33381,207,33368,206,33356,206,33344,208,33332,207,33320,198,33308,205,33296,199,33283,205,33271,203,33259,206,33247,208,33234,212,33222,205,33210,210,33198,208,33186,204,33174,200,33162,197,33150,198,33137,206,33125,202,33113,200,33101,196,33089,205,33077,196,33064,208,33052,204,33040,203,33028,203,33016,203,33003,203,32991,199,32979,197,32967,203,32955,203,32942,209,32930,209,32918,202,32906,189,32894,204,32882,202,32870,206,32857,206,32845,204,32833,201,32821,201,32809,206,32797,207,32784,208,32772,208,32760,212,32748,210,32736,212,32724,213,32711,205,32699,202,32687,204,32675,204,32663,208,32650,203,32638,205,32626,211,32614,203,32602,198,32590,209,32578,206,32565,207,32553,209,32541,206,32529,208,32517,211,32505,209,32492,208,32480,207,32468,207,32456,212,32444,210,32432,212,32419,210,32407,207,32395,206,32383,202,32371,215,32359,211,32346,211,32334,210,32322,210,32310,214,32298,222,32286,218,32274,224,32261,212,32249,217,32237,222,32225,212,32213,218,32201,214,32188,207,32176,213,32164,216,32152,208,32140,208,32127,210,32115,210,32103,211,32091,208,32079,217,32067,213,32055,218,32043,219,32030,218,32018,214,32005,208,31993,209,31981,218,31969,210,31957,209,31945,216,31932,215,31921,223,31908,215,31896,223,31884,223,31872,228,31859,208,31847,213,31834,216,31823,223,31810,217,31798,224,31786,223,31773,218,31761,222,31749,219,31737,223,31724,217,31712,219,31700,224,31688,226,31676,222,31664,224,31651,216,31639,217,31626,213,31614,213,31602,219,31591,228,31578,229,31566,220,31554,227,31542,232,31530,231,31517,228,31505,226,31492,217,31481,228,31469,231,31456,231,31444,234,31432,229,31419,225,31408,233,31395,225,31383,230,31371,235,31358,231,31346,227,31334,229,31321,230,31309,230,31297,232,31284,231,31271,223,31258,218,31246,222,31235,234,31223,235,31210,232,31198,237,31186,235,31173,235,31160,226,31148,234,31136,238,31123,230,31111,227,31099,232,31086,230,31073,227,31061,230,31050,237,31038,240,31024,232,31013,242,31000,239,30988,235,30976,244,30966,263,30961,332,30956,396,30949,446,30938,460,30926,463,30916,479,30907,511,30900,555,30894,607,30885,636,30877,666,30868,692,30859,724,30851,757,30843,789,30834,818,30827,856,30817,873,30808,895,30799,917,30790,947,30780,965,30773,1004,30768,1054,30760,1083,30750,1097,30740,1113,30730,1130,30720,1141,30708,1144,30696,1139,30684,1137,30673,1141,30662,1149,30650,1149,30637,1138,30626,1147,30614,1147,30603,1148,30590,1146,30577,1139,30565,1137,30553,1139,30542,1146,30531,1153,30519,1152,30507,1150,30497,1164,30485,1163,30472,1158,30460,1158,30447,1146,30433,1136,30423,1151,30411,1151,30400,1156,30388,1154,30375,1148,30363,1148,30351,1149,30338,1141,30328,1156,30316,1157,30307,1174,30295,1171,30283,1171,30271,1170,30255,1151,30241,1137,30228,1127,30209,1086,30189,1035,30166,967,30146,919,30121,844,30097,770,30073,699,30048,621,30019,520,29989,413,29966,347,29944,294,29928,277,29915,273,29900,261,29889,271,29876,268,29863,269,29849,266,29837,271,29823,266,29811,269,29798,269,29786,270,29774,277,29760,274,29747,273,29734,271,29721,271,29709,273,29696,275,29683,276,29670,275,29657,274,29644,273,29631,272,29620,282,29607,281,29593,278,29580,275,29568,281,29555,279,29544,288,29530,285,29516,278,29503,276,29493,293,29480,290,29466,285,29453,288,29439,283,29427,286,29414,284,29400,278,29387,279,29374,280,29361,278,29349,284,29337,288,29323,284,29311,287,29299,290,29285,285,29273,289,29259,288,29248,295]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[-3.760913,-86.23909,-0.0657,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9516},\"Min\":{\"x\":-35.19,\"z\":5.599},\"values\":[-3.761,-86.24,-0.06573,3.285]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[-3.766063,-86.23394,-0.0658,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9487},\"Min\":{\"x\":-35.2,\"z\":5.603},\"values\":[-3.766,-86.23,-0.06583,3.285]}}]}]}",
        "payloadType": "json",
        "topic": "Cinghia piccola 1",
        "topicType": "str",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "1723a6090f333a06"
            ]
        ]
    },
    {
        "id": "106107b1847934b5",
        "type": "function",
        "z": "3b2d37cb88baf6c6",
        "name": "Inizializza Messaggio",
        "func": "msg.errore = {};\nmsg.errore.stato = false;\nmsg.errore.msg = \"---\";\n\n\nmsg.divisione = {};\nmsg.divisione.punti_superiori = [];\nmsg.divisione.punti_inferiori = [];\nmsg.divisione.punto_medio = 0;\nmsg.divisione.centro_dente_x = 0;\nmsg.divisione.max_y = 0;\nmsg.divisione.min_y = 0;\nmsg.divisione.punti_latosx = [];\nmsg.divisione.punti_latodx = [];\n\nmsg.ransac = {};\nmsg.ransac.soluz_base = {};\nmsg.ransac.soluz_normale_alla_base = {};\nmsg.ransac.soluz_normale_alla_base.model = {};\nmsg.ransac.soluz_normale_alla_base.model.m = 0;\nmsg.ransac.soluz_normale_alla_base.model.b = 0;\n\nmsg.ransac.soluz_massimi = {};\nmsg.ransac.soluz_latosx = {};\nmsg.ransac.soluz_latodx = {};\n\nmsg.stima = {};\nmsg.stima.intersezione = {};\nmsg.stima.intersezione.base_sx = {};\nmsg.stima.intersezione.base_dx = {};\nmsg.stima.intersezione.lt = 0;\nmsg.stima.intersezione.lt_fixed = 0; //3 cifre dopo la virgola\n\nmsg.stima.angolo = {};\nmsg.stima.angolo.sx = 0;\nmsg.stima.angolo.sx_fixed = 0;//3 cifre dopo la virgola\n\nmsg.stima.angolo.dx = 0;\nmsg.stima.angolo.dx_fixed = 0;//3 cifre dopo la virgola\n\nmsg.viz = {};\nmsg.viz.profilo_z = \"[{x:0,y:0}]\";\ntry\n{\n    msg.viz.profilo_z = JSON.stringify(msg.flusso_dati.points).replace(/\"/g, \"'\").replace(/'/g, \"\");\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n//controllo che inizializzazione dei parametri sia avvenuta con successo\nvar init_params_ok = global.get(\"PARAMETRI.inizializzazione.init_ok\");\n\nif (init_params_ok === false)\n{\n    msg.errore.stato = true;\n    msg.errore.msg = \"Inizializzazione Parametri Fallita\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "dfd64063f931f9d4"
            ]
        ]
    },
    {
        "id": "7eb0d6ff7c7e36a4",
        "type": "switch",
        "z": "3b2d37cb88baf6c6",
        "name": "",
        "property": "errore.stato",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 320,
        "wires": [
            [
                "4d09ed9641382910"
            ],
            [
                "f0222e835eea3464"
            ]
        ],
        "outputLabels": [
            "OK",
            "ERRORE"
        ]
    },
    {
        "id": "ce30c5697b133d78",
        "type": "ui_text",
        "z": "3b2d37cb88baf6c6",
        "group": "af0fdb124df673fc",
        "order": 10,
        "width": 11,
        "height": 1,
        "name": "",
        "label": "STRINGA DI ERRORE",
        "format": "{{msg.errore.msg}}",
        "layout": "col-center",
        "className": "",
        "x": 1220,
        "y": 660,
        "wires": []
    },
    {
        "id": "f0222e835eea3464",
        "type": "template",
        "z": "3b2d37cb88baf6c6",
        "name": "HTML CHART CANVAS on ERROR",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<script src=\"/statiche/canvasjs.min.js\"></script>\n<div id=\"chartContainer\" style=\"height: 100%; width: 100%;\"></div>\n<script>\n{ //window.onload = function () \n\nvar chart = new CanvasJS.Chart(\"chartContainer\", {\n    zoomEnabled: true,\n    zoomType: \"x\",\n\ttheme:\"light2\",\n\tanimationEnabled: false,\n\ttitle:{\n\t\ttext: \"{{topic}}\"\n\t},\n\taxisY :{\n\t\ttitle: \"ASSE Z\",\n\t\tsuffix: \"\"\n\t},\n\ttoolTip: {\n\t\tshared: \"true\"\n\t},\n\tlegend:{\n\t\tcursor:\"pointer\",\n\t\titemclick : toggleDataSeries\n\t},\n\tdata: [{\n\t\ttype: \"scatter\",\n\t\tvisible: true,\n\t\tcolor: \"red\",\n\t\tshowInLegend: true,\n\t\tyValueFormatString: \"##.00\",\n\t\tname: \"Profilo Z\",\n\t\tdataPoints: {{viz.profilo_z}}\n\t}\n\t]\n});\nchart.render();\n\nfunction toggleDataSeries(e) {\n\tif (typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible ){\n\t\te.dataSeries.visible = false;\n\t} else {\n\t\te.dataSeries.visible = true;\n\t}\n\tchart.render();\n}\n\n}\n</script>\n\n\n\n",
        "output": "str",
        "x": 1230,
        "y": 380,
        "wires": [
            [
                "935e5e5ea3a97694"
            ]
        ]
    },
    {
        "id": "9307e1296995c5bf",
        "type": "ui_text_input",
        "z": "3b2d37cb88baf6c6",
        "d": true,
        "name": "",
        "label": "ratioInliers",
        "tooltip": "",
        "group": "af0fdb124df673fc",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "102ae19f80acd740"
            ]
        ]
    },
    {
        "id": "5e8f59fcb11a43ea",
        "type": "comment",
        "z": "c4f35bb0ae2de5ca",
        "name": "SIMULAZIONI DATI PROFILOMETRO",
        "info": "",
        "x": 690,
        "y": 20,
        "wires": []
    },
    {
        "id": "f42c53637b7508c0",
        "type": "function",
        "z": "c4f35bb0ae2de5ca",
        "name": "Preparazione Dati",
        "func": "//let inizio=Date.now();\n\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nlet xStart=     msg.payload.msgData[1].Profile.xStart;\nlet length=     msg.payload.msgData[1].Profile.length;\nlet prec=       msg.payload.msgData[1].Profile.prec;\nlet qualityID=  msg.payload.msgData[1].Profile.qualityID;\nlet points=     msg.payload.msgData[1].Profile.points;\n\n\nlet dati=   [];\nlet dati_x= [];\nlet dati_y= [];\nlet dati_xy= [];\n\nfor (let i = length*2 -2 ; i >=0  ; i-=2){\n    let jason={};\n    \n    jason.x = points[i] + xStart + getRandomArbitrary(-1,1);\n    jason.y = points[i + 1] + getRandomArbitrary(-1, 1);\n    \n    dati.push(jason);\n}\n\n\ndati.forEach(punto => { \n    punto.x=punto.x/prec; \n    punto.y=punto.y/prec;  \n    dati_x.push(punto.x);  \n    dati_y.push(punto.y);\n    dati_xy.push([punto.x,punto.y]);\n    } );\n\n//let durata=Date.now()-inizio;\n\nmsg.flusso_dati={};\nmsg.flusso_dati.points=     dati;\nmsg.flusso_dati.points_x=   dati_x;\nmsg.flusso_dati.points_y=   dati_y;\nmsg.flusso_dati.points_xy=   dati_xy;\n\n//msg.durata =    durata;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "e75f96ae7eb85fac"
            ]
        ]
    },
    {
        "id": "4575df167a46e348",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":8,\"msgID\":3450,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[1937,108488],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,133,36316,133,36305,123,36291,127,36275,140,36263,138,36251,133,36238,134,36226,129,36213,128,36202,118,36187,127,36173,135,36161,128,36148,127,36137,118,36124,117,36109,127,36095,132,36083,129,36072,120,36058,125,36044,130,36031,129,36020,120,36007,119,35993,122,35979,129,35967,124,35953,133,35940,132,35926,138,35916,121,35902,125,35888,129,35877,120,35864,123,35851,119,35839,113,35824,124,35812,123,35799,121,35786,121,35773,123,35761,114,35745,133,35735,118,35722,115,35709,115,35697,112,35684,112,35669,122,35658,112,35643,122,35631,118,35619,113,35605,119,35592,118,35580,115,35567,115,35555,115,35542,113,35529,119,35515,123,35501,135,35489,129,35477,127,35466,115,35452,120,35441,113,35428,114,35415,119,35403,113,35390,116,35377,116,35362,130,35350,123,35336,132,35324,129,35314,114,35301,112,35287,124,35275,122,35262,119,35249,122,35238,115,35225,112,35211,123,35200,113,35188,107,35174,117,35160,122,35148,118,35135,121,35125,106,35110,117,35098,117,35086,111,35075,99,35060,116,35047,120,35034,121,35021,124,35009,113,34995,125,34984,115,34971,115,34958,116,34945,122,34932,125,34920,118,34907,121,34895,119,34804,732,34792,729,34781,725,34769,722,34751,770,34721,920,34696,1027,34674,1112,34652,1198,34625,1327,34589,1539,34544,1819,34532,1827,34521,1824,34510,1821,34499,1819,34488,1816,34477,1815,34466,1814,34454,1827,34444,1813,34434,1799,34422,1807,34411,1808,34399,1810,34387,1815,34376,1813,34364,1826,34354,1815,34342,1816,34331,1816,34319,1825,34308,1821,34296,1826,34286,1818,34276,1810,34264,1818,34253,1812,34242,1813,34231,1811,34220,1809,34208,1813,34197,1810,34185,1814,34175,1809,34164,1808,34152,1810,34141,1814,34130,1812,34118,1822,34108,1810,34097,1811,34085,1815,34074,1813,34063,1812,34052,1815,34041,1819,34030,1811,34019,1811,34008,1817,33997,1812,33985,1818,33974,1821,33963,1818,33952,1816,33941,1818,33930,1816,33919,1814,33908,1817,33897,1812,33886,1817,33875,1814,33863,1820,33853,1810,33842,1809,33831,1810,33819,1819,33807,1829,33797,1825,33785,1827,33774,1825,33763,1825,33752,1821,33741,1819,33731,1815,33719,1823,33708,1826,33698,1814,33686,1814,33675,1825,33664,1822,33652,1831,33642,1822,33632,1804,33621,1799,33610,1797,33599,1801,33587,1807,33576,1815,33565,1805,33554,1811,33542,1825,33531,1825,33520,1819,33509,1824,33498,1828,33487,1825,33476,1826,33465,1824,33453,1832,33443,1820,33432,1809,33421,1808,33410,1813,33399,1811,33388,1825,33377,1822,33365,1833,33354,1829,33344,1821,33333,1824,33322,1821,33311,1818,33300,1826,33288,1828,33278,1827,33266,1838,33255,1839,33244,1838,33233,1842,33222,1830,33212,1820,33200,1833,33189,1838,33178,1837,33168,1821,33157,1816,33146,1822,33135,1824,33124,1827,33113,1826,33102,1833,33090,1836,33079,1838,33069,1834,33058,1826,33047,1831,33036,1834,33025,1826,33014,1822,33003,1825,32992,1827,32981,1836,32970,1830,32959,1836,32948,1832,32937,1844,32926,1841,32915,1839,32904,1835,32893,1840,32882,1839,32871,1828,32860,1828,32849,1828,32838,1831,32827,1836,32816,1834,32805,1839,32794,1834,32783,1841,32772,1841,32761,1844,32750,1830,32739,1826,32728,1833,32717,1837,32706,1839,32695,1844,32684,1845,32673,1848,32662,1848,32651,1843,32640,1844,32629,1843,32618,1847,32607,1848,32596,1843,32585,1834,32574,1834,32563,1840,32552,1842,32541,1844,32531,1850,32520,1844,32509,1848,32498,1847,32487,1851,32476,1852,32465,1848,32454,1846,32443,1841,32432,1840,32421,1836,32410,1849,32399,1845,32388,1852,32377,1854,32366,1850,32355,1854,32344,1850,32333,1857,32322,1859,32311,1864,32300,1862,32289,1856,32278,1853,32267,1851,32256,1856,32245,1859,32235,1859,32223,1850,32212,1854,32201,1851,32190,1855,32180,1858,32169,1856,32158,1859,32146,1852,32135,1847,32124,1846,32113,1847,32103,1853,32091,1850,32081,1862,32071,1873,32060,1872,32048,1870,32037,1869,32026,1864,32014,1854,32004,1861,31993,1864,31981,1847,31969,1838,31955,1773,31941,1713,31925,1631,31910,1568,31895,1501,31881,1448,31865,1372,31850,1302,31835,1240,31820,1197,31805,1131,31790,1075,31775,1016,31759,951,31742,868,31727,818,31715,809,31702,798,31691,800,31641,253,31628,242,31615,223,31601,208,31589,205,31576,201,31564,203,31553,209,31540,210,31528,208,31516,208,31504,210,31491,211,31479,212,31467,209,31455,214,31442,210,31430,209,31418,210,31406,220,31394,216,31382,220,31369,210,31357,213,31345,222,31333,223,31320,219,31308,220,31295,214,31282,209,31271,219,31258,213,31246,216,31234,221,31221,218,31209,218,31197,225,31185,226,31173,231,31160,223,31147,224,31135,226,31123,231,31111,227,31099,239,31085,222,31073,226,31062,235,31049,229,31037,233,31024,229,31012,236,31000,238,30988,238,30975,231,30964,249,30952,248,30938,239,30927,244,30914,242,30901,240,30889,242,30876,238,30865,243,30853,246,30839,238,30827,242,30816,246,30803,246,30791,245,30779,254,30767,258,30753,239,30740,236,30728,237,30716,243,30704,248,30693,255,30680,255,30668,254,30655,247,30643,253,30631,257,30618,255,30605,255,30593,254,30581,256,30568,257,30555,257,30542,250,30531,261,30519,264,30507,271,30494,269,30482,272,30469,270,30457,271,30445,280,30432,273,30419,271,30407,277,30394,274,30381,272,30370,278,30358,283,30345,285,30332,281,30320,282,30307,279,30294,281,30282,282,30270,283,30257,282,30244,281,30232,287,30220,289,30209,296,30195,289,30183,290,30171,294,30157,288,30145,292,30131,285,30119,289,30107,291,30095,296,30082,294,30071,299,30058,301,30045,297,30032,295,30021,300,30008,302,29996,303,29983,299,29970,299,29958,304,29946,303,29933,301,29920,304,29908,305,29896,310,29882,307,29870,307,29857,309,29843,301,29832,311,29819,310,29805,305,29793,313,29781,313,29768,314,29756,317,29743,318,29731,326,29717,318,29704,319,29691,319,29678,318,29665,317,29652,317,29640,317,29628,326,29615,323,29603,328,29589,324,29576,323,29565,330,29551,328,29540,333,29527,335,29515,340,29503,342,29488,335,29477,340,29464,342,29452,345,29438,342,29427,349,29412,341,29400,342,29387,343,29374,340,29362,346,29350,349,29337,352,29324,351,29311,349,29298,347,29284,344,29271,341,29259,345]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[3.070302,86.9297,0.0536,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.2},\"Min\":{\"x\":-35.08,\"z\":7.407},\"values\":[3.07,86.93,0.05364,9.289]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[3.070302,86.9297,0.0536,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.2},\"Min\":{\"x\":-35.08,\"z\":7.407},\"values\":[3.07,86.93,0.05364,9.289]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "ef2b01e55bc3994a",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":8,\"msgID\":4814,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2006,489487],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,132,36316,131,36303,134,36291,127,36275,143,36262,140,36251,131,36236,140,36226,129,36213,128,36201,123,36187,126,36173,132,36159,135,36148,126,36137,117,36124,118,36109,127,36095,131,36084,125,36073,114,36057,126,36043,132,36031,130,36019,122,36006,124,35993,124,35980,127,35968,119,35952,133,35940,130,35926,133,35915,125,35901,133,35889,127,35877,119,35863,123,35850,123,35838,119,35824,124,35811,128,35800,118,35786,121,35773,122,35761,115,35746,126,35734,121,35723,114,35709,118,35696,120,35684,111,35668,127,35657,116,35644,119,35632,115,35618,117,35604,123,35593,117,35579,120,35567,116,35553,127,35541,119,35529,119,35516,120,35502,125,35489,129,35476,131,35465,119,35452,121,35441,111,35428,111,35415,116,35402,116,35391,108,35376,121,35362,129,35351,120,35339,118,35325,124,35312,126,35301,113,35287,124,35275,122,35262,119,35251,108,35237,120,35224,121,35209,133,35199,118,35186,118,35173,120,35161,121,35150,108,35135,123,35123,116,35111,115,35097,119,35085,119,35073,114,35060,118,35047,119,35034,116,35020,126,35009,120,34997,113,34982,126,34971,116,34958,120,34945,119,34932,126,34921,114,34908,116,34895,114,34804,734,34792,728,34781,720,34769,722,34751,770,34722,915,34696,1028,34674,1111,34653,1196,34626,1322,34605,1400,34545,1813,34532,1829,34521,1826,34511,1819,34500,1818,34489,1808,34478,1810,34467,1812,34454,1819,34444,1814,34434,1798,34422,1806,34411,1807,34399,1812,34388,1812,34377,1811,34364,1823,34354,1813,34342,1815,34331,1816,34319,1823,34308,1823,34297,1825,34286,1816,34276,1809,34264,1818,34253,1811,34241,1816,34230,1814,34219,1811,34208,1817,34197,1808,34185,1814,34175,1807,34164,1807,34153,1807,34141,1813,34130,1813,34118,1822,34108,1811,34097,1813,34085,1815,34074,1812,34063,1817,34052,1815,34041,1814,34030,1812,34019,1811,34007,1818,33997,1815,33985,1819,33974,1820,33963,1815,33952,1815,33941,1819,33930,1814,33919,1814,33908,1817,33897,1813,33886,1817,33875,1815,33863,1820,33853,1809,33842,1808,33831,1809,33819,1819,33807,1829,33796,1825,33785,1827,33774,1823,33763,1825,33753,1818,33742,1818,33730,1819,33719,1823,33708,1827,33698,1813,33687,1809,33675,1826,33664,1823,33652,1828,33642,1821,33632,1802,33621,1800,33610,1797,33599,1802,33587,1807,33576,1814,33565,1805,33554,1812,33542,1825,33531,1824,33520,1820,33509,1825,33497,1832,33487,1823,33476,1821,33465,1823,33453,1829,33443,1818,33432,1805,33421,1806,33410,1811,33399,1812,33387,1827,33377,1822,33365,1833,33354,1830,33344,1822,33333,1824,33322,1820,33311,1818,33300,1826,33289,1827,33277,1828,33266,1836,33255,1837,33244,1837,33233,1843,33222,1831,33212,1819,33201,1827,33189,1837,33178,1835,33168,1820,33157,1815,33146,1822,33135,1824,33124,1826,33113,1827,33102,1833,33090,1835,33079,1836,33069,1830,33058,1825,33047,1831,33036,1833,33025,1825,33014,1822,33003,1824,32992,1827,32981,1836,32970,1830,32959,1836,32948,1830,32937,1843,32926,1840,32915,1837,32904,1836,32893,1840,32882,1839,32871,1829,32860,1827,32849,1829,32838,1832,32827,1837,32816,1831,32805,1839,32794,1834,32783,1838,32772,1840,32761,1843,32750,1832,32739,1828,32728,1830,32717,1837,32706,1840,32695,1844,32684,1846,32673,1849,32662,1848,32651,1841,32640,1844,32629,1841,32618,1845,32607,1848,32596,1841,32585,1832,32574,1835,32563,1840,32552,1841,32541,1842,32531,1851,32520,1845,32509,1848,32498,1847,32487,1850,32476,1855,32465,1847,32454,1843,32442,1837,32432,1837,32420,1835,32410,1848,32399,1845,32388,1851,32377,1854,32366,1851,32355,1855,32344,1850,32333,1857,32322,1858,32311,1863,32300,1863,32289,1855,32278,1853,32267,1852,32256,1855,32245,1859,32234,1859,32223,1850,32212,1855,32201,1851,32190,1855,32180,1861,32168,1853,32158,1864,32146,1852,32135,1846,32124,1845,32113,1846,32103,1853,32091,1848,32081,1863,32071,1873,32060,1871,32048,1870,32037,1872,32026,1867,32015,1858,32004,1857,31993,1862,31981,1849,31970,1840,31955,1779,31941,1716,31925,1633,31910,1563,31895,1497,31881,1450,31865,1372,31850,1302,31835,1241,31821,1197,31805,1128,31790,1076,31775,1014,31759,952,31742,868,31727,819,31715,807,31702,799,31690,799,31641,250,31629,250,31615,223,31601,206,31589,203,31577,203,31564,204,31552,207,31540,210,31528,210,31516,209,31504,211,31491,209,31479,210,31467,209,31455,211,31442,210,31430,211,31418,208,31406,218,31395,225,31382,221,31369,214,31357,213,31345,217,31333,218,31320,217,31308,217,31295,212,31283,219,31271,220,31258,217,31246,219,31234,219,31221,219,31209,219,31197,221,31185,224,31172,224,31160,225,31147,223,31136,235,31124,235,31112,236,31099,235,31085,223,31073,223,31061,228,31048,223,31037,230,31025,235,31012,235,31000,234,30987,233,30976,241,30964,244,30950,233,30938,234,30926,242,30913,236,30900,229,30888,228,30876,233,30864,239,30852,242,30840,243,30827,242,30814,237,30802,235,30791,250,30779,252,30766,249,30754,246,30740,240,30729,246,30717,249,30704,243,30693,253,30680,252,30667,248,30656,257,30644,257,30631,255,30618,252,30605,249,30593,254,30581,259,30568,257,30556,258,30543,262,30532,267,30518,260,30507,269,30494,267,30481,268,30469,269,30457,273,30446,281,30432,271,30420,278,30408,280,30394,273,30381,272,30368,270,30357,281,30344,278,30333,284,30319,279,30307,283,30295,288,30283,288,30270,288,30257,283,30245,286,30232,287,30221,292,30208,294,30194,283,30183,294,30171,295,30157,291,30145,290,30132,287,30120,289,30108,295,30096,297,30083,298,30071,299,30058,301,30046,304,30033,300,30021,300,30009,304,29995,297,29983,299,29970,300,29958,305,29946,306,29934,308,29920,304,29908,304,29897,314,29883,310,29870,308,29857,311,29844,310,29831,309,29819,310,29806,311,29794,314,29781,313,29768,314,29756,319,29743,320,29730,319,29716,312,29705,322,29692,321,29679,321,29666,319,29653,322,29641,324,29628,323,29615,326,29602,323,29590,330,29578,333,29566,335,29553,338,29540,333,29528,340,29515,341,29502,336,29490,341,29478,345,29464,342,29451,340,29440,352,29426,342,29414,346,29400,342,29387,344,29376,354,29362,348,29350,353,29339,357,29324,350,29313,356,29299,351,29286,352,29274,357,29261,357]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.054479,86.94552,0.0534,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.19},\"Min\":{\"x\":-35.05,\"z\":7.418},\"values\":[3.054,86.95,0.05336,9.288]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.054479,86.94552,0.0534,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.19},\"Min\":{\"x\":-35.05,\"z\":7.418},\"values\":[3.054,86.95,0.05336,9.288]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "e8091795b95a21c4",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":1421,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2638,791756],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36331,121,36318,121,36305,124,36290,133,36275,143,36263,138,36251,132,36238,134,36224,139,36213,128,36200,127,36188,122,36175,124,36161,129,36148,130,36136,124,36121,131,36109,127,36096,128,36084,124,36070,130,36058,126,36043,134,36030,133,36017,135,36005,131,35993,125,35982,116,35967,122,35956,115,35942,119,35929,120,35918,108,35902,124,35889,125,35876,123,35864,120,35849,131,35838,122,35825,118,35812,123,35798,126,35787,116,35774,117,35760,119,35748,114,35735,116,35724,104,35711,106,35697,112,35682,125,35669,125,35658,111,35645,113,35632,115,35619,114,35607,108,35595,105,35579,123,35566,122,35554,119,35541,122,35528,122,35516,121,35503,120,35489,127,35480,110,35464,124,35453,115,35439,124,35427,122,35414,123,35401,125,35390,116,35376,119,35364,120,35350,123,35339,118,35327,113,35312,126,35299,128,35288,117,35276,113,35263,115,35249,122,35237,115,35223,124,35211,122,35198,126,35188,105,35175,109,35160,125,35148,118,35136,116,35124,110,35111,111,35099,111,35086,110,35072,117,35059,120,35046,123,35034,119,35021,118,35008,124,34996,121,34983,124,34969,133,34958,121,34946,116,34932,120,34921,109,34909,110,34895,113,34881,127,34792,734,34782,717,34770,720,34752,765,34725,887,34699,1004,34677,1088,34651,1208,34627,1309,34608,1374,34544,1823,34532,1832,34522,1821,34510,1827,34500,1815,34488,1824,34478,1810,34467,1809,34455,1814,34444,1812,34434,1801,34422,1805,34412,1795,34399,1808,34389,1801,34377,1810,34365,1816,34354,1813,34342,1819,34331,1817,34318,1833,34307,1831,34297,1818,34286,1816,34276,1804,34264,1813,34253,1809,34242,1806,34230,1816,34219,1820,34208,1812,34197,1809,34185,1814,34174,1818,34163,1816,34152,1812,34141,1815,34131,1805,34119,1811,34108,1811,34097,1813,34085,1813,34074,1815,34063,1816,34052,1818,34041,1820,34030,1812,34019,1810,34008,1808,33997,1810,33986,1810,33974,1816,33964,1812,33952,1814,33941,1821,33930,1822,33919,1821,33908,1814,33897,1810,33886,1817,33874,1819,33863,1818,33853,1808,33842,1803,33830,1814,33820,1812,33808,1823,33797,1819,33786,1824,33774,1827,33763,1828,33752,1822,33742,1815,33730,1820,33720,1814,33708,1822,33697,1821,33686,1818,33675,1822,33664,1822,33653,1821,33642,1814,33631,1807,33620,1820,33609,1812,33598,1804,33587,1805,33576,1813,33565,1808,33554,1811,33542,1820,33531,1827,33519,1831,33509,1825,33498,1827,33487,1823,33476,1816,33465,1813,33454,1821,33443,1820,33432,1807,33421,1803,33410,1814,33399,1818,33388,1823,33377,1826,33365,1836,33354,1834,33343,1827,33332,1829,33321,1832,33311,1813,33300,1818,33289,1821,33278,1819,33266,1830,33256,1826,33244,1834,33233,1844,33222,1841,33211,1831,33200,1832,33189,1839,33178,1834,33167,1833,33157,1819,33146,1820,33135,1821,33124,1830,33113,1824,33102,1831,33091,1830,33079,1838,33068,1839,33058,1830,33047,1838,33036,1837,33025,1823,33014,1826,33003,1824,32992,1823,32981,1831,32970,1838,32959,1835,32948,1837,32937,1839,32926,1838,32915,1845,32904,1840,32893,1837,32882,1841,32871,1836,32860,1823,32849,1819,32838,1830,32827,1817,32816,1838,32805,1838,32794,1838,32783,1844,32772,1841,32761,1842,32750,1824,32739,1828,32728,1833,32717,1829,32706,1833,32695,1840,32684,1844,32673,1843,32662,1851,32651,1847,32640,1845,32629,1850,32618,1844,32607,1848,32596,1842,32585,1844,32574,1829,32563,1838,32552,1842,32541,1841,32531,1846,32520,1845,32509,1855,32498,1856,32487,1853,32476,1849,32465,1848,32454,1851,32443,1845,32432,1841,32421,1841,32410,1852,32399,1846,32388,1849,32377,1856,32366,1859,32355,1852,32344,1853,32333,1862,32322,1859,32311,1856,32300,1860,32289,1856,32278,1850,32267,1856,32256,1851,32245,1859,32235,1861,32223,1855,32212,1854,32201,1850,32190,1852,32179,1853,32168,1851,32157,1853,32147,1857,32135,1849,32124,1852,32114,1853,32102,1850,32092,1855,32081,1863,32070,1867,32060,1875,32049,1874,32037,1869,32026,1869,32015,1867,32004,1863,31993,1862,31982,1859,31970,1841,31956,1787,31941,1723,31926,1650,31911,1575,31896,1513,31881,1457,31866,1378,31850,1310,31835,1240,31821,1203,31806,1143,31790,1083,31774,1010,31759,958,31743,882,31728,824,31715,810,31702,800,31690,799,31679,807,31628,233,31615,228,31601,208,31589,206,31577,203,31565,206,31552,208,31540,207,31528,208,31516,209,31503,208,31492,214,31479,210,31467,210,31455,213,31442,210,31430,214,31418,216,31406,214,31394,217,31381,214,31369,215,31357,215,31345,213,31333,222,31320,217,31308,215,31296,223,31283,216,31271,218,31259,223,31246,221,31234,224,31221,219,31209,224,31197,225,31185,225,31173,229,31160,224,31148,233,31136,238,31123,232,31111,235,31098,225,31086,228,31075,242,31062,234,31050,236,31037,235,31024,230,31012,236,31000,233,30988,241,30976,244,30963,238,30951,238,30939,242,30927,244,30914,238,30902,244,30889,237,30877,241,30865,247,30852,245,30840,241,30827,242,30816,250,30803,248,30792,253,30780,259,30767,254,30755,254,30742,249,30728,242,30717,247,30705,253,30692,249,30681,259,30669,266,30657,267,30644,263,30631,261,30618,254,30607,265,30594,261,30582,264,30569,265,30556,261,30544,266,30532,269,30520,276,30508,275,30495,276,30483,276,30469,268,30457,274,30445,275,30432,278,30420,277,30405,265,30395,278,30383,286,30371,285,30358,288,30346,287,30332,278,30321,288,30309,292,30296,294,30283,292,30270,288,30259,295,30246,295,30233,288,30221,296,30208,291,30195,292,30184,297,30171,296,30158,294,30146,296,30133,295,30121,301,30109,302,30096,300,30084,302,30071,300,30059,302,30047,306,30034,307,30021,305,30008,299,29996,302,29984,304,29971,305,29959,307,29947,313,29934,307,29921,306,29908,306,29894,302,29883,311,29870,312,29860,324,29847,324,29832,315,29820,317,29807,317,29794,315,29780,310,29769,318,29756,320,29744,322,29731,325,29719,327,29705,325,29692,324,29680,324,29668,329,29655,329,29643,334,29629,330,29617,333,29603,327,29591,334,29580,342,29566,338,29552,331,29543,348,29529,343,29516,346,29504,349,29491,347,29478,345,29465,347,29453,353,29440,349,29427,349,29415,355,29403,356,29391,364,29377,357,29367,368,29353,363,29339,361,29328,367,29314,361,29301,364,29288,360,29276,367,29263,367]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[2.931314,87.06869,0.0512,9.3],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":11.13},\"Min\":{\"x\":-35.03,\"z\":7.507},\"values\":[2.931,87.07,0.05121,9.301]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[2.931314,87.06869,0.0512,9.3],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":11.13},\"Min\":{\"x\":-35.03,\"z\":7.507},\"values\":[2.931,87.07,0.05121,9.301]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "87f351bbb53428a5",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 4 ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 4 ",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":6724,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2906,125796],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36324,156,36310,162,36299,151,36285,156,36272,156,36259,155,36246,156,36233,158,36221,152,36207,157,36195,154,36181,157,36170,146,36156,151,36145,144,36130,153,36118,151,36105,148,36092,147,36081,140,36067,142,36055,139,36040,148,36024,167,36013,155,36000,157,35987,155,35974,154,35963,148,35950,146,35938,142,35926,137,35913,134,35896,159,35884,154,35872,149,35859,147,35847,144,35834,141,35820,146,35810,133,35795,145,35783,136,35768,150,35756,146,35742,148,35730,147,35718,139,35702,154,35691,146,35676,158,35663,157,35651,155,35640,142,35626,149,35613,148,35603,129,35590,133,35577,135,35563,141,35549,152,35538,140,35527,129,35512,141,35499,147,35487,142,35473,151,35461,143,35449,144,35437,140,35424,137,35411,142,35397,147,35386,141,35374,135,35359,151,35348,139,35335,138,35324,133,35310,138,35297,143,35284,144,35271,146,35258,149,35247,135,35235,131,35223,125,35209,139,35196,136,35184,137,35172,132,35159,128,35147,130,35134,132,35119,144,35106,147,35094,144,35082,139,35070,137,35057,139,35044,137,35031,140,35018,146,35006,140,34992,151,34981,138,34968,139,34955,140,34942,143,34930,140,34918,135,34905,134,34892,140,34880,133,34868,131,34855,132,34842,138,34830,138,34817,136,34804,140,34792,141,34780,138,34766,148,34755,134,34743,133,34729,145,34718,133,34706,131,34693,138,34681,131,34668,133,34655,140,34643,139,34630,144,34617,146,34604,147,34592,145,34581,139,34567,144,34555,141,34544,132,34531,133,34518,142,34505,148,34493,138,34481,135,34468,139,34457,129,34443,141,34431,140,34419,137,34405,147,34395,130,34382,128,34369,135,34357,130,34344,137,34332,134,34320,133,34308,124,34295,126,34283,130,34270,132,34258,130,34244,147,34232,143,34168,728,34155,742,34142,747,34128,782,34108,881,34087,983,34068,1077,34051,1144,34035,1204,34018,1272,33995,1410,33977,1493,33962,1550,33939,1694,33921,1793,33907,1832,33896,1823,33886,1815,33875,1818,33863,1824,33852,1824,33841,1817,33831,1808,33819,1813,33808,1812,33797,1815,33785,1832,33774,1828,33763,1822,33752,1825,33742,1817,33730,1828,33718,1837,33708,1828,33697,1823,33686,1818,33675,1821,33664,1818,33653,1823,33641,1828,33630,1832,33619,1835,33608,1822,33597,1821,33586,1831,33575,1822,33564,1823,33554,1813,33543,1805,33531,1818,33520,1822,33509,1818,33498,1821,33487,1826,33475,1829,33464,1831,33453,1840,33442,1828,33431,1827,33420,1833,33409,1826,33398,1835,33387,1826,33376,1830,33365,1840,33354,1835,33343,1831,33332,1834,33321,1829,33310,1828,33300,1823,33289,1821,33277,1830,33267,1826,33256,1817,33245,1819,33234,1828,33223,1826,33211,1832,33200,1835,33189,1839,33178,1831,33168,1830,33157,1830,33145,1835,33135,1830,33123,1835,33112,1840,33101,1836,33091,1831,33080,1828,33069,1828,33058,1836,33047,1831,33036,1836,33025,1840,33013,1842,33002,1844,32992,1838,32981,1837,32970,1833,32959,1833,32948,1826,32937,1822,32926,1837,32915,1847,32904,1845,32893,1845,32882,1850,32871,1849,32860,1842,32849,1842,32838,1840,32827,1844,32816,1840,32805,1841,32794,1837,32783,1841,32772,1839,32761,1851,32750,1839,32739,1840,32728,1844,32717,1849,32706,1841,32695,1847,32684,1838,32673,1843,32662,1839,32651,1839,32640,1829,32629,1846,32618,1849,32607,1849,32596,1841,32585,1844,32574,1841,32563,1843,32552,1847,32541,1840,32530,1844,32519,1842,32509,1851,32497,1841,32487,1847,32476,1855,32465,1859,32454,1850,32443,1860,32432,1858,32421,1855,32410,1856,32399,1854,32388,1846,32377,1849,32366,1848,32355,1843,32344,1844,32333,1841,32322,1845,32311,1855,32300,1855,32289,1854,32278,1859,32268,1863,32256,1858,32245,1849,32234,1845,32223,1848,32212,1845,32201,1838,32190,1842,32179,1843,32168,1849,32158,1858,32147,1861,32136,1854,32125,1863,32114,1859,32102,1850,32092,1855,32081,1854,32070,1856,32059,1850,32048,1855,32037,1853,32025,1851,32015,1855,32004,1857,31993,1862,31982,1864,31971,1865,31960,1859,31948,1857,31937,1848,31926,1855,31915,1855,31904,1855,31893,1858,31882,1851,31871,1856,31860,1859,31849,1866,31839,1872,31827,1867,31816,1860,31805,1861,31793,1855,31782,1855,31771,1855,31760,1858,31749,1851,31738,1856,31728,1864,31717,1866,31706,1872,31695,1869,31684,1876,31673,1874,31661,1865,31650,1865,31639,1866,31628,1864,31617,1859,31606,1863,31595,1861,31584,1865,31574,1874,31563,1883,31551,1870,31541,1878,31529,1868,31518,1871,31507,1866,31496,1867,31483,1852,31473,1860,31462,1865,31451,1862,31439,1855,31430,1869,31419,1874,31408,1873,31397,1875,31386,1873,31375,1875,31364,1876,31352,1865,31339,1851,31323,1794,31300,1680,31274,1529,31255,1446,31236,1375,31218,1305,31199,1231,31178,1139,31158,1057,31136,960,31115,868,31099,832,31084,798,31063,718,31015,380,30994,296,30978,260,30964,247,30950,228,30937,227,30925,226,30912,225,30900,223,30887,222,30875,226,30863,230,30851,233,30839,235,30827,238,30813,225,30802,234,30789,229,30776,228,30764,229,30752,229,30740,234,30727,233,30715,235,30702,230,30690,230,30679,240,30667,243,30653,238,30640,233,30628,233,30616,236,30603,236,30591,240,30578,235,30565,234,30553,238,30541,243,30528,242,30516,245,30503,243,30490,238,30479,253,30467,253,30453,245,30440,245,30428,248,30415,242,30403,246,30390,244,30379,254,30365,245,30354,257,30340,249,30328,252,30316,255,30303,251,30291,255,30278,256,30266,257,30253,256,30240,252,30228,256,30214,251,30202,254,30190,255,30179,265,30164,251,30151,250,30139,256,30127,255,30114,255,30103,262,30091,268,30077,258,30065,262,30053,265,30039,257,30026,260,30014,260,30002,267,29990,271,29977,263,29964,266,29952,265,29938,262,29927,266,29914,266,29902,273,29888,267,29876,268,29863,268,29850,269,29837,271,29826,280,29813,278,29800,279,29787,277,29774,280,29763,290,29748,276,29737,286,29723,280,29709,276,29696,276,29685,284,29671,281,29660,289,29647,290,29635,291,29620,284,29609,291,29596,293,29581,281,29569,284,29557,288,29543,287,29532,295,29521,305,29507,296,29493,295,29478,284,29468,295,29455,294,29443,300,29430,299,29415,291,29404,298,29389,292,29376,290,29365,298,29352,299,29340,304,29326,298,29314,300,29302,308,29289,305,29275,301,29263,304,29249,302]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.898658,-87.10134,-0.0506,9.26],\"visualizationValues\":{\"Max\":{\"x\":35.58,\"z\":7.459},\"Min\":{\"x\":-35.17,\"z\":11.04},\"values\":[-2.899,-87.1,-0.05063,9.261]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.898658,-87.10134,-0.0506,9.26],\"visualizationValues\":{\"Max\":{\"x\":35.58,\"z\":7.459},\"Min\":{\"x\":-35.17,\"z\":11.04},\"values\":[-2.899,-87.1,-0.05063,9.261]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "bce7610175c3e518",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":9668,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3254,632331],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,183,36306,178,36295,172,36281,178,36269,174,36255,178,36243,173,36231,167,36218,168,36204,173,36191,173,36178,171,36167,166,36154,165,36141,161,36126,173,36117,156,36102,162,36086,180,36075,168,36065,155,36049,173,36036,170,36025,160,36013,154,36000,155,35984,170,35973,164,35961,159,35947,162,35936,154,35923,153,35909,156,35896,155,35886,144,35871,154,35860,141,35845,156,35832,153,35818,157,35806,153,35795,146,35781,151,35769,145,35756,147,35744,139,35730,144,35716,150,35703,151,35690,151,35678,148,35664,154,35650,157,35638,150,35628,136,35616,132,35602,136,35588,145,35577,134,35564,134,35551,136,35539,132,35525,142,35510,154,35500,140,35485,152,35474,143,35464,126,35451,130,35437,139,35425,131,35414,123,35399,138,35386,137,35373,138,35360,146,35348,137,35336,132,35323,138,35311,130,35298,135,35284,144,35271,146,35259,143,35246,140,35234,137,35223,129,35210,130,35197,131,35184,132,35171,137,35157,145,35145,139,35132,141,35120,139,35107,140,35095,136,35082,142,35070,136,35057,139,35044,139,35031,143,35021,124,35007,128,34994,134,34981,138,34968,138,34956,137,34943,133,34929,143,34917,140,34905,134,34893,135,34881,124,34868,133,34855,131,34843,128,34829,142,34819,126,34805,138,34792,142,34780,140,34768,134,34755,141,34743,137,34730,137,34718,134,34705,140,34693,134,34681,134,34668,135,34653,153,34642,146,34629,146,34617,145,34605,145,34592,146,34580,144,34569,134,34556,139,34542,145,34530,145,34518,144,34505,145,34493,146,34480,147,34468,142,34456,136,34444,131,34431,143,34419,140,34406,142,34394,140,34382,133,34369,139,34357,133,34342,154,34275,735,34262,746,34251,731,34239,737,34223,785,34202,881,34181,984,34162,1066,34142,1157,34123,1251,34105,1323,34087,1396,34069,1484,34048,1594,34029,1685,34014,1734,34001,1755,33990,1756,33980,1743,33969,1740,33957,1748,33946,1754,33934,1762,33923,1768,33912,1766,33900,1778,33889,1773,33878,1767,33867,1775,33855,1775,33844,1778,33834,1763,33823,1767,33813,1752,33801,1760,33790,1753,33777,1779,33766,1783,33755,1779,33745,1772,33733,1771,33722,1779,33711,1769,33699,1788,33689,1776,33678,1763,33667,1768,33656,1770,33644,1784,33633,1787,33621,1797,33610,1788,33599,1790,33588,1787,33578,1769,33567,1773,33555,1785,33544,1778,33534,1769,33522,1784,33511,1777,33500,1781,33488,1785,33478,1782,33466,1784,33455,1784,33444,1784,33434,1771,33422,1782,33411,1784,33400,1786,33389,1778,33378,1776,33367,1780,33356,1784,33345,1783,33334,1794,33323,1794,33312,1785,33301,1794,33290,1785,33279,1780,33268,1782,33257,1785,33246,1779,33235,1781,33224,1785,33213,1792,33202,1793,33190,1797,33179,1800,33168,1794,33158,1792,33146,1792,33136,1788,33125,1787,33114,1785,33103,1788,33091,1790,33080,1792,33069,1802,33058,1794,33047,1803,33036,1801,33025,1802,33014,1799,33003,1800,32992,1787,32981,1787,32970,1797,32959,1791,32948,1794,32937,1804,32926,1814,32915,1812,32904,1824,32893,1822,32882,1810,32871,1810,32860,1807,32849,1800,32838,1800,32827,1802,32816,1797,32805,1802,32794,1806,32783,1815,32772,1823,32761,1814,32750,1818,32739,1807,32728,1805,32717,1811,32706,1806,32695,1816,32684,1810,32673,1807,32662,1804,32651,1820,32640,1819,32629,1824,32618,1820,32607,1823,32596,1820,32585,1811,32574,1814,32563,1817,32552,1809,32541,1812,32530,1804,32519,1809,32508,1813,32497,1818,32486,1829,32475,1836,32464,1834,32453,1835,32442,1825,32431,1814,32420,1816,32409,1810,32398,1810,32387,1813,32376,1816,32365,1827,32354,1828,32343,1830,32333,1837,32322,1835,32311,1834,32300,1833,32289,1837,32277,1829,32266,1823,32255,1823,32244,1829,32234,1832,32223,1837,32212,1835,32201,1843,32190,1841,32179,1833,32168,1833,32157,1832,32145,1828,32135,1829,32124,1833,32112,1826,32102,1829,32091,1837,32080,1840,32069,1843,32058,1846,32047,1842,32036,1843,32025,1842,32013,1832,32003,1836,31991,1830,31980,1828,31969,1834,31959,1845,31948,1843,31937,1847,31925,1841,31915,1850,31903,1846,31893,1851,31882,1852,31870,1848,31859,1848,31848,1842,31836,1832,31825,1834,31815,1842,31804,1847,31794,1856,31782,1851,31771,1854,31760,1856,31749,1859,31739,1862,31727,1853,31716,1850,31704,1841,31692,1833,31682,1841,31671,1850,31660,1851,31650,1858,31639,1858,31628,1856,31617,1856,31606,1859,31594,1855,31583,1853,31572,1853,31561,1854,31549,1845,31539,1851,31528,1857,31517,1856,31507,1864,31495,1863,31484,1864,31474,1866,31463,1868,31452,1868,31438,1843,31419,1751,31400,1660,31381,1568,31361,1480,31344,1413,31326,1345,31306,1254,31288,1188,31268,1102,31248,1011,31227,918,31209,855,31193,815,31179,794,31165,769,31113,375,31094,305,31075,238,31061,223,31048,218,31035,217,31022,212,31011,221,30999,224,30986,224,30974,219,30961,221,30949,222,30937,223,30924,223,30913,229,30900,226,30887,224,30875,223,30863,229,30851,235,30838,227,30825,223,30812,220,30801,232,30789,235,30776,226,30764,229,30753,240,30741,246,30728,238,30716,241,30703,235,30691,239,30679,246,30666,236,30652,228,30641,235,30629,244,30616,240,30604,240,30591,241,30580,252,30566,241,30555,252,30542,252,30530,252,30517,251,30503,242,30490,242,30478,247,30465,244,30453,247,30440,245,30429,256,30417,258,30405,264,30392,261,30380,263,30368,266,30355,268,30341,259,30330,267,30318,269,30305,267,30292,264,30278,258,30268,272,30255,271,30243,272,30230,271,30218,272,30204,265,30193,277,30180,277,30168,279,30156,278,30142,274,30129,271,30116,267,30105,280,30094,289,30080,282,30068,280,30056,284,30043,284,30031,286,30018,282,30005,282,29992,278,29980,282,29967,279,29954,278,29944,292,29930,285,29919,297,29905,290,29893,294,29880,291,29868,297,29855,296,29843,303,29828,293,29816,295,29803,297,29791,299,29778,302,29765,301,29752,300,29739,299,29728,307,29714,304,29702,309,29690,309,29676,304,29664,309,29650,307,29637,306,29625,309,29613,311,29601,318,29588,318,29574,313,29563,321,29550,319,29535,311,29524,317,29511,321,29499,324,29486,321,29473,324,29460,324,29447,323,29436,329,29422,326,29408,321,29398,335,29384,327,29371,330,29359,334,29345,326,29332,327,29320,329,29307,328,29294,330,29282,333,29269,335,29257,338]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.052334,-87.94767,-0.0358,9.18],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":7.906},\"Min\":{\"x\":-35.1,\"z\":10.44},\"values\":[-2.052,-87.95,-0.03584,9.179]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.052334,-87.94767,-0.0358,9.18],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":7.906},\"Min\":{\"x\":-35.1,\"z\":10.44},\"values\":[-2.052,-87.95,-0.03584,9.179]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "717af09ffb989cc0",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":22123,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3878,687719],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36326,146,36311,156,36297,160,36283,167,36271,160,36259,156,36245,161,36235,145,36221,151,36209,148,36194,155,36181,158,36169,155,36155,156,36142,159,36128,162,36117,151,36103,160,36094,140,36080,142,36067,145,36054,145,36042,139,36027,150,36015,146,36001,151,35989,143,35977,142,35964,142,35950,147,35937,146,35925,142,35912,141,35897,151,35885,149,35870,159,35857,157,35847,142,35834,144,35820,148,35808,144,35794,148,35783,136,35771,136,35760,123,35744,138,35731,141,35716,149,35706,134,35694,130,35680,136,35666,138,35654,137,35641,133,35627,139,35614,143,35602,134,35589,137,35577,137,35563,141,35551,141,35538,137,35526,135,35511,148,35500,141,35487,145,35475,136,35462,142,35449,142,35435,147,35425,130,35412,137,35399,139,35384,149,35373,142,35361,138,35348,140,35335,139,35321,147,35311,130,35297,140,35283,151,35270,150,35259,141,35246,143,35234,135,35223,127,35209,133,35197,131,35183,142,35170,140,35160,127,35145,138,35133,139,35120,140,35107,138,35094,141,35082,141,35069,140,35057,136,35044,141,35032,133,35018,140,35004,152,34993,139,34980,143,34968,141,34955,140,34942,144,34930,138,34917,142,34903,148,34888,167,34876,168,34788,768,34773,787,34755,842,34730,942,34704,1063,34679,1174,34651,1304,34623,1445,34591,1613,34561,1776,34544,1822,34533,1821,34522,1819,34512,1811,34501,1801,34489,1809,34478,1810,34466,1813,34455,1815,34442,1826,34432,1816,34423,1803,34411,1807,34400,1808,34387,1824,34377,1810,34365,1810,34354,1809,34343,1813,34331,1815,34320,1811,34309,1813,34297,1825,34286,1816,34274,1824,34264,1809,34253,1816,34241,1816,34230,1818,34219,1812,34208,1808,34197,1811,34186,1809,34173,1824,34162,1824,34150,1834,34139,1829,34129,1820,34118,1826,34107,1819,34097,1813,34086,1808,34076,1795,34065,1795,34053,1802,34042,1804,34030,1816,34018,1824,34007,1827,33996,1818,33985,1819,33974,1826,33963,1820,33952,1822,33941,1823,33930,1823,33919,1813,33907,1822,33896,1824,33886,1819,33875,1810,33862,1837,33852,1824,33841,1827,33830,1827,33818,1828,33808,1816,33797,1824,33785,1828,33774,1834,33764,1818,33753,1816,33741,1820,33729,1841,33718,1834,33706,1850,33696,1846,33685,1832,33674,1831,33664,1827,33653,1814,33642,1808,33631,1816,33620,1817,33609,1821,33597,1831,33586,1835,33575,1828,33563,1838,33553,1834,33541,1841,33531,1824,33520,1819,33509,1822,33498,1820,33486,1830,33475,1830,33464,1839,33453,1833,33442,1835,33431,1847,33420,1841,33409,1845,33398,1846,33387,1832,33377,1823,33366,1818,33355,1818,33343,1840,33332,1839,33321,1832,33310,1841,33299,1843,33288,1853,33277,1846,33266,1847,33255,1847,33244,1845,33233,1849,33222,1835,33211,1834,33200,1832,33189,1842,33178,1833,33167,1833,33156,1836,33145,1844,33134,1848,33123,1846,33112,1852,33101,1849,33090,1853,33079,1848,33068,1846,33057,1842,33046,1843,33036,1839,33024,1849,33013,1850,33002,1849,32991,1859,32980,1858,32969,1856,32958,1852,32948,1851,32937,1846,32926,1847,32915,1846,32904,1855,32893,1854,32882,1860,32871,1853,32860,1857,32849,1862,32838,1858,32827,1860,32816,1857,32805,1857,32794,1856,32783,1859,32772,1848,32761,1850,32750,1846,32739,1863,32728,1861,32717,1859,32706,1860,32695,1857,32684,1860,32673,1861,32662,1869,32651,1861,32640,1846,32629,1854,32618,1853,32607,1853,32597,1858,32586,1870,32575,1866,32564,1869,32553,1868,32542,1864,32531,1865,32520,1875,32509,1865,32498,1859,32487,1860,32476,1859,32465,1853,32454,1848,32443,1864,32432,1867,32421,1867,32410,1861,32399,1865,32388,1868,32378,1875,32367,1877,32355,1853,32344,1853,32333,1860,32322,1864,32312,1869,32301,1876,32290,1867,32279,1875,32268,1877,32257,1876,32246,1884,32235,1881,32224,1868,32213,1865,32202,1862,32191,1871,32180,1861,32169,1875,32158,1873,32148,1888,32137,1885,32125,1869,32115,1878,32104,1882,32093,1877,32081,1869,32070,1864,32059,1857,32048,1860,32037,1872,32026,1871,32016,1877,32005,1884,31994,1887,31983,1878,31970,1856,31952,1721,31935,1612,31921,1562,31905,1480,31891,1425,31877,1384,31863,1329,31847,1257,31833,1212,31818,1155,31803,1105,31787,1033,31773,982,31757,916,31742,866,31729,842,31715,809,31700,761,31662,388,31644,292,31629,253,31615,232,31603,234,31591,236,31578,228,31566,227,31555,240,31543,243,31530,233,31518,240,31506,245,31494,244,31482,242,31469,242,31458,247,31445,242,31433,241,31421,251,31409,246,31397,255,31384,249,31372,246,31360,244,31347,244,31335,244,31323,251,31311,252,31299,257,31286,247,31274,254,31261,252,31249,248,31236,250,31225,254,31212,255,31200,255,31188,259,31175,258,31163,255,31150,251,31138,258,31126,255,31114,259,31102,262,31090,265,31077,260,31064,260,31052,263,31040,264,31028,264,31015,264,31003,263,30991,265,30977,255,30966,267,30954,267,30941,264,30929,267,30917,270,30905,269,30893,275,30880,270,30867,264,30855,264,30842,264,30830,264,30818,268,30805,261,30794,270,30782,273,30769,270,30757,270,30745,273,30732,274,30720,271,30708,277,30696,277,30683,273,30670,273,30659,281,30646,274,30634,277,30621,278,30608,275,30595,270,30583,273,30570,272,30557,270,30545,271,30532,272,30519,269,30507,272,30495,272,30483,279,30469,271,30456,267,30445,277,30432,272,30420,276,30407,274,30393,269,30381,271,30369,275,30357,277,30344,277,30332,281,30320,285,30308,288,30294,281,30282,281,30269,279,30257,283,30244,278,30231,275,30218,277,30207,285,30194,282,30181,279,30168,275,30156,281,30142,274,30131,283,30118,280,30104,272,30093,281,30081,282,30067,276,30056,286,30042,276,30029,273,30017,279,30004,275,29992,277,29979,279,29967,280,29955,284,29941,278,29929,281,29917,282,29904,281,29890,276,29878,284,29866,288,29854,290,29840,288,29827,285,29815,291,29802,288,29789,287,29775,282,29763,287,29752,298,29738,294,29723,283,29712,292,29701,299,29686,288,29674,295,29661,292,29648,296,29635,292,29622,292,29610,295,29596,292,29585,300,29573,305,29560,304,29545,295,29533,300,29520,298,29506,295,29495,301,29483,308,29470,306,29457,307,29444,308,29430,300,29415,293,29404,299,29392,303,29379,305,29366,303,29354,309,29340,303,29330,317,29316,311,29302,306,29289,308,29275,302,29265,315,29252,312]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.398907,86.60109,0.0594,9.38],\"visualizationValues\":{\"Max\":{\"x\":35.6,\"z\":11.5},\"Min\":{\"x\":-35.15,\"z\":7.297},\"values\":[3.399,86.6,0.05939,9.384]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.398907,86.60109,0.0594,9.38],\"visualizationValues\":{\"Max\":{\"x\":35.6,\"z\":11.5},\"Min\":{\"x\":-35.15,\"z\":7.297},\"values\":[3.399,86.6,0.05939,9.384]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "f972cfcb0c38e87d",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":22874,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3917,11761],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,131,36314,143,36302,136,36289,137,36277,132,36263,138,36252,129,36237,138,36222,149,36211,139,36198,140,36185,137,36172,138,36161,129,36146,137,36136,124,36122,128,36108,136,36096,127,36084,121,36070,128,36056,134,36043,133,36031,131,36018,128,36006,124,35994,121,35980,123,35968,120,35954,125,35940,130,35929,122,35916,122,35903,119,35890,121,35877,123,35861,136,35850,128,35838,123,35825,120,35813,115,35800,115,35785,126,35772,125,35758,134,35746,128,35734,123,35721,120,35708,121,35696,118,35684,111,35671,110,35657,115,35643,121,35631,118,35619,113,35608,102,35595,103,35581,112,35566,123,35554,123,35540,125,35527,132,35515,125,35503,121,35492,109,35479,112,35466,117,35453,116,35441,109,35426,125,35415,114,35404,104,35389,120,35377,118,35267,739,35256,734,35241,752,35228,753,35192,909,35153,1087,35131,1152,35025,1782,35009,1809,34998,1806,34988,1796,34977,1792,34968,1778,34957,1777,34948,1759,34936,1761,34923,1773,34911,1775,34899,1782,34885,1796,34874,1798,34863,1796,34851,1798,34839,1806,34829,1798,34817,1800,34806,1799,34795,1797,34784,1790,34774,1781,34762,1792,34749,1805,34739,1793,34729,1781,34717,1792,34704,1798,34693,1800,34681,1802,34671,1794,34660,1793,34649,1793,34638,1787,34628,1782,34617,1780,34604,1793,34592,1795,34580,1799,34569,1801,34558,1802,34546,1808,34534,1812,34523,1807,34513,1795,34504,1781,34491,1792,34479,1798,34468,1800,34456,1803,34446,1796,34434,1797,34423,1798,34410,1810,34399,1815,34389,1800,34377,1807,34366,1802,34356,1793,34344,1806,34332,1810,34322,1801,34310,1801,34300,1795,34287,1804,34276,1805,34265,1807,34253,1810,34242,1811,34232,1798,34220,1807,34209,1803,34197,1811,34186,1812,34175,1808,34163,1817,34152,1812,34142,1804,34130,1808,34118,1817,34107,1821,34096,1823,34086,1813,34076,1800,34064,1806,34053,1804,34043,1793,34032,1794,34021,1791,34010,1787,33998,1802,33986,1811,33975,1808,33963,1819,33952,1815,33941,1817,33930,1812,33919,1812,33908,1815,33898,1796,33887,1803,33875,1814,33864,1813,33852,1817,33842,1809,33831,1811,33819,1816,33808,1815,33797,1814,33787,1804,33776,1805,33764,1810,33753,1811,33742,1811,33730,1819,33719,1818,33708,1825,33697,1821,33686,1816,33676,1810,33665,1806,33653,1815,33642,1825,33631,1817,33620,1816,33608,1825,33597,1828,33586,1824,33575,1823,33564,1825,33553,1817,33542,1824,33531,1819,33520,1818,33509,1819,33498,1820,33487,1821,33476,1821,33465,1819,33453,1828,33442,1828,33431,1840,33420,1835,33409,1829,33398,1827,33387,1830,33377,1818,33366,1809,33355,1813,33344,1820,33332,1828,33321,1827,33311,1827,33299,1831,33288,1836,33278,1821,33266,1833,33255,1832,33245,1822,33234,1824,33223,1818,33212,1807,33201,1822,33190,1828,33179,1830,33167,1831,33156,1840,33145,1834,33134,1837,33123,1836,33112,1844,33101,1837,33091,1823,33080,1817,33069,1823,33058,1825,33047,1833,33036,1833,33025,1837,33014,1832,33003,1843,32992,1843,32981,1829,32970,1836,32959,1841,32948,1834,32937,1832,32926,1833,32915,1823,32904,1833,32893,1837,32882,1841,32871,1837,32860,1839,32849,1846,32838,1848,32827,1844,32816,1837,32805,1834,32794,1829,32783,1835,32772,1824,32761,1830,32750,1836,32739,1841,32728,1838,32717,1842,32706,1852,32695,1858,32684,1852,32673,1838,32662,1843,32651,1842,32640,1844,32629,1846,32618,1850,32607,1853,32596,1848,32585,1846,32574,1849,32564,1856,32553,1849,32542,1852,32531,1850,32520,1845,32509,1849,32497,1840,32487,1841,32476,1848,32465,1853,32454,1855,32443,1848,32431,1809,32418,1703,32405,1644,32392,1580,32380,1521,32367,1463,32355,1424,32342,1373,32329,1323,32317,1269,32304,1229,32291,1179,32278,1120,32265,1080,32252,1024,32239,977,32225,913,32211,856,32199,828,32186,800,32173,759,32158,692,32135,401,32118,276,32104,242,32091,217,32079,214,32067,211,32055,215,32042,211,32029,196,32018,207,32005,203,31993,207,31981,210,31969,214,31956,204,31944,206,31932,211,31920,217,31908,217,31896,215,31883,213,31871,212,31859,218,31847,214,31835,218,31822,217,31810,218,31798,218,31786,215,31773,215,31761,220,31750,227,31737,229,31725,222,31713,222,31701,229,31688,224,31676,230,31664,232,31653,242,31640,236,31628,235,31615,224,31603,236,31591,229,31579,231,31567,234,31555,241,31543,243,31530,240,31519,246,31506,247,31494,243,31481,240,31470,243,31457,244,31446,251,31433,252,31421,245,31408,244,31396,244,31384,244,31371,236,31360,249,31348,256,31336,258,31324,256,31311,254,31299,256,31287,259,31275,262,31262,257,31249,248,31237,252,31225,257,31213,260,31200,257,31188,264,31176,264,31164,268,31151,257,31139,268,31127,266,31114,266,31103,272,31091,273,31078,274,31066,277,31054,276,31041,275,31029,275,31017,277,31004,270,30991,265,30978,262,30967,272,30955,275,30942,272,30930,272,30917,271,30906,278,30893,275,30881,277,30869,278,30856,277,30844,277,30832,278,30820,280,30807,278,30794,277,30782,279,30770,280,30758,279,30745,279,30733,281,30721,283,30708,282,30696,282,30684,283,30671,280,30659,279,30647,282,30634,280,30622,282,30609,283,30596,279,30584,283,30571,283,30559,283,30546,282,30534,281,30521,283,30509,288,30496,284,30484,289,30471,285,30458,283,30447,290,30434,286,30421,288,30408,286,30396,289,30383,286,30370,283,30359,290,30346,288,30333,289,30321,288,30308,290,30295,286,30283,292,30271,294,30259,297,30244,282,30234,294,30221,295,30209,296,30195,291,30182,287,30170,288,30158,292,30145,294,30133,293,30120,294,30108,298,30096,301,30082,294,30070,295,30058,298,30046,304,30034,303,30019,293,30007,297,29994,294,29982,297,29971,302,29958,301,29943,291,29932,296,29917,284,29906,295,29894,303,29880,294,29867,293,29854,293,29841,293,29828,293,29815,290,29804,303,29792,303,29778,302,29767,308,29753,304,29740,302,29727,304,29714,304,29700,295,29688,298,29675,299,29662,302,29650,306,29636,299,29622,295,29609,293,29599,306,29586,307,29570,293,29561,310,29548,309,29535,308,29521,301,29509,308,29494,298,29484,313,29467,293,29456,300,29444,306,29431,308,29419,310,29406,310,29393,308,29381,314,29368,312,29354,306,29340,302,29327,302,29314,303,29303,309,29289,307,29277,312,29266,317,29252,313]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[7.941637,82.05836,0.14,9.33],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":14.3},\"Min\":{\"x\":-35.15,\"z\":4.429},\"values\":[7.942,82.06,0.1395,9.332]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[7.941637,82.05836,0.14,9.33],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":14.3},\"Min\":{\"x\":-35.15,\"z\":4.429},\"values\":[7.942,82.06,0.1395,9.332]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "b3a6bb6bd25a464d",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 8",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":23285,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3937,404744],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36320,177,36307,176,36296,168,36283,167,36270,165,36259,159,36244,168,36231,165,36218,168,36204,174,36192,168,36178,175,36166,168,36153,171,36141,166,36128,163,36114,168,36102,162,36089,165,36077,161,36061,175,36049,173,36035,173,36024,163,36010,169,35996,175,35982,181,35970,179,35958,170,35946,166,35933,168,35919,172,35907,166,35893,172,35880,173,35867,176,35855,170,35841,175,35828,176,35814,184,35801,180,35787,187,35776,175,35765,168,35751,175,35740,163,35725,173,35713,167,35699,171,35687,166,35675,164,35660,175,35648,172,35636,162,35623,167,35608,174,35597,167,35584,168,35571,169,35559,168,35546,169,35533,171,35520,173,35509,165,35494,178,35481,179,35470,171,35457,168,35445,168,35432,171,35419,170,35406,174,35392,180,35379,182,35367,182,35354,179,35342,180,35328,185,35315,186,35305,174,35292,176,35279,174,35267,172,35254,176,35243,165,35230,166,35217,171,35203,178,35191,169,35177,179,35167,166,35153,176,35139,179,35127,180,35114,181,35104,165,35090,174,35078,170,35066,163,35054,157,35040,170,35026,179,35014,170,35000,182,34988,178,34975,179,34963,177,34951,173,34938,175,34926,165,34914,166,34901,170,34888,170,34875,169,34863,169,34852,159,34839,164,34826,165,34813,170,34801,171,34788,169,34776,168,34764,167,34751,166,34739,169,34724,183,34713,174,34701,171,34688,180,34675,178,34664,167,34653,158,34640,158,34626,176,34614,169,34603,160,34590,166,34577,173,34564,173,34552,168,34540,164,34527,170,34514,173,34503,167,34491,160,34477,170,34465,172,34453,170,34441,162,34428,168,34415,171,34404,164,34391,168,34379,161,34368,149,34354,167,34341,164,34329,161,34318,154,34303,171,34292,165,34280,157,34268,155,34255,158,34242,165,34229,167,34217,161,34206,150,34192,164,34180,158,34168,157,34155,162,34143,158,34131,158,34119,154,34106,163,34094,165,34082,160,34070,158,34058,155,34045,163,34033,161,34021,155,34008,162,33996,162,33984,157,33972,157,33959,161,33946,165,33934,160,33922,162,33910,156,33898,159,33885,159,33874,153,33861,159,33849,148,33837,151,33825,148,33813,144,33800,152,33788,150,33775,151,33763,157,33750,158,33738,156,33726,155,33714,150,33701,156,33689,150,33677,153,33665,153,33653,151,33640,158,33628,155,33615,156,33603,151,33591,153,33579,151,33567,138,33554,156,33542,150,33530,154,33517,154,33505,152,33493,152,33480,153,33468,150,33456,154,33444,153,33431,156,33419,151,33407,150,33395,143,33383,149,33371,150,33358,152,33346,152,33334,152,33322,152,33309,151,33297,155,33285,164,33273,157,33261,152,33248,162,33236,161,33221,261,33212,157,33185,715,33173,717,33161,727,33150,733,33137,749,33125,766,33113,809,33100,868,33087,933,33074,982,33061,1042,33049,1092,33036,1158,33024,1205,33012,1263,33000,1301,32988,1347,32976,1395,32963,1466,32952,1511,32940,1563,32928,1618,32916,1715,32904,1813,32893,1830,32882,1827,32871,1826,32860,1828,32849,1831,32838,1820,32827,1821,32816,1823,32805,1824,32794,1809,32783,1815,32772,1816,32761,1816,32750,1824,32739,1823,32728,1836,32717,1830,32706,1832,32695,1828,32684,1832,32673,1831,32662,1838,32651,1836,32640,1822,32629,1829,32618,1828,32607,1835,32596,1835,32585,1840,32574,1841,32563,1833,32552,1828,32541,1830,32530,1833,32519,1835,32508,1832,32497,1831,32486,1829,32475,1829,32464,1832,32453,1832,32443,1838,32431,1836,32421,1849,32410,1845,32399,1840,32388,1840,32376,1833,32366,1835,32354,1833,32343,1832,32332,1832,32322,1833,32311,1835,32300,1838,32289,1836,32278,1835,32267,1841,32256,1843,32245,1841,32234,1844,32223,1842,32211,1823,32200,1825,32190,1832,32179,1842,32168,1846,32157,1840,32146,1840,32135,1844,32124,1847,32113,1844,32102,1839,32091,1830,32080,1834,32069,1832,32058,1832,32047,1838,32036,1846,32025,1845,32014,1847,32003,1847,31992,1847,31981,1847,31969,1839,31959,1843,31947,1839,31936,1836,31925,1837,31914,1842,31903,1841,31893,1861,31882,1859,31871,1865,31860,1865,31849,1857,31838,1853,31827,1854,31815,1850,31804,1851,31793,1853,31782,1848,31770,1838,31760,1849,31749,1855,31738,1852,31727,1856,31716,1860,31705,1855,31694,1858,31683,1854,31671,1848,31660,1849,31649,1845,31638,1848,31627,1848,31616,1849,31606,1858,31595,1863,31584,1869,31573,1863,31562,1861,31550,1851,31539,1860,31528,1855,31517,1852,31505,1847,31494,1849,31484,1857,31474,1867,31463,1870,31452,1876,31441,1875,31430,1872,31419,1873,31407,1868,31396,1861,31385,1865,31373,1859,31362,1852,31350,1843,31340,1860,31330,1867,31318,1867,31307,1861,31297,1877,31286,1879,31274,1870,31263,1873,31251,1867,31239,1863,31228,1862,31217,1859,31205,1854,31194,1855,31183,1861,31173,1871,31163,1881,31151,1877,31140,1881,31129,1875,31117,1872,31106,1871,31094,1866,31082,1862,31071,1865,31060,1867,31050,1874,31039,1878,31029,1887,31019,1894,31006,1883,30995,1888,30984,1888,30972,1880,30961,1879,30948,1869,30935,1849,30924,1856,30915,1871,30904,1878,30894,1885,30883,1885,30872,1888,30860,1882,30849,1880,30837,1879,30827,1885,30815,1882,30804,1878,30792,1874,30781,1876,30771,1884,30760,1888,30749,1892,30737,1886,30727,1891,30714,1882,30704,1889,30693,1890,30681,1882,30667,1866,30655,1863,30644,1863,30634,1871,30623,1877,30613,1888,30603,1895,30592,1896,30579,1884,30568,1891,30557,1892,30544,1884,30533,1887,30521,1883,30511,1889,30498,1885,30487,1886,30479,1906,30467,1901,30454,1894,30443,1894,30433,1907,30420,1898,30409,1899,30397,1894,30386,1897,30373,1888,30360,1877,30349,1879,30337,1878,30324,1866,30301,1796,30206,1288,30180,1200,30145,1061,30112,935,30088,866,30075,859,30061,848,29948,246,29937,252,29925,256,29911,251,29898,251,29886,257,29874,258,29861,262,29847,254,29834,254,29822,257,29810,260,29796,255,29782,253,29771,259,29758,262,29745,259,29733,264,29719,261,29708,271,29695,267,29682,268,29670,272,29657,274,29643,268,29631,272,29619,275,29606,276,29592,274,29579,270,29567,273,29555,279,29542,278,29529,280,29515,273,29505,289,29492,288,29478,281,29465,282,29453,287,29441,289,29428,289,29414,284,29400,282,29387,282,29374,281,29362,284,29349,282,29336,282,29323,285,29311,285,29300,294,29286,293,29273,291,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-12.92714,-77.07286,-0.23,9.35],\"visualizationValues\":{\"Max\":{\"x\":35.54,\"z\":1.192},\"Min\":{\"x\":-35.18,\"z\":17.42},\"values\":[-12.93,-77.07,-0.2295,9.35]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-12.92714,-77.07286,-0.23,9.35],\"visualizationValues\":{\"Max\":{\"x\":35.54,\"z\":1.192},\"Min\":{\"x\":-35.18,\"z\":17.42},\"values\":[-12.93,-77.07,-0.2295,9.35]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "bc724a7ed96a1592",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grande 9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 9",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":24430,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3994,594651],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,130,36317,125,36303,129,36292,122,36280,118,36265,129,36249,141,36236,143,36225,131,36212,130,36201,123,36187,128,36173,133,36161,127,36148,127,36134,135,36122,127,36111,117,36097,122,36083,127,36069,136,36056,131,36042,139,36030,136,36018,129,36007,121,35992,129,35979,130,35966,131,35951,139,35940,129,35926,133,35914,129,35902,126,35886,139,35876,128,35864,122,35852,114,35837,124,35822,139,35811,129,35799,122,35784,130,35773,120,35760,120,35745,134,35734,121,35719,132,35706,134,35694,128,35682,124,35669,123,35655,128,35641,134,35629,131,35615,137,35603,128,35591,127,35578,130,35564,135,35552,132,35539,134,35526,135,35513,137,35503,118,35490,125,35477,127,35465,121,35452,122,35438,132,35423,147,35412,137,35400,129,35388,125,35375,127,35361,134,35349,131,35335,139,35324,131,35310,136,35298,136,35288,116,35273,134,35260,132,35247,134,35235,133,35223,128,35212,115,35197,129,35186,123,35173,126,35159,131,35147,129,35133,139,35121,133,35109,129,35096,126,35083,130,35071,127,35058,126,35045,130,35032,132,35019,135,35007,134,34994,134,34981,137,34969,131,34955,138,34943,138,34930,142,34916,148,34904,141,34892,141,34879,143,34866,145,34854,139,34842,138,34831,128,34817,136,34804,144,34792,138,34781,127,34767,138,34755,141,34742,140,34730,141,34718,135,34704,144,34692,142,34681,128,34668,133,34656,136,34642,142,34630,144,34617,142,34605,145,34592,145,34579,151,34568,136,34555,142,34544,134,34530,142,34519,135,34507,132,34494,131,34480,143,34468,144,34455,145,34443,142,34430,146,34418,144,34405,147,34394,140,34381,138,34368,146,34356,141,34344,138,34331,142,34319,140,34306,149,34294,146,34282,141,34268,151,34256,146,34247,117,34177,757,34164,766,34151,781,34139,787,34124,819,34104,920,34083,1034,34067,1086,34049,1173,34032,1239,34014,1322,33997,1393,33978,1483,33957,1609,33937,1720,33920,1799,33908,1813,33897,1810,33886,1807,33875,1813,33864,1808,33853,1812,33842,1813,33831,1809,33819,1825,33808,1823,33797,1818,33786,1823,33775,1822,33763,1827,33752,1832,33742,1819,33731,1815,33720,1810,33709,1815,33697,1821,33686,1822,33675,1820,33665,1810,33653,1824,33642,1813,33630,1832,33619,1832,33608,1831,33597,1822,33587,1811,33575,1819,33564,1820,33553,1822,33542,1821,33531,1825,33520,1817,33509,1811,33498,1825,33487,1825,33476,1811,33465,1824,33454,1825,33443,1821,33432,1822,33421,1816,33410,1814,33399,1813,33388,1815,33376,1830,33365,1840,33354,1836,33343,1833,33332,1834,33321,1836,33311,1825,33300,1819,33289,1812,33278,1816,33267,1825,33255,1829,33245,1828,33233,1830,33222,1830,33212,1827,33201,1827,33190,1827,33178,1831,33168,1826,33156,1833,33145,1838,33135,1828,33124,1824,33113,1829,33101,1837,33090,1837,33080,1826,33069,1836,33058,1836,33047,1835,33036,1822,33025,1835,33014,1836,33003,1839,32992,1832,32981,1832,32970,1840,32959,1837,32948,1834,32937,1831,32926,1841,32915,1845,32904,1836,32893,1842,32882,1831,32871,1832,32860,1834,32849,1830,32838,1831,32827,1836,32816,1845,32805,1842,32794,1848,32783,1846,32772,1845,32761,1846,32750,1842,32739,1839,32728,1839,32717,1834,32706,1831,32695,1831,32684,1838,32673,1850,32662,1845,32651,1846,32640,1847,32629,1841,32618,1839,32607,1838,32596,1840,32585,1841,32574,1842,32563,1844,32552,1845,32542,1847,32530,1844,32520,1848,32509,1847,32498,1849,32487,1848,32476,1849,32465,1843,32454,1846,32443,1839,32432,1840,32421,1836,32409,1833,32399,1846,32388,1846,32377,1851,32366,1857,32355,1852,32344,1843,32333,1851,32322,1845,32311,1840,32300,1843,32289,1842,32278,1841,32267,1838,32256,1840,32246,1861,32235,1859,32224,1866,32213,1864,32202,1859,32191,1857,32179,1854,32168,1846,32157,1842,32146,1843,32135,1847,32124,1840,32114,1854,32103,1856,32092,1862,32081,1865,32070,1869,32059,1861,32048,1859,32036,1851,32025,1845,32014,1843,32003,1837,31992,1843,31981,1846,31970,1853,31959,1853,31948,1854,31937,1853,31926,1858,31915,1857,31904,1854,31893,1853,31882,1857,31870,1848,31859,1847,31848,1849,31837,1850,31827,1854,31816,1865,31805,1865,31795,1874,31784,1880,31772,1869,31761,1871,31750,1860,31739,1872,31729,1877,31717,1873,31706,1868,31695,1864,31683,1856,31672,1864,31661,1866,31651,1873,31640,1870,31628,1866,31618,1870,31607,1873,31595,1861,31583,1858,31573,1863,31562,1865,31551,1872,31540,1866,31529,1873,31518,1873,31507,1874,31497,1881,31486,1877,31474,1875,31463,1872,31452,1869,31441,1877,31430,1870,31418,1869,31408,1871,31397,1876,31386,1874,31375,1874,31365,1885,31354,1887,31342,1880,31331,1879,31318,1867,31272,1504,31253,1427,31235,1357,31215,1271,31196,1204,31178,1142,31158,1063,31137,964,31116,874,31100,839,31086,819,31073,810,30999,228,30987,231,30974,224,30962,224,30949,222,30937,223,30925,226,30912,227,30900,228,30887,226,30875,224,30863,228,30851,229,30838,229,30826,227,30813,225,30801,227,30790,237,30777,236,30765,235,30752,232,30738,222,30727,232,30714,229,30703,237,30690,230,30677,227,30664,224,30653,231,30640,230,30627,223,30615,231,30603,239,30590,231,30578,238,30565,236,30554,246,30540,239,30528,240,30515,240,30503,241,30490,242,30478,245,30466,247,30453,242,30440,239,30427,239,30415,243,30403,251,30390,246,30377,244,30365,249,30353,250,30340,249,30327,245,30315,249,30302,249,30290,248,30277,249,30265,254,30252,251,30240,255,30228,260,30215,258,30204,263,30190,254,30178,263,30164,251,30152,254,30139,252,30126,253,30114,257,30101,252,30089,259,30078,264,30063,254,30052,264,30041,271,30028,268,30015,269,30002,266,29989,261,29977,263,29964,264,29952,266,29939,263,29926,261,29913,264,29901,264,29887,262,29875,265,29862,266,29852,278,29838,278,29824,270,29810,264,29796,259,29786,275,29773,270,29761,277,29746,266,29734,271,29722,278,29710,282,29696,274,29684,280,29670,274,29657,273,29644,273,29631,270,29619,279,29606,277,29594,282,29580,278,29568,282,29558,294,29545,294,29531,290,29516,280,29504,286,29493,293,29481,297,29464,278,29454,292,29441,290,29428,291,29416,296,29404,300,29392,304,29379,305,29365,298,29350,286,29339,297,29324,289,29312,291,29301,300,29286,292,29274,296,29263,304,29249,300]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.949321,-87.05068,-0.0515,9.24],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":7.402},\"Min\":{\"x\":-35.18,\"z\":11.05},\"values\":[-2.949,-87.05,-0.05152,9.237]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.949321,-87.05068,-0.0515,9.24],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":7.402},\"Min\":{\"x\":-35.18,\"z\":11.05},\"values\":[-2.949,-87.05,-0.05152,9.237]}}]}]}",
        "payloadType": "json",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "8a3e176fb1de8b2b"
            ]
        ]
    },
    {
        "id": "489d1cdef715df67",
        "type": "link out",
        "z": "c4f35bb0ae2de5ca",
        "name": "profilo medio",
        "mode": "link",
        "links": [
            "3aa5e7b308f3148f"
        ],
        "x": 715,
        "y": 140,
        "wires": []
    },
    {
        "id": "04aa89e3ad52661e",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":11857,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3360,121352],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36322,167,36307,173,36295,170,36281,178,36267,179,36256,171,36241,181,36229,176,36217,174,36202,185,36190,176,36175,189,36165,172,36151,180,36138,181,36126,175,36113,174,36101,171,36087,173,36074,177,36061,175,36049,172,36035,177,36020,185,36009,178,35997,172,35982,184,35968,186,35957,180,35943,185,35929,188,35916,187,35906,174,35890,188,35877,188,35866,180,35852,183,35841,175,35827,179,35813,187,35800,189,35787,188,35775,185,35761,188,35748,188,35736,186,35723,182,35712,176,35697,185,35684,183,35671,186,35658,184,35644,191,35631,192,35619,189,35606,188,35595,177,35581,186,35569,181,35555,192,35543,188,35528,199,35518,183,35504,190,35493,182,35478,195,35466,194,35452,199,35441,194,35428,192,35417,186,35403,189,35392,183,35377,197,35363,204,35352,192,35342,176,35328,190,35314,194,35301,195,35290,187,35278,180,35264,190,35252,185,35239,191,35225,198,35212,200,35199,202,35188,193,35175,193,35163,194,35150,196,35136,205,35125,195,35111,203,35100,192,35088,188,35075,191,35062,188,35049,191,35036,192,35023,195,35011,193,34999,191,34985,201,34973,192,34960,198,34946,207,34934,204,34921,204,34909,205,34896,204,34884,200,34871,201,34859,203,34846,208,34833,208,34820,212,34809,205,34797,199,34785,193,34772,202,34758,212,34746,211,34735,203,34723,197,34710,205,34697,204,34685,199,34672,207,34659,209,34647,206,34634,214,34622,215,34611,198,34598,205,34586,199,34573,201,34560,207,34549,198,34537,196,34524,204,34510,212,34499,201,34487,201,34474,199,34462,198,34449,206,34436,213,34424,203,34412,207,34400,198,34387,204,34375,203,34363,202,34349,213,34336,217,34325,207,34312,214,34300,204,34287,213,34276,203,34264,200,34251,201,34238,207,34226,209,34213,214,34201,210,34188,214,34176,215,34163,213,34151,210,34140,203,34127,212,34115,208,34102,214,34091,201,34078,205,34066,202,34054,202,34041,205,34028,215,34016,218,34004,212,33992,209,33980,205,33968,206,33955,213,33943,214,33931,214,33918,215,33906,215,33894,217,33882,208,33869,215,33857,217,33845,216,33833,216,33820,213,33808,209,33796,211,33784,215,33771,216,33759,223,33747,221,33734,218,33722,224,33710,223,33698,218,33686,215,33673,219,33661,223,33649,217,33637,217,33624,222,33612,219,33600,216,33588,221,33575,226,33563,226,33551,220,33538,226,33526,222,33514,218,33502,217,33490,220,33477,226,33465,221,33453,218,33441,228,33428,230,33416,224,33404,226,33392,232,33380,235,33368,225,33356,217,33343,226,33331,230,33319,225,33307,229,33295,235,33283,228,33270,240,33258,233,33246,244,33234,242,33221,240,33209,236,33197,228,33185,237,33173,234,33161,224,33149,229,33136,240,33125,227,33112,228,33100,227,33088,231,33076,237,33064,239,33052,227,33039,228,33027,247,33015,266,33003,256,32991,249,32974,646,32962,689,32949,725,32937,756,32925,798,32913,834,32901,868,32889,901,32877,952,32865,974,32853,1016,32842,1037,32830,1072,32818,1107,32807,1147,32795,1185,32784,1213,32772,1241,32761,1281,32750,1319,32738,1354,32727,1380,32716,1381,32704,1383,32693,1382,32682,1386,32671,1388,32659,1391,32648,1394,32637,1393,32625,1383,32614,1391,32603,1391,32591,1395,32580,1384,32569,1374,32557,1371,32546,1385,32535,1385,32523,1380,32512,1383,32501,1388,32489,1380,32478,1380,32467,1385,32456,1385,32444,1389,32433,1396,32422,1393,32411,1398,32399,1400,32388,1397,32377,1395,32365,1390,32354,1383,32343,1391,32331,1390,32320,1390,32309,1387,32297,1389,32286,1388,32275,1397,32264,1400,32252,1391,32241,1389,32230,1395,32219,1399,32207,1398,32196,1394,32185,1399,32173,1400,32162,1399,32150,1393,32139,1401,32128,1402,32117,1398,32105,1395,32094,1398,32083,1402,32071,1397,32060,1400,32049,1397,32038,1402,32026,1404,32015,1398,32003,1401,31992,1394,31980,1388,31969,1397,31958,1400,31946,1397,31935,1402,31924,1398,31913,1409,31902,1410,31890,1403,31878,1403,31867,1408,31856,1411,31845,1410,31834,1415,31822,1408,31810,1402,31799,1405,31788,1406,31776,1404,31764,1403,31753,1407,31742,1407,31731,1405,31720,1414,31707,1398,31696,1406,31685,1409,31674,1408,31663,1412,31652,1424,31641,1427,31629,1420,31617,1412,31606,1420,31595,1423,31583,1409,31571,1403,31558,1381,31544,1348,31529,1307,31514,1261,31499,1220,31484,1176,31468,1121,31454,1086,31438,1038,31424,1004,31408,957,31392,909,31377,869,31362,830,31344,762,31330,732,31315,706,31299,662,31284,625,31245,340,31229,306,31215,288,31202,280,31190,277,31178,284,31166,284,31153,276,31141,283,31128,281,31116,277,31104,281,31092,284,31080,288,31067,285,31055,284,31041,275,31030,283,31018,286,31005,281,30993,281,30980,283,30968,285,30956,282,30943,280,30931,280,30918,277,30906,282,30894,283,30883,292,30870,286,30858,289,30846,292,30833,291,30821,294,30808,288,30796,287,30783,287,30771,285,30759,287,30746,287,30734,284,30721,281,30710,293,30698,295,30685,291,30673,291,30660,290,30648,294,30635,289,30623,290,30611,293,30598,292,30586,299,30573,295,30560,288,30547,291,30536,301,30523,294,30510,297,30497,293,30485,291,30472,293,30460,298,30447,291,30434,291,30422,296,30410,297,30397,293,30385,298,30373,302,30361,306,30347,293,30336,308,30323,305,30310,298,30297,298,30285,299,30273,302,30259,299,30247,297,30234,297,30222,298,30209,297,30197,300,30184,299,30171,294,30159,300,30147,304,30135,306,30122,304,30109,304,30096,302,30084,301,30071,302,30059,303,30046,304,30034,303,30021,303,30008,302,29996,301,29983,300,29971,305,29959,307,29945,301,29934,307,29921,306,29909,309,29896,309,29883,309,29869,304,29857,310,29844,305,29831,309,29819,310,29805,309,29791,302,29779,304,29766,305,29754,308,29741,308,29729,311,29716,314,29703,311,29689,308,29676,304,29663,306,29651,308,29637,305,29624,301,29610,300,29599,307,29586,305,29572,303,29559,301,29547,304,29534,305,29523,316,29508,303,29496,307,29483,307,29469,302,29457,304,29444,304,29432,310,29419,309,29406,309,29394,312,29380,307,29366,304,29353,303,29343,315,29328,308,29317,318,29304,318,29291,317,29278,315,29263,307,29253,321]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 60,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "1d010f5eea437f5a",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":13114,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3423,534090],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36325,150,36311,154,36297,163,36283,166,36272,159,36258,164,36244,167,36234,152,36221,151,36206,161,36195,155,36180,163,36166,167,36153,168,36142,159,36129,158,36116,157,36102,163,36089,165,36076,162,36065,153,36050,167,36037,165,36024,165,36010,174,35997,169,35988,153,35973,161,35961,154,35947,162,35935,158,35920,170,35908,160,35895,163,35882,163,35869,161,35856,165,35845,156,35831,161,35818,162,35805,162,35790,169,35778,163,35765,168,35755,151,35741,156,35726,165,35714,165,35700,166,35687,170,35674,170,35662,165,35649,165,35638,151,35625,155,35611,157,35599,157,35585,165,35571,169,35558,173,35546,166,35533,169,35519,179,35508,171,35495,170,35483,165,35470,167,35457,169,35446,160,35433,162,35420,163,35408,160,35394,171,35382,163,35370,160,35357,165,35342,175,35330,171,35317,175,35306,164,35294,162,35281,160,35268,167,35257,153,35245,153,35231,160,35218,164,35205,164,35191,174,35178,173,35167,164,35152,178,35141,167,35127,180,35113,184,35102,175,35090,172,35079,160,35066,161,35053,167,35040,169,35028,161,35015,163,35001,173,34990,164,34976,174,34963,175,34951,172,34938,174,34925,175,34912,177,34900,174,34887,176,34875,176,34862,177,34849,179,34839,165,34825,178,34812,179,34800,172,34787,183,34774,182,34763,174,34750,177,34737,184,34726,173,34714,163,34701,175,34688,178,34676,175,34663,175,34650,181,34638,179,34625,180,34614,176,34601,180,34589,171,34577,171,34564,173,34552,171,34538,185,34526,182,34513,184,34501,184,34488,183,34477,171,34465,172,34451,182,34438,187,34427,182,34414,182,34401,184,34389,184,34378,175,34364,183,34352,179,34340,177,34328,178,34316,173,34303,180,34290,180,34278,174,34266,178,34253,178,34241,173,34228,179,34216,179,34204,175,34191,179,34179,176,34166,178,34153,192,34141,183,34129,189,34116,188,34104,189,34092,191,34080,187,34066,200,34055,193,34043,189,34030,197,34018,191,34006,187,33993,196,33981,190,33969,195,33957,186,33945,180,33933,186,33920,196,33908,189,33895,195,33883,194,33871,189,33858,193,33846,190,33834,191,33822,190,33809,197,33797,194,33785,198,33773,193,33760,200,33748,204,33736,192,33724,196,33711,194,33699,197,33687,198,33674,205,33662,210,33649,210,33637,214,33625,213,33613,205,33601,198,33589,195,33576,199,33564,201,33552,203,33539,205,33527,205,33515,199,33503,202,33491,198,33478,200,33466,196,33454,204,33442,202,33429,203,33417,203,33405,203,33393,208,33381,204,33369,200,33357,197,33344,196,33332,205,33320,206,33307,217,33295,220,33283,227,33270,244,33259,217,33246,228,33233,268,33211,635,33198,698,33185,745,33172,790,33159,827,33147,861,33134,906,33121,948,33109,971,33097,1012,33084,1041,33072,1072,33060,1126,33048,1157,33036,1185,33023,1235,33012,1268,33000,1302,32988,1296,32977,1295,32966,1289,32954,1299,32943,1295,32932,1289,32920,1296,32909,1295,32897,1300,32886,1296,32875,1284,32863,1292,32852,1290,32841,1300,32829,1297,32818,1298,32806,1297,32795,1293,32784,1294,32772,1300,32761,1298,32750,1302,32738,1297,32727,1301,32715,1297,32704,1308,32693,1305,32681,1298,32670,1299,32659,1301,32647,1287,32636,1298,32624,1299,32613,1304,32602,1301,32590,1294,32579,1295,32568,1297,32556,1307,32545,1312,32534,1299,32522,1302,32511,1307,32500,1317,32488,1316,32477,1307,32465,1308,32454,1305,32443,1311,32432,1319,32420,1313,32409,1310,32398,1322,32386,1313,32375,1313,32363,1307,32352,1318,32341,1315,32329,1309,32318,1323,32307,1316,32295,1320,32284,1321,32273,1328,32261,1321,32250,1317,32238,1309,32227,1313,32216,1314,32204,1314,32193,1321,32182,1315,32170,1308,32159,1325,32147,1307,32136,1318,32125,1327,32114,1330,32103,1331,32091,1327,32080,1329,32069,1333,32057,1329,32046,1328,32034,1317,32022,1322,32012,1332,32000,1331,31988,1326,31976,1313,31966,1328,31954,1327,31943,1333,31931,1330,31920,1326,31909,1339,31897,1330,31886,1334,31874,1329,31862,1313,31851,1328,31839,1311,31826,1280,31813,1262,31800,1231,31785,1176,31772,1159,31758,1118,31743,1074,31729,1025,31716,1008,31701,957,31687,923,31672,874,31657,827,31643,797,31629,765,31613,713,31598,664,31562,340,31549,323,31537,335,31523,302,31509,286,31497,283,31485,285,31472,281,31460,275,31448,281,31435,266,31423,271,31411,277,31400,288,31387,281,31375,286,31364,291,31350,279,31338,280,31326,285,31314,290,31302,290,31289,286,31277,289,31264,281,31251,278,31240,286,31228,294,31215,282,31202,280,31191,289,31178,285,31166,285,31153,282,31141,287,31128,280,31117,292,31104,288,31092,291,31080,289,31067,281,31055,291,31042,281,31030,287,31019,299,31007,301,30994,298,30981,290,30969,290,30956,289,30945,298,30932,295,30920,298,30907,293,30895,296,30883,299,30871,295,30859,300,30846,297,30834,300,30822,297,30809,295,30796,289,30785,299,30772,294,30759,289,30747,296,30735,293,30722,294,30710,292,30698,294,30685,291,30673,291,30662,301,30649,296,30636,295,30623,292,30611,299,30598,295,30587,303,30573,296,30561,297,30549,306,30536,300,30524,304,30511,301,30498,298,30487,308,30474,305,30461,302,30448,299,30436,301,30423,302,30412,309,30399,308,30385,301,30373,303,30359,294,30347,298,30335,300,30323,307,30310,301,30297,301,30285,301,30273,303,30260,304,30247,302,30236,311,30223,310,30211,309,30197,302,30185,304,30174,313,30161,310,30149,314,30134,302,30122,305,30110,306,30097,307,30084,306,30072,308,30060,308,30048,312,30036,315,30023,315,30009,304,29996,306,29984,308,29972,310,29960,312,29946,308,29934,307,29920,300,29908,303,29895,306,29882,306,29870,312,29858,312,29845,312,29833,316,29819,314,29806,309,29794,315,29781,318,29769,321,29756,322,29744,322,29731,322,29717,316,29704,317,29691,317,29678,318,29665,317,29653,319,29639,313,29627,318,29614,317,29602,324,29588,319,29576,323,29563,320,29550,322,29538,327,29525,325,29513,327,29500,328,29486,322,29473,323,29462,330,29448,324,29435,327,29421,320,29410,327,29396,324,29383,324,29371,327,29359,331,29345,325,29332,324,29319,325,29307,328,29293,326,29282,332,29270,336,29255,328]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.769099,-87.2309,-0.0484,4.73],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":3.01},\"Min\":{\"x\":-35.12,\"z\":6.43},\"values\":[-2.769,-87.23,-0.04837,4.731]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.769099,-87.2309,-0.0484,4.73],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":3.01},\"Min\":{\"x\":-35.12,\"z\":6.43},\"values\":[-2.769,-87.23,-0.04837,4.731]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 100,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "e863488d86c4808a",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":13455,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3441,43885],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36324,157,36311,155,36300,146,36284,162,36270,166,36258,160,36246,155,36233,159,36218,166,36206,165,36192,169,36181,160,36170,149,36158,145,36143,151,36131,147,36117,153,36102,162,36089,165,36076,164,36063,163,36050,165,36037,165,36026,154,36011,164,36000,156,35989,146,35973,162,35962,153,35949,151,35936,150,35922,155,35911,144,35897,153,35883,155,35871,150,35857,157,35846,146,35833,150,35817,166,35804,164,35790,171,35778,168,35765,165,35752,166,35741,158,35727,159,35713,166,35701,163,35688,160,35675,163,35662,161,35649,165,35635,168,35623,167,35610,163,35598,160,35586,159,35572,163,35560,159,35548,158,35533,170,35520,170,35510,159,35496,163,35483,169,35471,159,35457,172,35446,161,35432,166,35420,167,35407,165,35394,169,35383,156,35370,161,35355,174,35344,165,35331,164,35319,161,35306,165,35295,157,35282,154,35268,162,35256,163,35242,169,35230,164,35217,165,35205,165,35191,170,35180,158,35168,155,35153,172,35142,164,35130,156,35116,169,35103,165,35093,153,35079,162,35067,152,35054,160,35040,166,35027,170,35014,170,35002,166,34991,153,34978,157,34964,165,34951,168,34938,171,34926,172,34914,164,34900,176,34887,174,34875,170,34863,170,34850,171,34838,169,34825,171,34813,173,34800,176,34787,177,34776,171,34764,162,34751,169,34738,175,34726,171,34713,174,34701,168,34688,178,34675,180,34663,178,34651,178,34638,178,34625,181,34614,174,34601,176,34588,179,34576,175,34564,176,34551,179,34539,176,34526,178,34513,183,34502,177,34490,170,34477,175,34464,179,34451,188,34439,182,34427,174,34414,179,34402,183,34389,183,34377,180,34364,186,34352,184,34340,175,34327,180,34315,179,34302,183,34291,172,34278,182,34265,181,34253,183,34241,177,34228,176,34216,181,34203,185,34190,195,34178,184,34166,181,34154,184,34141,186,34129,180,34118,169,34105,182,34093,178,34080,184,34068,181,34055,192,34043,190,34031,182,34018,185,34006,185,33994,184,33981,190,33969,192,33957,192,33944,198,33932,200,33919,203,33907,197,33894,207,33882,203,33870,204,33858,203,33846,194,33834,196,33822,191,33809,194,33797,194,33785,192,33772,199,33760,207,33748,201,33736,199,33724,194,33711,199,33698,211,33686,209,33674,204,33662,202,33649,207,33637,205,33625,202,33612,215,33599,243,33587,235,33573,270,33560,280,33532,634,33517,695,33503,727,33489,778,33476,818,33462,859,33449,904,33435,940,33422,979,33409,1025,33396,1059,33382,1107,33370,1142,33356,1191,33344,1222,33331,1259,33319,1287,33307,1285,33296,1286,33284,1294,33273,1277,33262,1281,33251,1276,33239,1271,33228,1275,33217,1266,33205,1285,33193,1283,33182,1286,33171,1279,33159,1282,33148,1286,33137,1280,33125,1277,33114,1281,33103,1275,33091,1296,33080,1279,33068,1282,33057,1292,33045,1293,33034,1293,33022,1301,33011,1300,33000,1296,32988,1302,32977,1298,32966,1300,32954,1298,32943,1291,32931,1298,32920,1300,32909,1294,32897,1300,32886,1291,32875,1293,32863,1303,32852,1301,32841,1286,32829,1291,32818,1291,32806,1277,32795,1292,32784,1295,32772,1288,32761,1283,32750,1299,32738,1294,32727,1297,32715,1298,32704,1288,32693,1296,32681,1298,32670,1299,32659,1297,32647,1295,32636,1298,32624,1295,32613,1305,32602,1305,32590,1310,32579,1305,32568,1301,32556,1304,32545,1313,32534,1319,32522,1316,32511,1310,32499,1301,32488,1308,32477,1312,32466,1314,32454,1312,32443,1319,32431,1311,32420,1303,32409,1319,32397,1312,32386,1304,32375,1313,32363,1317,32352,1320,32341,1318,32329,1317,32318,1321,32307,1318,32295,1319,32284,1323,32273,1319,32261,1313,32250,1316,32239,1326,32227,1316,32215,1312,32204,1312,32193,1314,32182,1321,32170,1315,32158,1295,32146,1267,32133,1241,32120,1204,32107,1169,32094,1134,32081,1094,32069,1071,32055,1036,32042,992,32029,958,32015,917,32002,882,31988,854,31975,820,31960,761,31947,726,31933,694,31919,640,31905,601,31881,397,31863,285,31854,352,31840,307,31825,263,31812,256,31800,255,31788,251,31776,256,31763,250,31751,250,31740,264,31727,261,31715,265,31703,263,31690,260,31678,262,31666,262,31654,258,31642,261,31630,261,31617,256,31605,261,31593,266,31581,268,31569,266,31557,264,31545,266,31533,271,31520,271,31508,271,31496,269,31483,263,31471,267,31459,265,31447,269,31435,270,31422,265,31410,261,31398,269,31386,271,31374,265,31362,272,31349,266,31336,263,31324,265,31312,270,31299,263,31287,259,31275,263,31263,268,31250,263,31238,264,31226,273,31214,270,31201,271,31189,272,31177,275,31165,281,31152,274,31140,275,31128,273,31115,268,31103,272,31090,272,31079,278,31065,266,31053,268,31041,274,31029,277,31017,277,31005,278,30992,273,30979,273,30968,278,30956,282,30943,283,30931,280,30918,277,30906,280,30895,289,30881,280,30869,280,30856,278,30844,281,30832,279,30819,274,30807,278,30795,283,30783,281,30770,279,30758,282,30746,283,30734,288,30722,289,30709,286,30696,282,30684,285,30672,285,30660,285,30647,287,30636,292,30622,288,30610,287,30597,285,30584,282,30572,288,30559,282,30547,284,30534,283,30521,284,30509,284,30497,291,30485,291,30472,290,30459,291,30447,291,30434,292,30420,282,30410,295,30397,297,30384,290,30371,288,30359,289,30345,285,30334,293,30321,293,30310,298,30297,296,30285,300,30272,302,30260,300,30246,293,30232,286,30222,298,30209,300,30196,296,30183,295,30170,289,30157,290,30146,295,30134,300,30121,297,30109,303,30096,299,30083,298,30071,304,30059,303,30046,304,30034,306,30021,303,30008,298,29996,302,29984,310,29972,311,29958,305,29946,303,29933,302,29920,302,29908,306,29896,309,29883,311,29870,311,29857,310,29845,312,29832,314,29817,302,29806,312,29793,313,29781,318,29767,311,29755,312,29741,310,29729,311,29716,311,29704,315,29691,314,29678,318,29665,315,29651,311,29638,308,29626,313,29614,319,29601,320,29587,314,29574,313,29563,322,29550,319,29537,321,29525,322,29512,322,29500,329,29486,322,29474,327,29461,328,29447,323,29435,327,29423,327,29409,323,29396,324,29382,317,29372,332,29357,320,29344,322,29332,326,29319,326,29309,337,29295,332,29280,323,29270,339,29256,333]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.666251,-88.33375,-0.0291,4.69],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":3.659},\"Min\":{\"x\":-35.1,\"z\":5.714},\"values\":[-1.666,-88.33,-0.02909,4.693]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.666251,-88.33375,-0.0291,4.69],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":3.659},\"Min\":{\"x\":-35.1,\"z\":5.714},\"values\":[-1.666,-88.33,-0.02909,4.693]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 140,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "b37819412a02d5cd",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":14245,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3480,741578],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36323,161,36315,138,36299,152,36285,158,36271,161,36255,176,36243,172,36230,172,36217,172,36207,158,36191,174,36180,165,36166,169,36153,171,36141,165,36129,158,36113,173,36104,152,36089,166,36077,161,36061,176,36050,165,36036,173,36023,173,36010,172,35997,173,35983,175,35971,174,35958,174,35945,172,35933,168,35919,171,35907,170,35894,168,35882,164,35867,176,35854,174,35840,181,35827,183,35813,186,35803,171,35788,180,35775,181,35761,190,35751,173,35738,172,35726,169,35712,175,35699,176,35687,170,35675,166,35661,171,35647,174,35634,174,35620,182,35607,184,35596,171,35583,172,35572,166,35558,175,35545,173,35533,170,35518,183,35507,176,35495,171,35480,183,35467,185,35454,186,35444,173,35431,177,35417,182,35406,176,35391,189,35380,177,35368,175,35356,169,35343,171,35330,177,35315,188,35304,181,35290,187,35277,187,35267,173,35253,178,35241,178,35229,173,35216,173,35202,184,35189,183,35177,180,35165,180,35151,188,35138,188,35127,177,35114,180,35100,187,35088,186,35078,170,35063,181,35049,191,35037,186,35025,185,35012,185,35000,184,34987,185,34974,187,34961,190,34949,185,34936,184,34924,183,34911,184,34898,189,34886,181,34874,183,34861,182,34849,185,34835,195,34823,193,34809,202,34798,194,34786,188,34773,190,34761,187,34749,183,34737,184,34724,187,34712,183,34698,193,34686,194,34674,192,34661,197,34649,189,34636,197,34625,187,34612,192,34600,185,34588,185,34576,181,34563,184,34549,194,34537,190,34525,187,34512,192,34501,183,34488,188,34475,190,34463,187,34451,187,34438,189,34425,194,34413,190,34401,190,34389,187,34376,189,34363,198,34351,189,34339,184,34326,190,34314,186,34302,182,34289,193,34276,194,34264,194,34251,200,34239,197,34226,207,34214,196,34202,191,34190,186,34177,195,34165,196,34153,195,34140,198,34128,196,34116,191,34103,200,34092,189,34079,202,34067,195,34055,194,34043,182,34030,194,34019,182,34006,189,33993,199,33981,198,33967,213,33955,220,33943,213,33927,262,33886,683,33872,719,33859,738,33844,784,33828,835,33814,871,33800,909,33786,948,33772,977,33759,1005,33743,1073,33729,1105,33715,1152,33701,1203,33686,1260,33672,1296,33659,1329,33646,1345,33634,1355,33623,1360,33612,1355,33600,1355,33589,1354,33577,1355,33566,1361,33555,1350,33543,1364,33531,1374,33520,1372,33509,1364,33498,1354,33486,1363,33474,1372,33463,1372,33452,1358,33440,1370,33429,1371,33417,1370,33406,1368,33395,1365,33383,1374,33372,1375,33361,1369,33350,1363,33339,1362,33327,1374,33315,1380,33304,1378,33293,1373,33282,1360,33271,1363,33259,1376,33248,1368,33236,1372,33225,1359,33214,1374,33202,1373,33191,1373,33180,1374,33168,1380,33157,1376,33146,1374,33134,1376,33123,1379,33112,1380,33100,1382,33089,1373,33078,1371,33066,1372,33055,1380,33044,1384,33032,1383,33021,1370,33010,1380,32999,1373,32987,1377,32976,1370,32965,1381,32953,1376,32942,1377,32931,1382,32919,1373,32908,1365,32897,1371,32885,1375,32874,1384,32863,1384,32851,1395,32840,1397,32829,1387,32818,1381,32806,1385,32795,1387,32784,1389,32772,1380,32761,1385,32750,1380,32738,1383,32727,1383,32716,1376,32704,1383,32693,1382,32682,1378,32670,1384,32659,1388,32648,1389,32637,1378,32625,1372,32614,1369,32603,1376,32591,1373,32580,1375,32569,1376,32557,1375,32546,1374,32535,1379,32523,1382,32512,1379,32501,1378,32490,1389,32478,1375,32466,1349,32454,1318,32442,1283,32430,1251,32418,1226,32406,1183,32394,1153,32381,1107,32369,1075,32356,1039,32344,1002,32332,991,32319,957,32306,908,32293,851,32280,821,32268,786,32254,716,32241,679,32228,664,32217,662,32204,634,32176,194,32165,225,32152,211,32140,211,32127,209,32115,215,32103,210,32091,218,32079,214,32067,209,32055,214,32042,208,32030,216,32018,210,32006,217,31994,217,31981,210,31969,220,31957,219,31944,211,31932,212,31920,214,31908,222,31896,226,31884,232,31872,231,31860,227,31847,221,31835,218,31823,229,31810,223,31798,225,31786,227,31774,230,31762,227,31750,227,31737,227,31725,232,31713,233,31701,227,31688,223,31676,227,31664,227,31653,240,31640,235,31627,229,31615,231,31604,242,31592,242,31579,242,31567,245,31555,243,31543,240,31531,242,31519,246,31506,243,31493,236,31481,239,31470,250,31457,238,31445,245,31433,246,31421,249,31408,243,31397,247,31383,236,31372,242,31359,243,31348,247,31335,246,31323,247,31310,247,31298,244,31286,247,31274,251,31262,255,31249,247,31236,249,31224,247,31212,250,31200,252,31188,257,31176,262,31163,260,31151,263,31139,262,31126,262,31114,263,31101,257,31090,266,31077,266,31065,266,31053,271,31040,267,31028,265,31015,262,31004,269,30991,264,30978,265,30965,259,30954,263,30941,266,30929,269,30917,272,30905,270,30892,263,30879,261,30867,264,30855,270,30843,268,30830,267,30819,273,30807,276,30794,272,30781,268,30768,263,30756,265,30742,253,30731,266,30720,274,30707,270,30695,275,30684,280,30671,279,30659,279,30646,275,30633,271,30620,270,30608,276,30596,278,30584,280,30570,275,30558,275,30545,272,30534,283,30521,280,30508,279,30496,279,30483,281,30471,280,30458,280,30445,279,30432,278,30421,287,30408,286,30395,283,30384,288,30370,282,30357,280,30345,285,30333,287,30321,288,30309,292,30297,297,30284,296,30271,292,30258,290,30245,284,30233,292,30222,299,30209,298,30196,297,30183,296,30171,299,30159,300,30146,300,30134,302,30122,306,30108,298,30095,293,30084,305,30072,306,30058,301,30047,307,30034,306,30021,301,30008,303,29995,299,29984,305,29971,307,29959,306,29946,306,29935,313,29922,311,29908,308,29896,311,29883,313,29870,307,29858,317,29845,314,29832,313,29819,313,29806,313,29794,317,29782,320,29769,319,29757,323,29744,324,29730,317,29717,319,29704,319,29692,320,29678,316,29666,320,29653,317,29640,320,29628,325,29615,322,29602,322,29590,326,29577,327,29564,326,29552,330,29538,326,29526,327,29514,332,29502,336,29489,336,29476,338,29464,340,29450,334,29437,337,29425,342,29412,339,29399,337,29386,340,29374,343,29360,336,29348,339,29335,341,29321,336,29310,345,29297,346,29285,347,29271,342,29259,347]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.2814167,-89.71858,-0.00491,4.94],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.765},\"Min\":{\"x\":-35.08,\"z\":5.112},\"values\":[-0.2814,-89.72,-0.004937,4.939]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.2828798,-89.71712,-0.00494,4.94],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":4.763},\"Min\":{\"x\":-35.07,\"z\":5.112},\"values\":[-0.2829,-89.72,-0.004937,4.939]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "3c0d1ab78afab1b1",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":14834,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3510,481919],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36326,147,36309,164,36298,158,36287,145,36269,172,36257,168,36245,162,36236,142,36221,155,36208,152,36193,161,36180,161,36169,155,36155,159,36141,162,36129,157,36117,152,36105,148,36093,145,36078,155,36063,163,36050,165,36039,156,36025,162,36013,154,36000,156,35988,151,35976,147,35960,163,35947,161,35933,166,35921,162,35908,163,35895,162,35882,162,35869,162,35857,160,35844,161,35830,163,35819,152,35804,165,35791,164,35777,169,35765,168,35752,168,35737,181,35723,184,35712,175,35701,160,35687,168,35673,173,35659,179,35645,185,35632,188,35610,243,35518,703,35497,757,35474,818,35451,885,35429,942,35404,1024,35373,1140,35344,1241,35324,1291,35308,1318,35296,1317,35283,1326,35271,1326,35258,1336,35248,1325,35236,1322,35224,1322,35213,1321,35199,1330,35190,1316,35176,1326,35164,1331,35151,1336,35140,1332,35128,1333,35115,1341,35105,1327,35092,1335,35080,1336,35070,1323,35058,1326,35046,1331,35034,1330,35021,1339,35011,1327,34998,1334,34988,1323,34975,1330,34962,1335,34952,1325,34939,1334,34925,1346,34914,1345,34905,1318,34891,1335,34879,1340,34869,1326,34854,1350,34844,1340,34834,1328,34821,1337,34810,1331,34799,1327,34788,1324,34774,1345,34762,1344,34753,1328,34741,1330,34728,1338,34717,1335,34704,1351,34693,1342,34681,1342,34670,1341,34658,1344,34647,1340,34636,1336,34626,1324,34613,1334,34602,1325,34590,1332,34578,1334,34566,1342,34554,1339,34544,1330,34531,1343,34519,1342,34507,1350,34496,1347,34483,1352,34473,1341,34461,1344,34450,1339,34439,1336,34427,1338,34415,1345,34403,1348,34392,1344,34379,1351,34368,1345,34358,1333,34346,1339,34334,1338,34322,1345,34310,1347,34299,1346,34287,1348,34276,1343,34264,1350,34251,1358,34240,1353,34229,1352,34217,1350,34206,1346,34196,1337,34183,1351,34172,1341,34160,1343,34149,1342,34138,1337,34129,1313,34121,1277,34111,1251,34101,1232,34092,1202,34082,1185,34073,1157,34065,1110,34055,1097,34045,1068,34036,1035,34026,1020,34016,995,34007,970,33998,933,33987,917,33977,892,33968,859,33959,824,33950,790,33939,773,33928,754,33920,705,33911,668,33901,639,33889,633,33879,616,33867,614,33856,593,33873,165,33857,217,33846,200,33833,201,33821,202,33809,203,33797,193,33785,198,33772,200,33760,195,33748,200,33735,203,33723,202,33711,197,33699,200,33687,197,33674,198,33662,194,33650,201,33637,206,33625,202,33613,195,33601,194,33589,198,33576,196,33564,199,33552,196,33540,191,33528,196,33515,192,33503,189,33491,191,33479,193,33466,196,33454,199,33442,199,33430,199,33417,200,33405,201,33393,199,33381,202,33369,192,33357,181,33344,197,33332,194,33320,195,33308,200,33296,195,33284,193,33271,198,33259,203,33247,200,33235,193,33223,201,33211,195,33198,194,33186,198,33174,201,33162,197,33150,201,33137,204,33125,196,33113,200,33101,198,33089,204,33076,204,33064,209,33052,204,33040,191,33028,189,33016,198,33004,194,32991,198,32979,199,32967,193,32955,196,32943,202,32930,202,32918,204,32906,209,32894,200,32882,199,32870,196,32857,198,32845,201,32833,200,32821,201,32809,202,32797,203,32784,205,32772,197,32760,209,32748,210,32736,212,32724,213,32711,210,32699,211,32687,207,32675,203,32663,207,32651,207,32638,202,32626,200,32614,202,32602,207,32590,209,32578,209,32565,213,32553,209,32541,210,32529,208,32517,208,32505,208,32492,208,32480,212,32468,210,32456,214,32444,207,32432,209,32419,208,32407,214,32395,220,32383,211,32371,214,32359,211,32347,214,32334,216,32322,211,32310,221,32298,216,32286,221,32274,219,32261,215,32249,211,32237,215,32225,217,32213,217,32201,218,32189,216,32176,219,32164,210,32152,221,32140,213,32128,214,32116,216,32104,220,32092,227,32079,225,32067,214,32055,222,32042,208,32030,222,32018,221,32006,213,31994,222,31982,221,31969,214,31957,216,31945,214,31933,220,31921,229,31908,225,31896,228,31884,229,31872,222,31860,239,31848,231,31835,233,31823,224,31810,223,31798,223,31786,221,31774,233,31762,230,31750,229,31738,233,31725,232,31714,242,31701,237,31689,239,31677,237,31665,243,31653,244,31640,239,31628,238,31615,233,31603,230,31592,243,31579,238,31567,244,31555,247,31543,244,31530,236,31518,245,31506,239,31494,243,31481,239,31469,239,31457,245,31446,252,31433,252,31421,248,31409,249,31397,251,31385,251,31372,245,31360,251,31347,245,31335,246,31323,250,31311,253,31298,252,31285,241,31273,243,31261,247,31249,256,31237,257,31225,259,31213,258,31200,257,31188,256,31176,264,31163,261,31151,260,31138,258,31127,264,31113,253,31102,264,31089,263,31077,267,31065,262,31053,269,31040,265,31028,263,31016,267,31003,263,30991,268,30979,274,30966,265,30954,266,30942,269,30930,270,30917,264,30905,267,30892,266,30880,270,30868,269,30856,271,30844,275,30831,273,30818,270,30806,273,30795,279,30781,271,30770,279,30757,277,30746,281,30733,282,30720,274,30708,276,30696,281,30684,284,30672,285,30659,279,30647,282,30635,286,30622,285,30609,280,30596,281,30584,285,30571,282,30559,282,30546,281,30534,286,30522,290,30509,286,30497,287,30484,285,30472,290,30459,288,30446,285,30433,285,30421,283,30409,289,30397,293,30384,293,30372,292,30360,297,30346,290,30335,297,30322,299,30309,295,30297,298,30284,296,30272,302,30259,294,30247,299,30234,298,30221,298,30210,304,30197,303,30184,302,30172,304,30160,306,30147,306,30135,306,30121,301,30109,302,30097,308,30085,307,30072,309,30060,311,30048,315,30035,311,30023,314,30009,307,29997,309,29985,313,29972,313,29960,315,29948,315,29935,314,29922,312,29910,316,29896,313,29884,316,29871,318,29859,322,29847,322,29834,325,29820,320,29808,322,29796,328,29783,325,29770,325,29758,329,29744,326,29733,337,29720,334,29706,329,29694,333,29681,331,29667,327,29655,331,29642,331,29630,332,29618,337,29605,336,29592,339,29579,338,29566,339,29553,335,29542,343,29528,342,29516,345,29504,346,29490,341,29478,347,29465,346,29451,341,29438,340,29426,345,29413,346,29400,345,29388,349,29375,347,29361,343,29348,341,29336,346,29324,348,29312,353,29299,353,29286,355,29274,357,29261,355]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[5.540579,84.45942,0.097,4.84],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":8.291},\"Min\":{\"x\":-35.06,\"z\":1.438},\"values\":[5.541,84.46,0.097,4.838]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[5.540579,84.45942,0.097,4.84],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":8.291},\"Min\":{\"x\":-35.06,\"z\":1.438},\"values\":[5.541,84.46,0.097,4.838]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 220,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "7b84336be5b86fe3",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":15278,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3532,990116],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,184,36308,169,36295,173,36282,173,36267,182,36254,183,36241,184,36226,194,36213,190,36203,179,36190,177,36176,183,36164,178,36149,188,36137,183,36125,180,36114,169,36100,176,36088,168,36073,179,36060,179,36047,180,36038,158,36020,187,36008,182,35996,178,35984,170,35968,186,35955,186,35943,182,35932,175,35919,171,35907,170,35893,174,35879,178,35866,178,35856,166,35842,168,35827,178,35813,185,35803,172,35788,182,35776,178,35764,170,35752,165,35739,169,35726,169,35713,169,35699,172,35685,179,35674,170,35660,173,35646,179,35633,182,35623,163,35608,177,35594,184,35582,181,35570,177,35557,179,35544,183,35530,186,35517,190,35505,186,35493,181,35480,183,35466,191,35456,177,35444,174,35429,188,35417,186,35404,186,35392,181,35379,185,35367,178,35354,181,35342,179,35329,178,35316,183,35304,176,35290,184,35278,184,35264,189,35252,187,35239,188,35226,190,35214,185,35202,182,35189,184,35175,195,35163,191,35152,181,35138,188,35126,186,35111,198,35099,198,35087,195,35074,194,35061,198,35048,197,35037,188,35024,193,35011,197,34999,193,34985,196,34973,198,34959,208,34947,198,34934,203,34921,202,34908,206,34896,206,34883,205,34871,206,34859,202,34845,216,34834,205,34821,207,34809,199,34797,199,34784,202,34771,213,34759,209,34746,209,34734,209,34721,211,34708,219,34695,224,34683,220,34670,222,34658,221,34646,217,34635,210,34623,207,34609,218,34597,216,34586,203,34572,217,34560,216,34547,216,34535,209,34524,204,34511,204,34499,206,34485,216,34474,207,34460,215,34448,214,34437,203,34425,203,34412,207,34398,218,34386,214,34374,211,34361,219,34349,216,34338,204,34325,201,34312,209,34300,208,34288,202,34275,211,34262,215,34250,208,34238,214,34225,215,34212,220,34201,205,34188,212,34176,210,34163,215,34151,215,34139,217,34127,209,34115,210,34102,210,34090,209,34078,206,34066,209,34054,203,34041,210,34029,214,34016,216,34004,214,33992,215,33980,212,33968,209,33956,205,33943,213,33931,206,33919,209,33906,209,33894,211,33882,208,33870,208,33857,211,33845,207,33833,208,33821,198,33809,208,33796,210,33784,207,33772,209,33760,200,33747,210,33735,214,33722,216,33711,206,33698,209,33686,215,33674,209,33662,203,33649,207,33637,209,33625,212,33612,214,33600,213,33588,209,33576,204,33564,209,33551,220,33540,201,33527,211,33514,216,33502,213,33490,202,33478,206,33466,210,33454,205,33442,205,33429,207,33417,211,33405,202,33393,206,33380,211,33369,202,33356,205,33344,211,33332,203,33320,202,33308,206,33295,210,33283,205,33271,210,33259,212,33247,212,33235,208,33222,206,33210,211,33198,210,33186,207,33174,200,33161,209,33149,207,33137,203,33125,203,33113,203,33101,202,33088,211,33076,209,33064,209,33052,205,33040,208,33028,210,33015,210,33003,209,32991,205,32979,207,32967,208,32955,208,32942,212,32930,204,32918,209,32906,214,32894,211,32882,210,32869,213,32857,207,32845,209,32833,209,32821,211,32809,211,32797,209,32784,207,32772,207,32760,213,32748,214,32736,209,32724,211,32711,213,32699,214,32687,213,32675,217,32663,213,32651,217,32638,216,32626,217,32614,213,32602,219,32590,214,32578,211,32565,217,32553,216,32541,218,32529,225,32517,219,32505,228,32493,217,32481,229,32468,229,32456,227,32444,222,32432,223,32419,213,32408,223,32395,219,32383,226,32371,230,32359,225,32347,228,32335,234,32323,233,32311,238,32298,225,32286,230,32274,229,32262,220,32249,216,32237,223,32225,227,32213,233,32201,225,32189,224,32176,217,32165,228,32152,221,32140,227,32128,237,32116,233,32104,239,32092,233,32080,236,32067,228,32056,235,32043,236,32031,235,32019,236,32006,228,31995,240,31983,243,31970,245,31958,234,31945,225,31934,246,31921,241,31909,240,31897,235,31885,243,31873,244,31860,241,31848,243,31836,248,31824,238,31811,235,31799,233,31787,244,31775,242,31762,236,31750,233,31738,233,31726,238,31714,246,31702,245,31690,244,31677,239,31665,246,31653,246,31641,251,31629,254,31617,250,31607,288,31595,291,31583,287,31565,205,31564,367,31577,704,31568,746,31558,764,31546,767,31538,817,31529,859,31520,883,31510,909,31501,946,31490,958,31481,987,31471,1014,31461,1031,31452,1063,31443,1092,31434,1129,31425,1160,31416,1186,31406,1202,31397,1237,31388,1265,31380,1306,31372,1345,31363,1372,31354,1401,31345,1420,31332,1413,31322,1423,31310,1422,31299,1431,31289,1439,31276,1426,31266,1440,31253,1431,31242,1432,31231,1436,31219,1437,31207,1428,31195,1427,31184,1434,31174,1442,31161,1431,31150,1434,31139,1440,31127,1434,31114,1422,31102,1422,31092,1435,31081,1435,31069,1432,31057,1432,31045,1427,31034,1432,31023,1432,31011,1431,31000,1432,30989,1442,30977,1436,30966,1440,30954,1434,30942,1430,30931,1435,30919,1435,30908,1437,30897,1437,30884,1431,30873,1437,30862,1435,30850,1430,30840,1446,30829,1448,30816,1439,30805,1443,30793,1443,30780,1429,30769,1435,30759,1444,30747,1442,30735,1439,30724,1443,30713,1445,30701,1439,30689,1435,30677,1433,30666,1441,30655,1442,30642,1433,30631,1441,30621,1449,30607,1433,30596,1444,30583,1431,30573,1442,30562,1450,30549,1443,30539,1452,30527,1452,30514,1444,30503,1448,30490,1439,30478,1436,30467,1445,30456,1448,30444,1445,30433,1452,30420,1442,30408,1440,30398,1455,30385,1449,30373,1442,30361,1443,30348,1436,30339,1454,30326,1448,30314,1446,30302,1444,30291,1447,30279,1444,30269,1455,30256,1449,30245,1454,30234,1456,30222,1460,30209,1447,30197,1449,30184,1441,30173,1443,30154,1406,30133,1348,30107,1264,30087,1216,30062,1142,30039,1077,30015,1008,29988,923,29960,830,29937,765,29915,713,29851,418,29821,323,29807,320,29793,311,29780,309,29768,317,29755,313,29742,313,29730,318,29716,312,29702,309,29690,310,29678,317,29666,318,29653,322,29640,319,29626,316,29614,320,29603,325,29588,319,29576,324,29564,326,29551,323,29539,328,29525,326,29513,331,29499,325,29487,327,29474,328,29461,327,29448,324,29434,318,29422,325,29410,329,29397,328,29384,327,29371,326,29358,327,29344,322,29331,323,29318,319,29306,326,29294,331,29280,324,29268,327,29256,331]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-8.555232,-81.44477,-0.15,4.98],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":-0.3637},\"Min\":{\"x\":-35.11,\"z\":10.26},\"values\":[-8.555,-81.44,-0.1504,4.98]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-8.561577,-81.43842,-0.151,4.98],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":-0.3672},\"Min\":{\"x\":-35.11,\"z\":10.27},\"values\":[-8.562,-81.44,-0.1505,4.98]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "d4da9d7118d2cc99",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia media 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":15740,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3556,455000],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36319,182,36307,176,36293,183,36278,193,36268,175,36256,172,36242,177,36228,180,36216,175,36206,161,36189,182,36176,184,36164,177,36151,180,36137,183,36126,174,36112,181,36100,174,36087,177,36074,175,36059,185,36046,186,36035,178,36022,175,36008,181,35996,174,35983,178,35971,174,35956,186,35945,175,35930,184,35919,172,35907,168,35892,179,35880,173,35866,179,35854,176,35842,168,35828,173,35817,166,35805,158,35790,169,35778,166,35764,170,35752,165,35740,161,35727,160,35712,176,35699,173,35686,175,35675,165,35660,175,35647,175,35634,176,35621,175,35608,176,35596,174,35586,155,35570,174,35557,175,35544,181,35533,168,35520,173,35508,169,35497,160,35481,180,35469,177,35458,167,35446,162,35433,163,35420,166,35408,162,35393,172,35381,173,35367,182,35355,176,35342,174,35329,178,35316,183,35304,176,35291,179,35279,177,35266,178,35253,180,35239,187,35226,190,35215,181,35203,176,35192,169,35179,167,35167,166,35151,183,35139,181,35126,184,35114,178,35102,176,35090,174,35077,174,35065,169,35050,182,35037,185,35024,190,35011,192,34999,190,34986,195,34973,197,34961,190,34949,183,34936,190,34923,188,34912,180,34900,174,34886,180,34873,188,34861,188,34848,188,34837,180,34824,185,34812,182,34798,190,34785,192,34773,196,34762,184,34748,193,34735,197,34722,202,34710,201,34697,205,34685,201,34674,193,34661,195,34648,201,34635,204,34624,195,34611,197,34599,195,34587,194,34575,190,34562,196,34549,203,34535,210,34524,201,34512,199,34500,194,34487,196,34475,195,34463,190,34451,190,34439,185,34426,187,34413,191,34399,209,34387,203,34375,199,34363,195,34351,192,34338,203,34326,200,34313,206,34301,199,34288,202,34275,210,34263,204,34251,199,34239,199,34226,202,34214,197,34201,202,34190,189,34177,192,34165,197,34152,201,34140,197,34128,201,34115,202,34104,190,34091,193,34079,199,34066,202,34054,196,34042,195,34030,198,34017,201,34005,203,33993,203,33981,199,33969,197,33955,209,33944,202,33932,200,33919,209,33907,200,33895,195,33883,197,33871,193,33858,203,33846,200,33834,200,33821,204,33809,201,33797,199,33785,197,33772,198,33760,201,33748,201,33736,194,33723,198,33711,202,33698,206,33686,206,33674,211,33661,215,33650,192,33636,222,33604,620,33589,671,33576,706,33562,740,33548,778,33535,814,33521,865,33507,898,33494,929,33481,965,33467,1012,33454,1050,33440,1097,33427,1142,33414,1184,33401,1218,33388,1268,33375,1309,33362,1330,33351,1339,33339,1339,33328,1336,33317,1341,33305,1343,33294,1348,33282,1352,33271,1356,33259,1355,33249,1333,33237,1347,33226,1338,33214,1346,33203,1346,33192,1350,33180,1342,33169,1350,33157,1355,33146,1358,33135,1353,33124,1346,33112,1353,33101,1365,33090,1350,33078,1349,33067,1359,33056,1353,33044,1355,33033,1344,33022,1347,33010,1347,32999,1346,32988,1354,32976,1355,32965,1348,32954,1353,32942,1347,32931,1359,32920,1347,32908,1349,32897,1345,32886,1337,32874,1347,32863,1351,32852,1353,32840,1360,32829,1360,32818,1348,32806,1359,32795,1356,32784,1363,32772,1355,32761,1357,32750,1359,32738,1354,32727,1359,32716,1349,32704,1352,32693,1362,32682,1348,32670,1353,32659,1351,32648,1363,32636,1363,32625,1365,32614,1364,32602,1359,32591,1351,32580,1359,32568,1361,32557,1368,32546,1356,32534,1366,32523,1361,32512,1360,32500,1365,32489,1366,32478,1367,32466,1361,32455,1367,32444,1364,32433,1372,32421,1376,32410,1364,32399,1365,32387,1368,32376,1358,32364,1348,32353,1358,32342,1350,32331,1366,32319,1368,32308,1373,32297,1373,32286,1375,32274,1375,32263,1365,32251,1363,32240,1360,32229,1363,32217,1361,32206,1360,32195,1372,32183,1353,32171,1344,32159,1312,32146,1276,32133,1235,32120,1198,32107,1161,32093,1114,32081,1082,32068,1049,32054,1005,32041,971,32027,932,32013,882,32000,847,31987,812,31972,765,31958,721,31944,668,31931,645,31918,620,31892,371,31876,299,31860,238,31847,227,31835,225,31823,228,31811,231,31798,225,31786,226,31774,234,31762,230,31750,230,31737,229,31725,233,31713,226,31701,231,31689,231,31677,239,31664,229,31652,232,31640,238,31628,236,31616,244,31603,235,31591,240,31579,241,31567,240,31555,247,31543,245,31531,243,31517,228,31506,239,31494,247,31482,244,31469,243,31457,238,31445,239,31433,242,31420,237,31409,247,31396,244,31384,241,31371,240,31359,237,31347,247,31335,245,31322,241,31310,245,31298,242,31285,241,31273,243,31261,246,31249,252,31235,237,31224,251,31212,257,31200,261,31188,261,31175,249,31163,254,31150,252,31139,263,31127,265,31114,258,31099,239,31088,253,31076,257,31065,263,31052,263,31040,262,31027,259,31015,262,31003,263,30991,262,30978,257,30966,263,30953,255,30940,257,30929,264,30917,265,30905,269,30892,263,30879,262,30867,260,30855,264,30842,265,30830,265,30818,265,30805,265,30793,268,30781,264,30769,271,30757,272,30744,270,30732,273,30720,277,30707,273,30695,270,30683,273,30670,267,30657,267,30646,278,30634,281,30621,280,30608,278,30596,278,30582,271,30571,277,30558,274,30545,273,30534,282,30521,284,30508,281,30495,277,30482,273,30470,276,30458,280,30445,278,30433,284,30420,281,30407,278,30395,279,30384,292,30371,289,30358,286,30346,286,30332,277,30321,288,30308,289,30295,286,30283,287,30271,293,30258,287,30246,292,30233,293,30221,291,30207,287,30196,294,30183,290,30171,296,30158,295,30145,291,30131,285,30119,284,30106,286,30096,298,30084,303,30071,302,30058,297,30046,303,30033,300,30020,298,30008,303,29996,306,29984,305,29970,300,29957,296,29945,301,29933,306,29920,303,29908,307,29895,303,29882,303,29870,309,29857,308,29843,304,29831,308,29818,305,29805,307,29792,304,29780,311,29767,312,29755,315,29742,315,29730,318,29716,314,29703,314,29691,317,29678,316,29665,318,29652,317,29641,322,29628,323,29615,322,29603,327,29589,321,29576,320,29564,326,29552,330,29539,328,29525,324,29513,328,29500,326,29487,329,29474,329,29462,332,29449,329,29435,326,29423,327,29409,325,29396,326,29385,331,29373,338,29359,332,29346,330,29334,338,29321,335,29307,332,29296,339,29283,339,29271,342,29258,343]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.282518,-88.71748,-0.0224,4.9],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":4.104},\"Min\":{\"x\":-35.08,\"z\":5.685},\"values\":[-1.283,-88.72,-0.02239,4.899]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.28337,-88.71663,-0.0224,4.9],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":4.103},\"Min\":{\"x\":-35.08,\"z\":5.685},\"values\":[-1.283,-88.72,-0.0224,4.899]}}]}]}",
        "payloadType": "json",
        "x": 560,
        "y": 300,
        "wires": [
            [
                "489d1cdef715df67"
            ]
        ]
    },
    {
        "id": "8a3e176fb1de8b2b",
        "type": "link out",
        "z": "c4f35bb0ae2de5ca",
        "name": "profilo grande",
        "mode": "link",
        "links": [
            "3aa5e7b308f3148f"
        ],
        "x": 315,
        "y": 560,
        "wires": []
    },
    {
        "id": "81c2e60b6744e96f",
        "type": "link out",
        "z": "c4f35bb0ae2de5ca",
        "name": "profilo piccolo",
        "mode": "link",
        "links": [
            "3aa5e7b308f3148f"
        ],
        "x": 705,
        "y": 480,
        "wires": []
    },
    {
        "id": "4aca5454633be08a",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":17341,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3637,645152],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36316,193,36301,203,36292,187,36277,198,36263,203,36252,191,36239,193,36226,194,36213,193,36199,196,36186,198,36173,198,36159,204,36145,208,36133,207,36122,194,36106,209,36093,209,36080,211,36069,199,36058,191,36042,209,36029,207,36018,197,36003,210,35991,202,35976,215,35964,208,35952,203,35938,210,35926,207,35913,204,35900,205,35886,210,35872,220,35860,213,35848,206,35834,214,35821,216,35810,203,35798,199,35785,200,35770,210,35760,196,35747,194,35732,207,35718,212,35704,221,35691,219,35679,215,35666,215,35653,213,35640,214,35627,217,35613,220,35601,216,35589,213,35577,212,35563,220,35549,227,35538,215,35525,220,35513,216,35502,208,35488,213,35476,212,35462,218,35449,218,35436,221,35424,219,35412,213,35400,214,35386,218,35375,212,35360,225,35349,216,35336,220,35324,211,35311,218,35298,219,35286,215,35272,223,35261,215,35247,222,35236,210,35223,213,35209,221,35198,213,35185,211,35172,215,35159,219,35147,216,35134,214,35121,223,35107,230,35096,216,35084,214,35071,217,35058,220,35047,209,35033,220,35020,220,35008,219,34995,218,34983,214,34970,216,34958,210,34945,219,34933,210,34919,219,34906,221,34894,219,34882,218,34869,219,34857,219,34844,224,34831,226,34820,212,34807,219,34795,215,34783,211,34771,212,34758,216,34745,223,34734,211,34721,216,34707,227,34695,224,34683,216,34671,217,34658,221,34646,215,34634,218,34621,216,34609,216,34596,222,34585,214,34572,212,34559,220,34547,220,34535,215,34522,224,34509,222,34497,221,34484,224,34472,220,34460,220,34448,218,34436,216,34423,215,34410,222,34398,220,34386,219,34373,223,34361,220,34348,221,34336,222,34324,221,34312,216,34299,221,34287,216,34276,204,34263,211,34250,212,34238,212,34225,214,34212,221,34200,222,34187,221,34175,218,34163,220,34151,218,34139,215,34126,215,34114,214,34102,219,34090,216,34077,222,34065,223,34053,214,34041,211,34029,214,34016,213,34004,211,33992,210,33980,211,33968,211,33955,219,33942,220,33930,220,33918,213,33906,211,33894,216,33882,210,33869,214,33857,213,33845,216,33833,214,33820,215,33808,220,33796,212,33784,209,33771,213,33760,202,33748,203,33735,213,33723,214,33710,210,33699,202,33686,206,33674,204,33662,208,33650,202,33637,213,33624,217,33612,211,33600,208,33588,211,33576,209,33564,205,33552,205,33539,203,33527,208,33515,209,33502,212,33490,208,33478,204,33466,208,33454,207,33441,206,33429,203,33417,205,33405,198,33393,203,33381,207,33368,206,33356,206,33344,208,33332,207,33320,198,33308,205,33296,199,33283,205,33271,203,33259,206,33247,208,33234,212,33222,205,33210,210,33198,208,33186,204,33174,200,33162,197,33150,198,33137,206,33125,202,33113,200,33101,196,33089,205,33077,196,33064,208,33052,204,33040,203,33028,203,33016,203,33003,203,32991,199,32979,197,32967,203,32955,203,32942,209,32930,209,32918,202,32906,189,32894,204,32882,202,32870,206,32857,206,32845,204,32833,201,32821,201,32809,206,32797,207,32784,208,32772,208,32760,212,32748,210,32736,212,32724,213,32711,205,32699,202,32687,204,32675,204,32663,208,32650,203,32638,205,32626,211,32614,203,32602,198,32590,209,32578,206,32565,207,32553,209,32541,206,32529,208,32517,211,32505,209,32492,208,32480,207,32468,207,32456,212,32444,210,32432,212,32419,210,32407,207,32395,206,32383,202,32371,215,32359,211,32346,211,32334,210,32322,210,32310,214,32298,222,32286,218,32274,224,32261,212,32249,217,32237,222,32225,212,32213,218,32201,214,32188,207,32176,213,32164,216,32152,208,32140,208,32127,210,32115,210,32103,211,32091,208,32079,217,32067,213,32055,218,32043,219,32030,218,32018,214,32005,208,31993,209,31981,218,31969,210,31957,209,31945,216,31932,215,31921,223,31908,215,31896,223,31884,223,31872,228,31859,208,31847,213,31834,216,31823,223,31810,217,31798,224,31786,223,31773,218,31761,222,31749,219,31737,223,31724,217,31712,219,31700,224,31688,226,31676,222,31664,224,31651,216,31639,217,31626,213,31614,213,31602,219,31591,228,31578,229,31566,220,31554,227,31542,232,31530,231,31517,228,31505,226,31492,217,31481,228,31469,231,31456,231,31444,234,31432,229,31419,225,31408,233,31395,225,31383,230,31371,235,31358,231,31346,227,31334,229,31321,230,31309,230,31297,232,31284,231,31271,223,31258,218,31246,222,31235,234,31223,235,31210,232,31198,237,31186,235,31173,235,31160,226,31148,234,31136,238,31123,230,31111,227,31099,232,31086,230,31073,227,31061,230,31050,237,31038,240,31024,232,31013,242,31000,239,30988,235,30976,244,30966,263,30961,332,30956,396,30949,446,30938,460,30926,463,30916,479,30907,511,30900,555,30894,607,30885,636,30877,666,30868,692,30859,724,30851,757,30843,789,30834,818,30827,856,30817,873,30808,895,30799,917,30790,947,30780,965,30773,1004,30768,1054,30760,1083,30750,1097,30740,1113,30730,1130,30720,1141,30708,1144,30696,1139,30684,1137,30673,1141,30662,1149,30650,1149,30637,1138,30626,1147,30614,1147,30603,1148,30590,1146,30577,1139,30565,1137,30553,1139,30542,1146,30531,1153,30519,1152,30507,1150,30497,1164,30485,1163,30472,1158,30460,1158,30447,1146,30433,1136,30423,1151,30411,1151,30400,1156,30388,1154,30375,1148,30363,1148,30351,1149,30338,1141,30328,1156,30316,1157,30307,1174,30295,1171,30283,1171,30271,1170,30255,1151,30241,1137,30228,1127,30209,1086,30189,1035,30166,967,30146,919,30121,844,30097,770,30073,699,30048,621,30019,520,29989,413,29966,347,29944,294,29928,277,29915,273,29900,261,29889,271,29876,268,29863,269,29849,266,29837,271,29823,266,29811,269,29798,269,29786,270,29774,277,29760,274,29747,273,29734,271,29721,271,29709,273,29696,275,29683,276,29670,275,29657,274,29644,273,29631,272,29620,282,29607,281,29593,278,29580,275,29568,281,29555,279,29544,288,29530,285,29516,278,29503,276,29493,293,29480,290,29466,285,29453,288,29439,283,29427,286,29414,284,29400,278,29387,279,29374,280,29361,278,29349,284,29337,288,29323,284,29311,287,29299,290,29285,285,29273,289,29259,288,29248,295]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.760913,-86.23909,-0.0657,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9516},\"Min\":{\"x\":-35.19,\"z\":5.599},\"values\":[-3.761,-86.24,-0.06573,3.285]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.766063,-86.23394,-0.0658,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9487},\"Min\":{\"x\":-35.2,\"z\":5.603},\"values\":[-3.766,-86.23,-0.06583,3.285]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 400,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "92c776a2c88b7a71",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":18132,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3676,912705],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36315,199,36302,201,36289,201,36275,205,36264,197,36251,195,36237,203,36224,200,36210,206,36200,193,36188,186,36173,200,36158,207,36144,216,36133,206,36121,199,36106,210,36093,212,36082,202,36069,199,36054,210,36043,203,36030,203,36014,218,36001,216,35990,211,35977,207,35966,198,35954,195,35940,199,35926,208,35914,201,35900,205,35887,208,35877,192,35863,198,35849,202,35836,203,35823,202,35809,210,35797,205,35783,209,35771,207,35759,200,35745,204,35733,202,35721,197,35708,194,35694,202,35681,205,35666,212,35654,207,35645,186,35631,193,35616,202,35604,201,35591,201,35578,206,35564,213,35551,213,35538,215,35527,209,35515,202,35502,204,35489,209,35478,196,35464,204,35450,216,35437,214,35425,211,35414,205,35400,213,35388,210,35375,212,35363,208,35350,204,35339,199,35326,197,35311,213,35299,209,35288,203,35276,198,35263,199,35249,204,35237,202,35224,202,35211,206,35198,212,35186,205,35174,202,35161,203,35149,203,35136,199,35124,201,35110,205,35099,195,35086,201,35073,200,35060,207,35047,210,35035,204,35023,202,35009,208,34997,204,34984,205,34972,198,34960,196,34948,191,34934,205,34922,196,34910,197,34898,191,34884,199,34872,197,34859,198,34847,201,34834,205,34822,199,34809,204,34798,195,34785,194,34772,200,34760,201,34747,204,34735,198,34722,202,34710,200,34697,203,34685,203,34673,198,34661,199,34649,193,34635,202,34623,200,34612,194,34599,196,34587,192,34576,182,34563,185,34551,184,34538,188,34524,197,34512,192,34500,194,34488,185,34475,192,34462,198,34450,195,34437,199,34425,197,34413,189,34402,183,34389,188,34377,186,34364,185,34351,192,34339,186,34326,194,34314,192,34302,187,34290,180,34278,177,34265,188,34252,190,34240,183,34227,193,34214,199,34202,199,34190,190,34177,193,34166,183,34154,181,34141,185,34128,194,34116,192,34104,194,34091,195,34080,187,34067,191,34055,188,34043,185,34031,185,34018,188,34006,192,33994,186,33981,191,33970,182,33957,184,33944,198,33932,191,33920,191,33908,189,33895,192,33884,184,33871,187,33859,191,33847,185,33834,193,33822,188,33810,189,33798,181,33786,182,33774,180,33761,191,33749,183,33736,187,33725,177,33712,183,33699,192,33687,190,33675,183,33663,190,33650,188,33638,186,33627,172,33614,177,33602,174,33590,171,33578,172,33565,171,33552,187,33540,183,33528,182,33516,178,33504,173,33492,171,33479,176,33467,175,33455,171,33443,169,33431,171,33418,178,33406,178,33394,182,33382,181,33369,185,33357,176,33345,170,33333,171,33321,180,33309,175,33296,175,33284,181,33272,182,33260,170,33248,170,33236,171,33223,176,33211,173,33199,174,33187,178,33174,186,33162,180,33150,177,33138,167,33126,169,33114,172,33101,168,33089,180,33077,182,33065,178,33052,183,33040,185,33028,175,33016,176,33004,184,32992,183,32979,180,32967,177,32955,165,32943,171,32931,174,32918,182,32906,174,32894,172,32882,173,32870,173,32858,170,32845,180,32833,178,32821,168,32809,174,32797,174,32784,188,32772,190,32760,228,32748,299,32736,358,32724,381,32712,409,32700,443,32689,495,32677,549,32666,619,32654,649,32643,686,32631,730,32620,770,32608,797,32597,829,32586,881,32575,923,32563,953,32552,992,32541,1023,32530,1048,32519,1080,32507,1088,32496,1098,32485,1100,32473,1098,32462,1103,32450,1103,32439,1104,32427,1106,32415,1101,32404,1091,32392,1093,32380,1084,32369,1082,32357,1087,32346,1090,32335,1093,32323,1102,32312,1095,32300,1096,32289,1097,32277,1094,32266,1101,32254,1099,32242,1089,32231,1091,32219,1095,32208,1100,32197,1102,32185,1099,32173,1089,32162,1090,32150,1093,32138,1084,32127,1094,32116,1100,32105,1104,32093,1103,32082,1112,32070,1105,32058,1103,32047,1104,32035,1106,32023,1098,32011,1085,31998,1050,31984,1006,31970,966,31957,933,31943,892,31929,846,31916,809,31902,773,31888,736,31873,680,31859,649,31846,615,31832,577,31814,497,31798,434,31786,424,31771,378,31756,330,31739,262,31725,222,31712,207,31700,210,31687,207,31675,205,31662,205,31650,205,31638,209,31626,209,31614,212,31602,216,31589,208,31577,213,31565,206,31554,224,31541,217,31529,222,31517,222,31505,225,31492,224,31480,220,31467,216,31455,214,31443,213,31431,221,31420,231,31407,223,31395,225,31383,229,31370,223,31358,224,31346,228,31333,228,31321,223,31309,232,31297,240,31285,236,31272,233,31260,237,31248,241,31236,246,31224,245,31212,249,31198,240,31187,254,31173,235,31162,243,31150,248,31137,246,31125,243,31112,246,31100,240,31088,248,31076,254,31064,258,31052,258,31040,259,31028,264,31016,268,31002,259,30990,255,30976,245,30965,253,30953,262,30941,262,30929,264,30916,258,30904,260,30892,262,30879,264,30867,265,30855,269,30843,269,30830,265,30817,260,30806,274,30793,268,30782,273,30769,269,30757,274,30745,276,30732,273,30719,266,30708,275,30696,277,30683,273,30671,275,30659,281,30647,280,30634,280,30620,273,30609,281,30595,271,30583,278,30571,283,30558,278,30547,285,30534,285,30521,282,30509,284,30496,285,30483,277,30471,284,30458,284,30446,288,30434,288,30420,282,30409,288,30397,291,30384,291,30371,288,30359,289,30346,292,30334,292,30320,285,30308,285,30296,293,30283,289,30272,297,30259,295,30246,293,30234,296,30220,288,30209,298,30196,296,30182,283,30171,294,30158,296,30146,299,30134,301,30121,301,30109,304,30096,300,30083,297,30071,299,30059,301,30046,303,30034,303,30021,303,30008,301,29996,301,29983,299,29971,306,29959,308,29947,312,29933,305,29922,312,29909,310,29896,314,29883,309,29869,307,29857,310,29843,303,29832,311,29819,315,29806,313,29793,313,29780,313,29766,302,29755,313,29742,315,29729,314,29716,314,29703,314,29691,316,29677,310,29665,314,29653,317,29640,318,29628,322,29613,312,29601,319,29589,322,29576,323,29563,320,29551,324,29539,328,29526,330,29514,332,29498,320,29485,317,29474,325,29460,323,29448,325,29435,326,29421,322,29409,324,29396,322,29384,329,29371,329,29357,324,29344,322,29333,329,29319,325,29307,330,29293,322,29280,325,29269,331,29253,319]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.75068,-88.24932,-0.0306,3.28],\"visualizationValues\":{\"Max\":{\"x\":35.49,\"z\":2.194},\"Min\":{\"x\":-35.13,\"z\":4.353},\"values\":[-1.751,-88.25,-0.03056,3.279]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.75068,-88.24932,-0.0306,3.28],\"visualizationValues\":{\"Max\":{\"x\":35.49,\"z\":2.194},\"Min\":{\"x\":-35.13,\"z\":4.353},\"values\":[-1.751,-88.25,-0.03056,3.279]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 440,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "9c38592cb1f86d98",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":18458,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3693,338590],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36322,166,36307,175,36296,168,36281,175,36269,173,36257,165,36243,170,36229,178,36217,171,36204,172,36191,172,36177,178,36166,167,36150,181,36138,177,36129,161,36114,171,36100,175,36088,172,36073,179,36062,169,36049,170,36037,164,36022,175,36010,169,35997,173,35986,163,35973,163,35959,166,35946,168,35931,176,35920,168,35908,161,35894,166,35882,162,35868,167,35856,166,35841,173,35828,178,35816,169,35804,167,35791,164,35779,160,35765,169,35751,170,35740,162,35726,164,35714,164,35700,165,35687,168,35675,164,35663,157,35650,156,35638,155,35625,154,35613,150,35598,161,35586,155,35573,159,35560,163,35547,162,35534,163,35522,158,35509,164,35496,166,35482,171,35470,166,35458,165,35445,168,35433,163,35420,162,35407,169,35396,157,35383,157,35370,159,35357,163,35345,155,35332,163,35320,158,35307,155,35294,161,35280,166,35268,166,35250,200,35230,249,35203,349,35182,405,35157,490,35126,615,35098,725,35074,800,35050,884,35028,955,35006,1024,34993,1035,34976,1067,34962,1078,34952,1069,34938,1082,34925,1088,34915,1072,34904,1068,34892,1070,34879,1072,34868,1066,34856,1073,34844,1076,34831,1080,34819,1084,34807,1081,34797,1070,34784,1079,34772,1084,34760,1085,34749,1077,34738,1069,34725,1080,34714,1077,34701,1083,34691,1074,34677,1085,34669,1061,34656,1066,34642,1083,34631,1078,34619,1078,34609,1070,34596,1081,34584,1076,34571,1088,34562,1068,34549,1081,34537,1078,34525,1083,34513,1079,34501,1082,34491,1072,34481,1054,34471,1036,34463,1005,34454,978,34444,952,34435,931,34425,908,34416,883,34407,855,34398,824,34390,787,34380,765,34370,747,34359,734,34351,699,34342,669,34333,637,34323,613,34312,598,34304,560,34296,517,34288,476,34278,445,34268,426,34259,384,34248,368,34238,344,34229,315,34220,275,34211,231,34202,195,34190,191,34178,184,34166,182,34154,177,34141,187,34130,177,34118,170,34105,173,34093,176,34081,175,34069,169,34057,167,34044,171,34032,171,34020,169,34007,175,33995,177,33983,171,33970,176,33958,167,33946,169,33934,164,33921,174,33909,167,33897,168,33884,174,33872,169,33859,182,33848,169,33835,177,33822,183,33810,177,33798,177,33786,174,33774,166,33762,164,33750,164,33737,171,33725,173,33712,178,33700,183,33688,172,33676,172,33664,166,33652,167,33639,166,33627,167,33615,166,33602,176,33589,183,33577,181,33565,181,33553,178,33540,184,33528,185,33516,180,33503,186,33492,177,33479,176,33467,173,33455,169,33443,172,33430,179,33419,169,33406,171,33394,187,33381,182,33370,176,33358,170,33345,177,33333,170,33321,179,33308,181,33296,179,33284,185,33272,183,33259,190,33247,189,33235,185,33223,184,33211,185,33199,183,33187,178,33175,169,33162,173,33150,182,33138,182,33126,184,33113,192,33101,192,33089,188,33077,185,33064,192,33052,189,33040,188,33028,196,33016,195,33004,193,32991,188,32979,193,32967,190,32955,195,32943,193,32930,200,32918,199,32906,189,32894,189,32882,189,32870,193,32857,194,32845,191,32833,198,32821,190,32809,191,32797,188,32784,197,32772,198,32760,193,32748,198,32736,200,32723,198,32711,192,32699,197,32687,203,32675,206,32663,204,32651,207,32638,201,32626,202,32614,203,32602,204,32590,200,32577,195,32565,201,32553,202,32541,200,32529,205,32517,200,32504,200,32492,204,32480,201,32468,204,32456,204,32444,206,32432,214,32419,207,32407,204,32395,208,32383,203,32371,207,32359,210,32346,209,32334,206,32322,202,32310,206,32298,204,32285,205,32273,210,32261,210,32249,211,32237,213,32225,211,32213,210,32200,210,32189,217,32176,210,32164,208,32152,213,32140,218,32128,214,32115,214,32103,214,32091,214,32079,213,32067,213,32055,226,32043,223,32030,221,32018,224,32006,220,31994,216,31981,220,31969,222,31957,226,31945,221,31933,222,31920,221,31908,217,31896,221,31884,217,31871,221,31860,229,31848,230,31835,226,31823,228,31811,236,31799,238,31787,236,31774,234,31762,231,31750,231,31738,234,31725,230,31713,233,31701,234,31689,237,31677,239,31665,238,31652,237,31640,233,31628,238,31616,248,31604,246,31592,241,31579,235,31566,233,31554,236,31543,242,31531,246,31519,250,31506,246,31494,244,31482,242,31470,251,31458,254,31446,250,31433,249,31420,239,31408,240,31396,243,31383,237,31371,229,31360,251,31348,253,31336,252,31323,250,31311,251,31298,249,31286,256,31274,256,31262,263,31250,257,31237,258,31224,252,31212,252,31200,257,31188,261,31176,264,31163,261,31151,258,31139,260,31126,262,31114,257,31102,266,31090,265,31077,264,31064,257,31052,261,31040,263,31028,267,31015,258,31003,260,30991,266,30978,262,30966,268,30954,269,30942,271,30929,268,30916,259,30905,269,30892,266,30880,269,30868,272,30856,274,30842,263,30830,268,30819,274,30807,275,30794,269,30781,271,30769,271,30757,274,30745,280,30732,272,30719,270,30707,268,30695,274,30683,276,30670,270,30658,275,30645,267,30633,275,30620,267,30608,275,30596,275,30583,276,30570,274,30557,268,30546,280,30534,281,30522,285,30508,280,30496,283,30484,284,30471,283,30458,282,30446,284,30434,288,30420,279,30407,277,30396,288,30383,287,30371,289,30359,291,30346,290,30333,288,30321,291,30309,293,30296,291,30283,285,30272,296,30258,293,30245,290,30233,291,30221,297,30209,299,30196,295,30182,287,30170,291,30158,293,30145,288,30133,292,30120,295,30107,292,30096,300,30083,298,30071,299,30058,300,30046,303,30033,299,30019,289,30007,296,29996,301,29983,299,29970,300,29958,304,29946,306,29934,308,29921,304,29908,304,29895,306,29883,313,29869,303,29856,304,29844,309,29832,311,29818,307,29805,307,29791,301,29779,306,29768,312,29755,312,29741,309,29729,311,29716,311,29703,313,29689,305,29677,310,29665,315,29652,313,29638,309,29626,315,29613,313,29601,320,29589,322,29575,318,29563,322,29551,326,29538,324,29524,319,29512,324,29499,324,29486,325,29473,322,29460,323,29447,323,29436,329,29422,325,29410,327,29397,327,29383,324,29371,327,29357,323,29345,327,29330,315,29320,329,29306,327,29294,331,29281,330,29269,335,29256,333]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[1.37267,88.62733,0.024,3.21],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.058},\"Min\":{\"x\":-35.1,\"z\":2.365},\"values\":[1.373,88.63,0.02396,3.206]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[1.37267,88.62733,0.024,3.21],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.058},\"Min\":{\"x\":-35.1,\"z\":2.365},\"values\":[1.373,88.63,0.02396,3.206]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 480,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "413cd0920561be7c",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":19667,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3754,548218],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36317,190,36305,187,36293,182,36276,201,36265,194,36251,196,36239,190,36225,198,36212,197,36199,197,36186,198,36175,188,36162,186,36147,199,36134,199,36122,195,36108,200,36096,196,36083,195,36070,197,36055,204,36042,210,36030,202,36019,192,36006,195,35992,195,35981,187,35969,183,35954,194,35942,190,35927,199,35914,198,35902,198,35888,201,35875,204,35862,202,35850,196,35837,198,35823,205,35810,203,35800,189,35786,194,35774,187,35761,187,35746,198,35734,195,35720,200,35707,200,35697,188,35685,178,35669,196,35657,191,35645,188,35632,186,35617,197,35607,185,35592,197,35579,196,35566,198,35555,188,35541,200,35528,200,35516,200,35504,196,35489,205,35477,203,35465,197,35454,191,35442,185,35428,191,35416,188,35403,190,35390,191,35377,195,35365,190,35354,184,35341,183,35328,188,35313,200,35301,195,35290,186,35277,191,35263,197,35251,193,35239,189,35228,179,35213,192,35201,191,35187,198,35175,196,35162,200,35151,189,35138,187,35125,194,35113,186,35101,185,35088,186,35075,186,35062,193,35051,178,35038,183,35025,184,35012,184,35000,180,34986,191,34973,193,34960,196,34948,196,34935,194,34923,190,34910,193,34897,200,34885,193,34872,193,34860,196,34847,194,34836,183,34823,187,34811,189,34798,189,34788,173,34774,188,34761,193,34747,199,34736,188,34724,190,34711,192,34698,195,34687,187,34674,192,34663,182,34648,201,34637,187,34625,188,34612,192,34598,207,34586,197,34574,197,34562,190,34550,188,34537,192,34525,194,34512,195,34499,203,34486,207,34475,195,34464,184,34451,188,34439,186,34426,187,34413,193,34400,200,34388,195,34375,196,34364,191,34351,189,34339,193,34326,197,34313,198,34302,191,34289,190,34276,195,34264,199,34252,195,34240,192,34226,201,34214,194,34201,202,34189,207,34177,194,34165,194,34152,204,34141,192,34129,178,34117,185,34104,192,34092,186,34080,188,34067,187,34055,194,34043,191,34031,185,34018,195,34006,186,33993,192,33981,193,33970,183,33957,182,33944,192,33932,195,33920,197,33907,196,33895,203,33883,190,33871,196,33858,195,33846,192,33834,196,33821,197,33809,199,33797,189,33786,178,33773,184,33761,189,33748,194,33736,194,33724,195,33712,188,33699,200,33687,192,33675,181,33663,188,33650,193,33638,197,33626,194,33614,185,33601,190,33589,192,33577,184,33564,193,33552,188,33540,191,33528,191,33516,184,33503,195,33491,199,33479,194,33466,204,33454,205,33441,209,33428,238,33413,312,33398,376,33385,424,33371,455,33359,475,33346,515,33331,587,33317,670,33304,707,33291,745,33278,773,33265,820,33251,873,33238,914,33225,976,33213,1007,33200,1042,33187,1083,33175,1101,33163,1120,33152,1134,33140,1142,33129,1129,33117,1141,33106,1138,33094,1147,33082,1146,33071,1140,33059,1147,33048,1150,33037,1137,33025,1142,33013,1147,33002,1142,32991,1139,32979,1150,32968,1142,32956,1141,32945,1141,32933,1141,32921,1160,32910,1153,32899,1142,32887,1144,32876,1136,32864,1151,32853,1144,32841,1153,32830,1152,32818,1158,32807,1159,32795,1152,32784,1139,32772,1145,32761,1149,32749,1146,32738,1144,32726,1150,32715,1153,32704,1144,32692,1145,32681,1155,32669,1155,32657,1123,32646,1106,32634,1070,32622,1016,32610,986,32598,961,32586,923,32574,886,32562,856,32550,812,32538,784,32526,756,32513,710,32501,671,32488,627,32476,583,32463,542,32450,517,32437,469,32424,432,32411,406,32397,320,32384,258,32371,241,32359,229,32347,218,32334,218,32322,218,32310,217,32298,223,32286,225,32274,222,32261,217,32249,212,32237,219,32225,213,32213,213,32201,220,32189,226,32176,216,32165,226,32153,231,32140,225,32128,227,32116,232,32103,217,32092,225,32079,227,32067,226,32055,231,32043,234,32031,236,32019,234,32007,237,31994,226,31982,233,31970,236,31957,228,31945,221,31933,229,31921,231,31909,230,31897,239,31885,240,31872,232,31860,229,31848,232,31835,234,31824,244,31812,245,31800,246,31788,249,31775,246,31763,243,31751,244,31738,240,31725,229,31714,245,31702,241,31689,237,31678,251,31666,253,31653,253,31641,244,31629,248,31616,243,31604,242,31591,239,31580,251,31568,250,31556,251,31543,251,31531,252,31519,248,31506,247,31494,244,31482,247,31470,245,31457,244,31446,256,31434,260,31422,255,31408,242,31396,239,31385,250,31372,244,31360,246,31347,239,31336,254,31324,257,31312,260,31299,262,31287,257,31274,257,31262,257,31250,258,31237,256,31225,258,31212,257,31200,261,31188,261,31176,261,31164,263,31151,264,31139,266,31127,266,31115,268,31102,265,31089,263,31077,263,31065,270,31052,262,31039,258,31028,265,31016,270,31004,270,30991,268,30979,270,30967,273,30954,270,30941,265,30929,265,30917,265,30905,276,30893,274,30881,274,30868,273,30855,269,30842,262,30831,274,30818,270,30806,271,30794,274,30783,281,30770,276,30757,277,30745,278,30733,279,30720,277,30708,277,30696,280,30683,279,30671,278,30658,272,30646,275,30634,281,30621,277,30609,283,30596,277,30583,278,30572,283,30559,286,30547,288,30534,287,30522,287,30508,279,30497,287,30484,285,30471,285,30459,288,30447,290,30433,285,30421,286,30407,279,30395,283,30383,287,30370,282,30357,277,30344,278,30333,288,30321,287,30308,287,30296,290,30284,294,30271,295,30259,296,30246,294,30232,287,30221,294,30208,292,30195,289,30182,285,30170,293,30157,286,30146,299,30133,294,30120,294,30108,294,30096,300,30083,299,30070,293,30057,291,30045,293,30032,294,30020,297,30008,301,29995,301,29983,303,29970,296,29958,300,29944,296,29933,302,29921,306,29907,303,29896,309,29881,301,29868,300,29856,304,29843,304,29831,308,29817,304,29804,298,29792,305,29778,299,29767,307,29755,314,29741,311,29728,309,29714,304,29702,306,29689,306,29676,303,29665,314,29652,314,29639,316,29626,315,29613,314,29600,312,29587,314,29575,318,29562,315,29549,316,29536,317,29524,317,29511,317,29499,321,29485,316,29472,317,29459,315,29448,325,29435,323,29422,324,29409,323,29396,323,29380,310,29368,315,29357,320,29345,324,29332,324,29318,320,29306,323,29293,322,29280,324,29265,316,29253,318]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9156833,-89.08432,-0.016,3.42],\"visualizationValues\":{\"Max\":{\"x\":35.51,\"z\":2.849},\"Min\":{\"x\":-35.14,\"z\":3.978},\"values\":[-0.9157,-89.08,-0.01598,3.417]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9156833,-89.08306,-0.016,3.42],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":2.848},\"Min\":{\"x\":-35.14,\"z\":3.979},\"values\":[-0.9169,-89.08,-0.016,3.416]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "0f918d658a349b9c",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":19896,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3766,102904],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,185,36304,190,36293,182,36277,194,36265,194,36254,183,36240,185,36227,188,36213,194,36200,194,36186,199,36175,188,36163,186,36146,203,36134,199,36125,179,36108,199,36095,201,36084,191,36070,194,36057,199,36042,204,36031,198,36019,191,36006,192,35992,196,35981,188,35969,182,35956,182,35941,193,35926,205,35914,203,35903,188,35888,199,35879,180,35863,194,35849,200,35837,198,35825,190,35811,196,35802,178,35787,189,35774,187,35761,191,35746,201,35733,202,35720,200,35710,187,35695,195,35684,188,35670,193,35657,194,35644,195,35631,191,35619,190,35608,178,35592,193,35580,191,35569,181,35556,186,35542,190,35529,196,35517,193,35504,192,35492,187,35479,194,35466,193,35454,191,35440,197,35427,201,35416,192,35403,190,35391,185,35378,191,35365,191,35354,180,35340,190,35327,190,35313,202,35301,198,35288,198,35275,199,35263,197,35250,200,35238,198,35227,188,35213,193,35201,189,35189,187,35176,188,35163,191,35151,189,35138,189,35125,195,35113,188,35100,188,35089,180,35075,186,35062,191,35049,193,35038,183,35025,183,35013,178,35000,184,34986,190,34973,193,34961,192,34948,193,34934,200,34923,190,34912,179,34897,196,34885,195,34872,199,34860,191,34847,198,34835,193,34823,194,34811,189,34798,191,34786,192,34773,191,34761,190,34748,195,34738,178,34725,183,34712,184,34699,191,34687,182,34675,185,34662,189,34649,193,34638,183,34625,180,34613,184,34599,198,34587,189,34576,181,34563,184,34550,185,34537,190,34525,187,34513,190,34499,199,34486,208,34475,197,34463,187,34451,186,34438,190,34426,189,34413,194,34400,195,34388,199,34376,192,34364,192,34352,183,34339,192,34327,183,34314,193,34301,197,34288,199,34277,194,34265,188,34252,188,34239,197,34226,204,34215,191,34203,183,34189,197,34177,194,34165,188,34153,192,34141,186,34129,180,34117,185,34104,191,34092,183,34079,197,34067,197,34055,195,34042,194,34031,183,34017,199,34006,187,33994,183,33981,188,33969,187,33957,182,33944,194,33932,198,33919,198,33907,197,33895,193,33883,197,33871,195,33859,185,33846,194,33834,200,33821,199,33809,197,33797,200,33785,187,33773,181,33761,191,33748,198,33736,199,33724,192,33712,189,33700,185,33687,191,33675,188,33663,187,33650,187,33638,195,33626,195,33613,197,33601,189,33589,181,33577,183,33565,187,33552,194,33540,189,33528,192,33516,186,33503,192,33491,190,33478,200,33466,202,33454,204,33441,210,33428,233,33413,313,33398,388,33385,419,33372,443,33359,477,33346,502,33332,577,33316,673,33303,714,33291,740,33278,773,33265,823,33251,889,33239,910,33226,952,33213,992,33200,1031,33187,1079,33175,1103,33163,1118,33151,1140,33140,1141,33128,1139,33117,1139,33106,1135,33094,1138,33082,1146,33071,1150,33059,1160,33048,1154,33036,1156,33025,1146,33014,1128,33002,1141,32990,1148,32979,1138,32968,1141,32956,1140,32945,1138,32933,1141,32922,1154,32910,1159,32899,1146,32887,1148,32876,1143,32864,1144,32853,1159,32841,1152,32830,1153,32818,1150,32807,1148,32795,1148,32784,1147,32772,1136,32761,1148,32749,1146,32738,1146,32726,1150,32715,1155,32704,1156,32692,1150,32681,1149,32669,1151,32658,1136,32646,1111,32634,1082,32622,1032,32610,1005,32598,967,32586,936,32574,902,32562,861,32550,824,32538,778,32526,760,32513,723,32501,681,32488,637,32476,593,32463,545,32450,510,32437,474,32424,442,32411,400,32398,327,32384,267,32371,234,32359,228,32347,217,32335,220,32322,214,32310,215,32298,212,32286,217,32274,217,32261,213,32249,206,32237,214,32225,219,32213,214,32201,218,32189,218,32176,213,32165,226,32152,229,32140,218,32128,225,32116,229,32103,213,32091,214,32079,220,32067,225,32055,231,32043,233,32031,234,32019,232,32007,237,31994,227,31982,234,31970,233,31957,227,31945,217,31933,232,31921,229,31909,230,31897,232,31884,234,31872,234,31860,233,31847,229,31836,235,31824,241,31811,241,31799,244,31787,242,31775,239,31763,242,31750,238,31738,235,31725,229,31714,241,31701,240,31689,239,31677,244,31665,250,31653,250,31641,244,31628,244,31616,242,31604,243,31591,238,31580,251,31568,251,31555,246,31543,248,31531,250,31519,250,31506,247,31494,241,31482,247,31470,244,31457,244,31446,258,31434,259,31421,253,31408,238,31396,236,31385,252,31372,243,31360,245,31347,241,31336,254,31324,258,31311,258,31299,261,31286,256,31274,254,31261,251,31249,257,31237,255,31225,257,31212,252,31200,258,31188,259,31175,257,31163,261,31151,263,31139,268,31127,268,31115,269,31102,265,31089,257,31077,262,31065,268,31052,261,31039,254,31028,262,31016,265,31003,266,30991,267,30979,268,30967,270,30954,268,30941,264,30929,261,30916,262,30905,273,30893,272,30881,274,30868,272,30855,267,30842,265,30831,271,30818,269,30806,274,30794,272,30782,279,30770,276,30757,272,30744,272,30732,274,30720,277,30708,277,30696,281,30684,281,30671,277,30658,271,30645,272,30634,277,30620,273,30609,278,30596,280,30584,280,30571,280,30559,282,30547,286,30534,285,30521,284,30509,286,30496,281,30483,283,30470,277,30458,281,30446,284,30434,288,30421,287,30407,279,30396,284,30383,285,30370,284,30357,281,30345,283,30333,289,30320,287,30308,288,30296,290,30283,291,30271,292,30259,296,30246,296,30233,288,30220,289,30208,294,30195,290,30182,286,30170,288,30157,290,30145,293,30134,298,30120,294,30107,292,30096,297,30082,293,30069,291,30057,290,30045,296,30033,296,30020,298,30008,300,29995,298,29983,303,29969,294,29957,297,29945,301,29933,303,29921,306,29907,302,29895,307,29882,302,29868,297,29856,303,29843,302,29831,308,29818,307,29803,293,29792,305,29778,302,29767,308,29755,312,29741,306,29728,306,29714,304,29702,305,29689,304,29675,299,29664,311,29652,315,29639,314,29626,313,29613,311,29599,308,29587,312,29575,316,29561,313,29548,311,29536,315,29523,313,29511,316,29498,319,29484,311,29472,316,29460,321,29448,325,29433,315,29421,320,29408,321,29395,319,29381,312,29368,313,29355,315,29343,318,29332,324,29319,323,29306,323,29292,318,29281,327,29265,314,29253,318]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9207383,-89.07926,-0.0161,3.41],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":2.835},\"Min\":{\"x\":-35.13,\"z\":3.97},\"values\":[-0.9207,-89.08,-0.01607,3.406]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9206783,-89.07932,-0.0161,3.41],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":2.835},\"Min\":{\"x\":-35.13,\"z\":3.97},\"values\":[-0.9207,-89.08,-0.01607,3.406]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "e7239326f97c4324",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia piccola 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":20113,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3776,911572],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36319,179,36304,193,36291,191,36279,188,36265,192,36252,190,36238,198,36226,191,36215,183,36199,196,36186,198,36174,192,36163,185,36148,195,36135,194,36124,184,36110,191,36097,190,36084,191,36070,195,36056,204,36043,203,36030,200,36018,198,36005,198,35992,197,35981,186,35970,177,35956,184,35942,191,35927,199,35915,197,35903,190,35888,199,35878,184,35866,181,35850,195,35837,197,35827,181,35813,188,35801,181,35788,180,35774,187,35760,193,35747,196,35734,195,35720,200,35708,196,35694,205,35683,191,35669,195,35656,200,35644,193,35631,193,35620,181,35609,173,35592,197,35580,195,35569,183,35557,176,35542,190,35531,184,35519,177,35504,194,35493,183,35480,185,35465,198,35453,196,35440,195,35428,195,35416,187,35402,196,35390,196,35377,194,35365,194,35353,186,35341,187,35327,193,35313,198,35303,187,35290,189,35275,201,35263,196,35251,194,35238,199,35227,188,35214,187,35202,184,35190,181,35176,190,35163,193,35152,183,35139,184,35126,183,35113,187,35101,182,35088,187,35075,188,35063,181,35050,188,35037,187,35024,188,35013,181,34999,186,34986,194,34973,196,34961,192,34948,190,34935,196,34923,189,34911,183,34897,199,34884,200,34872,193,34860,192,34847,193,34836,189,34823,191,34811,183,34799,180,34787,179,34773,191,34761,189,34748,191,34737,185,34724,186,34712,183,34700,183,34687,184,34675,185,34662,189,34649,195,34637,189,34624,191,34612,188,34599,197,34588,182,34575,183,34563,185,34551,181,34539,178,34526,179,34513,188,34499,203,34487,201,34475,192,34463,187,34451,185,34439,184,34426,189,34414,188,34401,187,34388,196,34376,186,34364,191,34352,185,34339,188,34328,179,34314,187,34301,198,34288,204,34276,195,34265,186,34252,186,34239,202,34226,207,34214,198,34203,183,34191,183,34177,192,34165,188,34153,190,34141,189,34129,187,34116,187,34104,187,34092,186,34079,197,34067,187,34054,199,34042,198,34031,182,34017,199,34006,188,33994,185,33981,188,33969,185,33957,182,33944,190,33932,193,33920,189,33907,199,33895,190,33883,194,33871,191,33859,185,33846,192,33833,202,33821,200,33809,195,33797,198,33785,188,33773,186,33761,191,33748,193,33736,197,33724,190,33712,191,33700,183,33687,190,33675,183,33663,184,33651,182,33638,189,33626,193,33613,195,33601,192,33590,179,33577,188,33564,191,33552,197,33540,189,33528,189,33516,188,33503,189,33491,191,33479,191,33466,193,33454,199,33441,212,33428,236,33414,284,33398,381,33385,419,33372,441,33359,475,33346,510,33332,566,33317,658,33303,709,33290,748,33278,779,33265,813,33251,876,33239,908,33226,952,33213,986,33200,1036,33188,1072,33175,1104,33163,1116,33151,1138,33140,1134,33128,1149,33117,1134,33105,1142,33094,1131,33083,1130,33071,1138,33059,1157,33048,1158,33036,1144,33025,1143,33014,1135,33002,1148,32991,1147,32979,1142,32968,1137,32956,1136,32945,1130,32933,1136,32922,1159,32910,1154,32899,1153,32887,1141,32876,1149,32864,1143,32853,1155,32841,1143,32830,1154,32818,1144,32807,1139,32795,1135,32784,1143,32772,1144,32761,1149,32749,1147,32738,1140,32726,1147,32715,1143,32704,1151,32692,1159,32681,1157,32669,1149,32657,1133,32646,1109,32634,1077,32622,1031,32610,993,32598,958,32586,933,32574,899,32562,870,32550,828,32538,786,32525,743,32513,720,32501,688,32488,642,32475,577,32463,545,32450,505,32437,480,32424,434,32411,410,32398,336,32384,268,32371,234,32359,224,32347,224,32335,222,32322,213,32310,213,32298,215,32286,218,32274,216,32261,213,32249,208,32237,219,32225,215,32213,215,32201,215,32188,216,32176,214,32165,227,32152,226,32140,217,32128,222,32116,225,32103,213,32091,211,32079,219,32067,226,32055,228,32043,230,32031,234,32019,228,32007,235,31994,231,31982,235,31970,230,31957,227,31945,219,31933,228,31921,229,31909,230,31897,234,31884,235,31872,234,31860,231,31847,227,31835,232,31824,242,31811,238,31799,242,31787,236,31774,233,31763,240,31750,240,31738,237,31725,233,31714,242,31701,239,31689,237,31677,243,31665,247,31653,250,31641,244,31628,243,31616,239,31604,244,31591,239,31580,254,31568,252,31555,247,31543,248,31531,249,31519,251,31506,245,31494,241,31482,248,31469,242,31457,244,31446,257,31434,256,31421,254,31408,236,31395,232,31384,247,31371,240,31359,242,31347,238,31335,250,31324,257,31311,259,31299,261,31286,254,31274,251,31261,252,31249,256,31237,255,31225,256,31212,253,31200,255,31188,257,31176,259,31164,263,31151,259,31139,267,31127,267,31115,268,31102,265,31089,258,31077,262,31065,269,31052,261,31039,254,31027,257,31015,261,31003,263,30991,265,30979,269,30966,268,30954,268,30941,263,30929,262,30916,261,30905,270,30893,272,30880,272,30868,274,30855,266,30843,269,30831,272,30819,273,30806,273,30794,272,30782,277,30770,277,30757,273,30744,272,30732,270,30720,274,30708,277,30696,281,30683,279,30671,278,30658,270,30645,268,30633,276,30620,271,30608,277,30596,279,30584,281,30572,284,30559,283,30547,288,30534,282,30521,282,30509,286,30496,279,30484,284,30471,281,30458,281,30446,282,30434,287,30421,288,30408,282,30396,284,30383,285,30370,284,30357,281,30345,283,30333,287,30320,286,30308,288,30296,288,30283,289,30271,293,30259,296,30246,296,30233,289,30220,289,30209,295,30195,290,30182,287,30170,290,30157,290,30145,289,30133,298,30120,295,30107,293,30096,297,30082,293,30069,286,30057,292,30045,297,30033,297,30020,300,30007,297,29995,298,29983,304,29969,295,29957,296,29945,300,29933,301,29921,307,29907,303,29895,306,29881,302,29867,294,29856,303,29843,302,29831,308,29818,307,29803,294,29792,304,29778,301,29766,307,29754,310,29740,304,29727,305,29714,302,29702,305,29689,303,29675,300,29664,311,29652,313,29638,311,29626,312,29613,311,29599,310,29587,311,29575,315,29561,311,29548,310,29536,315,29523,314,29511,320,29498,318,29483,310,29471,314,29459,318,29448,326,29433,314,29421,322,29408,321,29395,316,29380,310,29368,314,29356,316,29343,317,29331,322,29318,323,29304,317,29292,319,29281,328,29265,312,29253,320]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9293227,-89.07068,-0.0162,3.4],\"visualizationValues\":{\"Max\":{\"x\":35.53,\"z\":2.819},\"Min\":{\"x\":-35.13,\"z\":3.966},\"values\":[-0.9293,-89.07,-0.01622,3.396]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9292859,-89.07072,-0.0162,3.4],\"visualizationValues\":{\"Max\":{\"x\":35.53,\"z\":2.82},\"Min\":{\"x\":-35.13,\"z\":3.966},\"values\":[-0.9293,-89.07,-0.01622,3.396]}}]}]}",
        "payloadType": "json",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "81c2e60b6744e96f"
            ]
        ]
    },
    {
        "id": "ed3d79337cc829de",
        "type": "link out",
        "z": "c4f35bb0ae2de5ca",
        "name": "profilo grandissimo",
        "mode": "link",
        "links": [
            "3aa5e7b308f3148f"
        ],
        "x": 355,
        "y": 140,
        "wires": []
    },
    {
        "id": "1940c3d7537fdc15",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26140,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4081,647773],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36331,121,36320,114,36308,107,36294,112,36281,112,36269,106,36254,119,36240,123,36225,130,36213,126,36200,128,36187,126,36175,123,36161,126,36149,122,36138,113,36124,118,36112,112,36097,123,36085,117,36073,113,36058,121,36046,119,36033,117,36021,113,36006,125,35992,129,35980,125,35967,124,35955,121,35943,116,35928,127,35918,111,35904,113,35890,121,35876,125,35865,116,35850,127,35837,126,35826,118,35812,120,35800,114,35787,114,35774,116,35759,127,35746,128,35734,124,35721,123,35709,116,35694,129,35680,132,35668,130,35658,113,35644,120,35630,124,35617,124,35604,122,35591,124,35578,127,35567,121,35553,125,35540,129,35527,130,35515,128,35503,122,35490,126,35478,120,35465,121,35454,113,35439,127,35427,118,35413,129,35403,111,35389,121,35376,124,35363,123,35351,121,35337,128,35325,124,35311,130,35299,130,35284,142,35273,135,35260,136,35248,127,35235,133,35223,126,35211,126,35199,117,35185,129,35172,128,35160,128,35148,121,35134,131,35122,127,35109,124,35097,121,35084,123,35073,113,35059,118,35047,117,35034,122,35021,121,35009,118,34995,123,34981,136,34969,131,34957,129,34943,138,34930,142,34919,126,34905,133,34894,127,34880,133,34868,134,34856,125,34845,113,34831,126,34818,133,34806,129,34793,135,34780,136,34768,131,34756,127,34742,142,34730,139,34719,123,34707,124,34696,114,34682,121,34669,125,34656,135,34642,142,34630,145,34617,142,34606,132,34594,132,34581,131,34570,117,34557,124,34470,819,34457,832,34445,836,34426,899,34402,1020,34371,1206,34347,1331,34318,1498,34282,1742,34260,1851,34249,1856,34237,1856,34225,1871,34213,1879,34202,1876,34189,1889,34178,1896,34167,1890,34157,1882,34146,1881,34134,1890,34123,1884,34113,1877,34103,1868,34092,1866,34081,1866,34069,1874,34058,1878,34046,1882,34035,1883,34024,1881,34012,1893,34001,1892,33990,1901,33979,1895,33969,1888,33959,1877,33948,1868,33937,1871,33924,1895,33913,1890,33902,1896,33891,1893,33880,1889,33868,1904,33858,1895,33847,1890,33836,1889,33825,1887,33815,1883,33804,1876,33793,1880,33781,1896,33769,1899,33759,1894,33748,1888,33737,1894,33725,1897,33714,1897,33704,1883,33694,1876,33682,1889,33671,1885,33660,1881,33649,1890,33638,1882,33626,1902,33615,1903,33604,1902,33594,1890,33583,1886,33572,1890,33560,1898,33549,1898,33539,1877,33527,1892,33516,1893,33505,1898,33495,1886,33483,1901,33472,1904,33461,1903,33450,1905,33439,1913,33428,1908,33417,1905,33406,1901,33395,1897,33384,1901,33373,1901,33362,1903,33352,1901,33341,1898,33330,1896,33319,1905,33308,1908,33297,1911,33286,1904,33275,1896,33264,1894,33253,1894,33243,1890,33231,1895,33220,1903,33209,1905,33198,1905,33188,1898,33176,1904,33166,1902,33155,1905,33144,1907,33133,1908,33122,1899,33111,1897,33100,1893,33089,1893,33078,1898,33067,1899,33056,1901,33045,1900,33034,1901,33023,1913,33012,1911,33002,1905,32991,1910,32980,1895,32969,1896,32958,1893,32947,1900,32936,1899,32925,1912,32914,1920,32903,1927,32892,1930,32881,1935,32870,1928,32859,1916,32848,1910,32838,1901,32827,1907,32816,1910,32805,1909,32794,1918,32783,1918,32772,1918,32761,1923,32750,1922,32739,1923,32728,1920,32717,1915,32706,1908,32695,1905,32685,1913,32674,1908,32663,1914,32652,1916,32641,1920,32630,1920,32619,1926,32608,1926,32597,1927,32586,1928,32575,1917,32564,1914,32553,1918,32542,1913,32532,1913,32521,1916,32510,1916,32499,1920,32488,1921,32477,1924,32466,1931,32455,1929,32444,1925,32434,1934,32423,1925,32411,1909,32400,1914,32390,1926,32379,1930,32368,1920,32357,1921,32346,1935,32335,1938,32325,1938,32314,1936,32303,1939,32292,1933,32281,1928,32270,1929,32259,1927,32248,1931,32237,1932,32226,1927,32215,1935,32205,1939,32194,1943,32183,1947,32172,1940,32161,1942,32150,1929,32138,1916,32128,1925,32117,1929,32106,1931,32095,1926,32084,1929,32073,1930,32063,1941,32052,1940,32041,1941,32030,1941,32019,1939,32008,1935,31997,1934,31985,1919,31974,1923,31963,1931,31952,1926,31942,1941,31931,1941,31919,1932,31909,1949,31898,1948,31888,1955,31876,1949,31865,1942,31854,1935,31842,1926,31832,1935,31821,1942,31810,1940,31799,1949,31788,1943,31777,1945,31766,1943,31756,1951,31745,1957,31734,1956,31723,1960,31712,1952,31700,1943,31690,1949,31679,1951,31668,1949,31656,1944,31646,1948,31635,1954,31624,1954,31613,1959,31602,1956,31591,1956,31580,1952,31568,1946,31557,1945,31546,1944,31535,1945,31524,1947,31514,1950,31503,1952,31492,1958,31482,1968,31471,1964,31460,1965,31449,1963,31437,1950,31425,1941,31414,1940,31403,1941,31392,1943,31382,1950,31371,1957,31361,1960,31350,1961,31338,1960,31328,1965,31317,1965,31306,1966,31294,1964,31282,1958,31271,1954,31260,1955,31248,1945,31236,1935,31216,1852,31190,1712,31169,1619,31150,1548,31133,1492,31114,1423,31095,1354,31079,1308,31058,1225,31040,1163,31022,1113,31002,1034,30973,881,30960,869,30858,187,30850,224,30839,232,30827,241,30813,228,30801,230,30790,238,30777,236,30765,235,30751,226,30740,237,30727,233,30716,241,30704,242,30690,232,30678,236,30666,240,30653,235,30641,238,30629,242,30616,236,30603,233,30591,242,30578,234,30565,236,30553,242,30541,242,30529,251,30515,239,30503,239,30491,244,30478,244,30465,243,30453,248,30440,241,30427,237,30416,248,30403,250,30391,252,30378,248,30365,244,30353,253,30341,252,30328,249,30315,249,30303,257,30291,256,30278,252,30265,253,30251,244,30239,245,30226,246,30214,248,30201,245,30189,251,30176,245,30164,254,30151,251,30139,251,30126,251,30114,256,30101,254,30090,260,30076,257,30064,257,30051,257,30039,259,30026,258,30014,260,30000,252,29989,261,29975,255,29962,254,29951,261,29938,257,29925,259,29913,260,29899,256,29887,259,29876,269,29862,265,29849,263,29836,265,29824,267,29812,275,29800,277,29788,283,29772,269,29760,272,29746,266,29735,278,29723,279,29709,278,29696,275,29683,275,29671,279,29657,275,29644,274,29631,271,29620,281,29607,280,29595,284,29581,282,29567,273,29556,284,29543,286,29531,288,29518,290,29505,287,29491,285,29479,289,29466,287,29451,279,29440,286,29427,285,29414,284,29401,285,29388,285,29375,286,29363,289,29352,299,29339,298,29327,302,29312,291,29299,294,29288,300,29275,299,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "5a66776f1f380f89",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26323,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4091,267183],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36328,135,36314,139,36301,142,36289,135,36276,135,36265,128,36251,132,36238,134,36225,130,36211,139,36199,134,36187,126,36175,125,36158,143,36146,137,36134,131,36122,126,36110,123,36095,135,36084,125,36069,134,36055,137,36042,137,36032,122,36018,129,36004,135,35992,132,35979,129,35966,131,35953,130,35938,139,35928,125,35915,125,35903,121,35889,125,35877,122,35862,133,35849,133,35835,137,35821,145,35811,124,35797,133,35785,127,35771,131,35759,130,35744,137,35731,139,35719,132,35707,128,35693,133,35680,132,35668,130,35653,139,35642,128,35628,134,35616,131,35601,140,35590,131,35578,129,35565,129,35550,143,35536,151,35527,131,35514,132,35502,127,35487,142,35476,132,35463,133,35451,132,35438,134,35425,131,35413,129,35402,117,35387,134,35374,134,35362,133,35348,140,35336,137,35323,140,35311,134,35297,139,35285,135,35272,136,35259,138,35249,126,35235,133,35222,137,35209,137,35198,128,35186,122,35172,132,35160,127,35146,131,35134,129,35121,128,35107,137,35096,129,35083,132,35070,135,35058,129,35046,128,35031,137,35019,137,35006,138,34993,144,34981,136,34969,131,34957,126,34945,124,34931,131,34917,140,34905,137,34892,140,34880,137,34868,134,34854,139,34841,148,34829,146,34817,141,34805,136,34792,140,34780,133,34769,126,34756,132,34742,142,34729,145,34717,141,34703,153,34691,150,34680,140,34669,130,34655,141,34642,141,34631,130,34620,123,34607,129,34594,131,34581,131,34568,142,34556,132,34544,131,34531,137,34518,138,34506,138,34493,144,34481,139,34469,134,34457,134,34444,136,34431,140,34419,135,34407,134,34394,136,34382,134,34368,144,34357,138,34344,144,34331,147,34320,128,34307,136,34294,136,34281,145,34270,133,34257,139,34245,138,34232,135,34219,144,34207,143,34195,138,34182,144,34170,139,34158,139,34146,124,34133,139,34121,139,34108,139,34096,133,34083,142,34071,140,34059,143,34047,134,34034,140,34022,143,34009,144,33998,139,33985,136,33973,142,33961,135,33948,141,33935,150,33923,143,33911,141,33899,146,33886,147,33874,145,33863,135,33850,140,33838,139,33825,142,33813,143,33801,142,33788,145,33776,144,33764,141,33752,136,33739,144,33726,149,33714,145,33702,146,33690,137,33678,132,33666,135,33654,133,33641,132,33629,138,33616,146,33604,139,33592,140,33580,133,33568,118,33524,790,33512,793,33499,815,33487,826,33474,849,33458,958,33440,1106,33425,1198,33410,1280,33395,1359,33381,1433,33367,1515,33350,1658,33334,1791,33321,1848,33309,1867,33298,1872,33287,1878,33276,1882,33265,1877,33254,1877,33243,1886,33232,1888,33221,1886,33210,1892,33199,1892,33188,1884,33177,1881,33166,1884,33155,1885,33144,1882,33133,1891,33122,1889,33111,1892,33100,1901,33089,1894,33078,1896,33067,1888,33056,1890,33045,1898,33035,1888,33024,1874,33013,1885,33002,1892,32991,1898,32980,1901,32969,1898,32958,1898,32947,1897,32936,1897,32925,1898,32914,1894,32903,1894,32892,1891,32881,1895,32870,1898,32859,1897,32849,1894,32838,1901,32827,1899,32816,1905,32805,1900,32794,1904,32783,1910,32772,1904,32761,1893,32750,1893,32739,1893,32728,1907,32717,1898,32706,1903,32695,1902,32684,1901,32674,1905,32663,1911,32652,1911,32641,1919,32630,1911,32619,1904,32608,1905,32597,1901,32586,1904,32575,1908,32564,1906,32553,1910,32542,1909,32531,1910,32521,1912,32510,1913,32499,1916,32488,1909,32477,1904,32466,1900,32455,1907,32444,1917,32433,1908,32422,1908,32411,1920,32401,1927,32390,1927,32379,1927,32368,1920,32357,1921,32346,1929,32335,1922,32324,1910,32313,1899,32302,1911,32291,1907,32280,1911,32269,1912,32259,1922,32248,1939,32237,1937,32226,1930,32215,1918,32204,1924,32193,1917,32182,1909,32171,1915,32160,1918,32149,1921,32139,1934,32128,1933,32117,1936,32106,1933,32095,1932,32084,1937,32073,1925,32062,1922,32051,1925,32040,1915,32028,1910,32018,1919,32007,1927,31997,1936,31986,1937,31974,1932,31964,1935,31952,1930,31941,1932,31930,1933,31919,1921,31908,1921,31897,1928,31886,1919,31875,1926,31865,1936,31854,1943,31843,1944,31832,1944,31821,1948,31810,1946,31799,1939,31788,1940,31777,1940,31766,1941,31755,1942,31744,1935,31733,1937,31722,1939,31711,1947,31701,1949,31689,1946,31679,1953,31668,1949,31657,1951,31645,1947,31634,1935,31623,1945,31612,1946,31601,1939,31591,1948,31580,1952,31569,1958,31558,1960,31547,1951,31536,1959,31526,1962,31514,1950,31502,1945,31491,1941,31481,1952,31470,1951,31459,1951,31448,1954,31437,1948,31426,1959,31416,1962,31404,1957,31394,1964,31382,1951,31371,1951,31360,1949,31349,1954,31338,1955,31326,1951,31315,1950,31304,1953,31293,1952,31283,1964,31271,1955,31261,1963,31250,1967,31238,1959,31227,1960,31215,1951,31203,1946,31193,1951,31181,1950,31170,1946,31159,1948,31149,1963,31139,1967,31128,1972,31117,1971,31106,1971,31094,1965,31082,1959,31070,1955,31059,1957,31048,1958,31037,1957,31027,1963,31014,1955,31005,1974,30995,1983,30984,1983,30972,1975,30960,1966,30949,1968,30938,1967,30925,1958,30914,1958,30904,1963,30892,1961,30880,1955,30870,1963,30861,1977,30850,1981,30840,1984,30828,1982,30817,1980,30805,1976,30793,1970,30780,1959,30770,1967,30760,1970,30747,1961,30737,1971,30726,1966,30715,1970,30705,1980,30694,1982,30684,1988,30672,1979,30661,1984,30648,1972,30636,1967,30627,1982,30615,1975,30602,1968,30592,1979,30581,1980,30569,1976,30559,1985,30548,1989,30537,1988,30527,1997,30513,1984,30501,1975,30489,1974,30478,1978,30468,1987,30457,1986,30444,1979,30434,1983,30425,2001,30413,1994,30399,1978,30387,1979,30374,1969,30364,1972,30352,1969,30341,1976,30331,1980,30322,1995,30309,1985,30296,1976,30272,1899,30278,2007,30188,1535,30161,1447,30134,1354,30108,1268,30075,1145,30040,1011,30015,937,30000,919,29872,247,29863,272,29849,263,29836,262,29823,265,29810,265,29798,267,29784,260,29772,269,29759,264,29746,268,29736,279,29723,280,29708,271,29696,275,29681,265,29669,268,29658,277,29644,273,29630,269,29619,275,29605,273,29593,276,29580,275,29566,270,29554,273,29541,277,29530,286,29516,280,29503,280,29491,282,29478,284,29465,281,29452,283,29438,277,29428,288,29414,287,29401,286,29387,280,29376,290,29363,288,29348,280,29337,287,29323,281,29311,286,29298,288,29286,293,29273,291,29260,292,29248,295]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.11872,-75.88127,-0.252,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.864},\"Min\":{\"x\":-35.19,\"z\":19.67},\"values\":[-14.12,-75.88,-0.2515,10.82]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.11037,-75.88963,-0.251,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.872},\"Min\":{\"x\":-35.19,\"z\":19.67},\"values\":[-14.11,-75.89,-0.2514,10.82]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "f776e0fd35f10180",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27029,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4127,620825],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36331,122,36319,119,36305,123,36293,117,36282,110,36272,96,36256,106,36242,112,36228,119,36214,123,36202,118,36190,112,36177,112,36165,106,36150,117,36138,115,36125,112,36112,112,36100,108,36086,112,36072,116,36061,110,36045,122,36033,120,36023,105,36007,119,35994,119,35982,112,35967,123,35954,123,35941,123,35929,118,35917,114,35904,117,35891,116,35879,112,35865,116,35852,113,35841,107,35827,109,35813,113,35798,124,35788,113,35776,105,35762,113,35749,111,35736,112,35723,112,35710,109,35696,116,35684,110,35669,126,35657,117,35646,107,35633,105,35618,116,35605,117,35592,120,35579,123,35566,124,35554,118,35541,123,35530,113,35517,115,35504,113,35492,108,35478,116,35465,118,35453,118,35437,136,35427,122,35414,121,35402,119,35390,114,35376,123,35363,126,35350,129,35338,122,35326,120,35312,124,35300,121,35287,123,35275,121,35262,119,35250,115,35237,115,35223,127,35211,120,35201,107,35187,116,35174,116,35161,119,35148,121,35136,113,35123,117,35110,121,35098,117,35084,123,35073,116,35060,112,35050,97,35034,120,35022,115,35008,124,34996,116,34983,119,34971,118,34959,115,34946,117,34932,123,34920,120,34907,119,34896,109,34882,118,34868,127,34855,132,34844,122,34832,119,34819,123,34806,125,34794,121,34784,102,34686,813,34677,791,34662,817,34647,844,34615,1016,34579,1226,34546,1413,34509,1635,34478,1812,34462,1848,34449,1865,34438,1863,34428,1859,34416,1859,34405,1858,34393,1869,34381,1874,34370,1874,34361,1856,34349,1861,34336,1881,34326,1869,34315,1868,34304,1859,34292,1868,34283,1850,34271,1858,34259,1869,34246,1881,34236,1873,34225,1872,34214,1865,34203,1869,34191,1871,34180,1875,34169,1869,34157,1876,34146,1875,34136,1868,34125,1866,34114,1864,34102,1879,34092,1871,34080,1881,34069,1881,34059,1863,34047,1872,34036,1875,34025,1872,34015,1867,34004,1865,33992,1875,33980,1881,33968,1891,33958,1888,33947,1881,33936,1881,33925,1876,33915,1872,33903,1881,33893,1872,33882,1873,33871,1869,33859,1880,33848,1880,33837,1876,33826,1874,33814,1890,33803,1893,33792,1889,33781,1885,33771,1880,33760,1881,33749,1876,33738,1877,33727,1880,33715,1887,33704,1883,33693,1881,33682,1880,33671,1889,33660,1889,33649,1890,33638,1893,33627,1885,33617,1870,33606,1869,33595,1867,33584,1860,33572,1883,33561,1889,33550,1886,33539,1890,33527,1891,33516,1895,33505,1900,33494,1898,33483,1899,33473,1889,33462,1885,33451,1886,33440,1876,33430,1861,33419,1871,33407,1882,33396,1888,33385,1897,33374,1888,33363,1889,33352,1893,33341,1900,33330,1888,33319,1892,33308,1890,33297,1890,33286,1893,33275,1892,33264,1898,33253,1898,33242,1904,33231,1906,33220,1910,33210,1894,33199,1893,33188,1890,33177,1892,33166,1893,33155,1885,33144,1886,33133,1894,33122,1905,33111,1911,33100,1902,33089,1902,33078,1905,33067,1897,33056,1897,33045,1894,33035,1883,33024,1886,33013,1890,33002,1880,32991,1890,32980,1897,32969,1897,32958,1904,32947,1906,32936,1902,32925,1902,32914,1901,32903,1901,32892,1898,32881,1897,32870,1893,32859,1906,32849,1900,32838,1904,32827,1904,32816,1905,32805,1911,32794,1908,32783,1910,32772,1906,32761,1902,32750,1902,32739,1899,32728,1907,32717,1906,32706,1903,32695,1913,32685,1917,32674,1913,32663,1909,32652,1910,32641,1914,32630,1908,32619,1907,32608,1892,32597,1908,32586,1914,32575,1908,32564,1909,32553,1917,32543,1915,32532,1917,32520,1905,32510,1924,32499,1929,32488,1916,32477,1918,32466,1915,32455,1916,32444,1905,32433,1908,32422,1918,32412,1922,32401,1919,32390,1921,32379,1924,32368,1914,32357,1924,32346,1923,32335,1922,32324,1924,32313,1923,32302,1919,32291,1921,32281,1925,32270,1932,32259,1933,32248,1929,32237,1932,32226,1931,32215,1924,32204,1937,32194,1936,32182,1933,32171,1923,32160,1913,32149,1907,32138,1914,32127,1922,32117,1924,32106,1932,32095,1935,32084,1933,32073,1934,32062,1929,32051,1929,32040,1934,32029,1925,32018,1924,32007,1925,31996,1924,31985,1925,31974,1927,31964,1935,31953,1936,31942,1942,31930,1932,31919,1930,31908,1930,31898,1935,31887,1937,31875,1932,31865,1936,31853,1930,31843,1937,31832,1934,31821,1939,31810,1937,31799,1942,31788,1939,31776,1931,31766,1938,31755,1942,31744,1937,31733,1942,31722,1939,31710,1931,31699,1931,31689,1943,31679,1949,31668,1953,31657,1952,31645,1944,31634,1947,31623,1944,31613,1951,31601,1945,31590,1944,31579,1948,31568,1945,31557,1940,31546,1940,31536,1953,31525,1958,31514,1954,31503,1951,31492,1952,31481,1955,31468,1933,31456,1919,31438,1841,31417,1729,31400,1663,31382,1588,31366,1533,31350,1477,31332,1406,31313,1330,31296,1270,31281,1232,31264,1180,31246,1115,31228,1047,31205,940,31188,882,31175,870,31094,190,31085,217,31074,229,31060,220,31047,215,31036,220,31023,218,31010,217,30998,218,30986,217,30973,215,30961,220,30949,224,30937,222,30924,218,30912,221,30899,222,30888,227,30875,222,30862,220,30849,218,30837,222,30825,222,30812,219,30801,224,30788,226,30776,225,30764,228,30751,227,30739,224,30726,227,30714,229,30702,231,30690,229,30678,232,30665,230,30653,235,30640,231,30628,234,30615,234,30603,235,30589,228,30577,231,30566,242,30553,237,30540,238,30527,234,30515,237,30503,239,30491,245,30477,237,30464,237,30452,238,30440,242,30428,244,30414,239,30401,238,30389,241,30376,238,30364,239,30352,241,30340,247,30327,244,30314,244,30302,244,30290,252,30277,249,30265,252,30251,243,30239,248,30226,244,30214,251,30202,254,30189,249,30176,250,30163,245,30151,252,30139,255,30126,254,30114,253,30101,255,30088,248,30077,261,30065,262,30051,255,30038,252,30025,250,30014,259,30001,257,29988,256,29975,254,29963,255,29950,256,29937,256,29924,251,29912,255,29898,252,29887,258,29873,255,29860,255,29847,253,29835,259,29822,257,29810,261,29797,263,29784,260,29771,262,29759,264,29746,267,29732,261,29720,265,29708,268,29695,268,29683,272,29669,271,29656,270,29642,264,29629,260,29617,267,29605,270,29593,275,29578,266,29567,277,29555,278,29542,278,29530,282,29515,274,29503,277,29490,280,29476,272,29463,271,29451,278,29438,275,29425,275,29413,278,29400,281,29387,278,29374,280,29361,281,29348,281,29335,280,29323,284,29309,278,29297,280,29284,281,29271,281,29258,283,29245,280]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[0.5390239,89.46098,0.00941,10.6],\"visualizationValues\":{\"Max\":{\"x\":35.64,\"z\":10.95},\"Min\":{\"x\":-35.22,\"z\":10.29},\"values\":[0.539,89.46,0.009408,10.62]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[0.5390239,89.46098,0.00941,10.6],\"visualizationValues\":{\"Max\":{\"x\":35.64,\"z\":10.95},\"Min\":{\"x\":-35.22,\"z\":10.29},\"values\":[0.539,89.46,0.009408,10.62]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "aae51931c0388f37",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27313,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4142,537067],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36333,112,36322,101,36308,108,36298,95,36280,119,36270,104,36255,114,36242,111,36228,117,36218,103,36204,107,36189,118,36176,118,36163,118,36154,96,36138,111,36126,109,36115,100,36101,103,36088,102,36073,114,36059,117,36048,107,36037,101,36022,107,36009,106,35997,105,35983,110,35969,112,35957,110,35943,115,35931,110,35917,113,35905,112,35891,112,35879,110,35866,108,35854,106,35839,114,35826,113,35813,114,35801,111,35788,108,35775,112,35761,114,35747,120,35735,115,35723,112,35710,114,35696,117,35685,105,35671,109,35657,116,35645,113,35632,113,35621,101,35605,120,35593,117,35579,124,35568,112,35555,111,35542,115,35531,104,35515,125,35503,120,35490,123,35479,116,35464,124,35451,128,35441,113,35429,105,35416,111,35402,120,35389,119,35377,113,35364,119,35351,117,35338,124,35324,129,35314,113,35302,106,35289,107,35276,110,35263,112,35251,111,35238,115,35226,108,35211,125,35199,121,35187,111,35173,122,35162,112,35148,118,35136,112,35123,117,35112,107,35097,122,35084,127,35073,113,35061,108,35047,115,35035,112,35022,118,35009,115,34997,112,34983,120,34971,116,34961,96,34945,118,34932,121,34920,120,34907,124,34894,120,34882,117,34869,120,34857,122,34845,112,34833,109,34821,111,34808,115,34795,119,34782,123,34769,126,34758,116,34745,119,34731,129,34718,133,34707,124,34694,130,34681,131,34668,133,34582,786,34568,797,34556,804,34541,826,34523,886,34487,1105,34450,1336,34407,1629,34376,1821,34362,1846,34349,1865,34337,1869,34328,1850,34315,1865,34304,1863,34292,1872,34280,1875,34268,1885,34258,1873,34247,1874,34236,1872,34226,1862,34214,1867,34204,1851,34192,1863,34181,1861,34169,1874,34157,1875,34146,1875,34135,1880,34124,1874,34114,1872,34103,1870,34092,1865,34080,1871,34070,1869,34059,1868,34047,1869,34036,1872,34025,1877,34013,1884,34002,1880,33993,1863,33981,1870,33969,1883,33959,1875,33948,1873,33937,1876,33926,1870,33915,1867,33904,1866,33893,1869,33881,1883,33869,1892,33858,1894,33847,1887,33836,1891,33825,1892,33814,1894,33802,1903,33792,1890,33782,1879,33771,1870,33760,1878,33748,1883,33738,1881,33726,1884,33715,1889,33703,1899,33692,1897,33681,1902,33671,1885,33659,1898,33648,1898,33638,1890,33627,1894,33616,1892,33604,1896,33594,1892,33583,1892,33571,1893,33560,1901,33549,1897,33538,1906,33527,1906,33516,1909,33505,1893,33495,1889,33484,1886,33472,1892,33462,1889,33451,1890,33439,1899,33428,1900,33417,1906,33406,1902,33395,1902,33384,1903,33374,1897,33363,1893,33352,1889,33341,1892,33330,1895,33319,1892,33308,1898,33297,1901,33286,1906,33275,1911,33264,1909,33253,1906,33242,1909,33231,1910,33220,1904,33210,1897,33198,1901,33188,1901,33176,1906,33165,1909,33155,1904,33143,1914,33133,1913,33122,1910,33111,1907,33100,1911,33089,1904,33078,1908,33067,1908,33056,1908,33045,1913,33034,1918,33023,1916,33012,1925,33001,1919,32990,1914,32979,1918,32968,1922,32958,1921,32947,1919,32936,1918,32925,1904,32914,1914,32903,1913,32892,1914,32881,1920,32870,1909,32859,1921,32848,1925,32837,1922,32827,1924,32816,1917,32805,1923,32794,1919,32783,1918,32772,1929,32761,1921,32750,1916,32739,1926,32728,1926,32717,1932,32706,1937,32696,1930,32685,1925,32674,1929,32663,1928,32652,1933,32641,1927,32630,1923,32619,1920,32608,1933,32597,1936,32586,1931,32575,1931,32565,1938,32554,1936,32543,1938,32532,1943,32521,1928,32510,1932,32499,1929,32488,1921,32477,1922,32466,1929,32456,1936,32445,1943,32434,1947,32423,1946,32412,1935,32401,1941,32390,1942,32379,1940,32368,1940,32357,1932,32346,1935,32336,1939,32325,1943,32314,1952,32303,1943,32292,1940,32281,1946,32270,1948,32260,1952,32248,1947,32238,1946,32227,1945,32215,1939,32205,1939,32194,1947,32183,1942,32172,1947,32161,1944,32150,1949,32140,1954,32129,1953,32118,1949,32107,1955,32096,1961,32085,1954,32074,1941,32063,1941,32052,1947,32041,1943,32030,1948,32020,1955,32009,1956,31997,1952,31986,1953,31975,1952,31965,1954,31953,1948,31942,1950,31932,1954,31921,1956,31909,1950,31898,1950,31888,1955,31877,1959,31866,1964,31855,1962,31844,1962,31833,1961,31822,1965,31811,1961,31800,1963,31789,1964,31779,1966,31767,1963,31757,1969,31746,1967,31734,1961,31724,1963,31712,1959,31701,1956,31690,1952,31680,1964,31669,1964,31658,1963,31647,1962,31636,1963,31625,1966,31614,1972,31603,1967,31592,1964,31581,1968,31570,1966,31559,1972,31548,1971,31538,1973,31526,1970,31515,1962,31504,1969,31494,1977,31483,1980,31472,1978,31461,1975,31450,1973,31439,1975,31429,1986,31418,1984,31406,1979,31394,1970,31385,1985,31374,1983,31363,1981,31346,1923,31325,1822,31307,1749,31289,1679,31272,1624,31253,1549,31236,1489,31218,1425,31201,1372,31183,1300,31166,1249,31148,1194,31132,1153,31114,1087,31097,1038,30990,142,30973,109,30965,144,30962,227,30951,244,30939,246,30927,243,30913,233,30900,229,30887,226,30876,237,30864,238,30851,231,30839,231,30827,240,30815,241,30802,241,30790,236,30777,231,30765,236,30752,234,30740,236,30728,237,30716,243,30703,237,30690,230,30678,239,30665,234,30654,243,30641,239,30629,246,30617,249,30603,239,30591,239,30578,239,30566,243,30553,237,30541,241,30529,248,30517,252,30504,253,30492,256,30479,250,30465,244,30453,248,30441,248,30428,249,30417,255,30403,248,30392,257,30377,246,30366,255,30354,255,30341,253,30328,253,30316,259,30303,256,30291,257,30279,260,30266,257,30252,251,30239,250,30227,253,30215,258,30203,259,30189,254,30178,261,30163,249,30152,254,30139,256,30128,261,30115,260,30101,252,30089,255,30076,257,30064,259,30050,251,30038,252,30025,251,30014,263,30002,266,29988,257,29976,259,29963,257,29950,255,29939,265,29926,263,29912,257,29900,259,29886,255,29873,257,29861,259,29847,254,29835,260,29822,260,29810,264,29798,271,29785,268,29772,269,29758,263,29746,266,29734,268,29721,269,29708,267,29695,267,29682,268,29669,267,29656,269,29643,269,29631,274,29618,270,29607,281,29593,274,29579,272,29567,276,29556,284,29543,287,29529,281,29516,278,29503,281,29491,280,29479,286,29465,283,29450,274,29437,272,29425,277,29413,279,29400,278,29387,282,29373,277,29360,276,29349,282,29334,272,29322,279,29310,284,29297,281,29284,281,29271,281,29258,281,29246,285]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9331746,-89.06683,-0.0163,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.67,\"z\":10.12},\"Min\":{\"x\":-35.21,\"z\":11.27},\"values\":[-0.9332,-89.07,-0.01629,10.7]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9334166,-89.06658,-0.0163,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.67,\"z\":10.12},\"Min\":{\"x\":-35.21,\"z\":11.27},\"values\":[-0.9334,-89.07,-0.01629,10.7]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "28beeb1dc2abaa28",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27581,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4156,527370],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36330,126,36322,104,36308,109,36298,95,36281,111,36268,115,36257,105,36241,115,36226,127,36216,113,36202,116,36192,104,36176,116,36161,126,36150,120,36141,98,36123,122,36110,123,36099,115,36085,117,36072,116,36059,119,36047,116,36034,115,36021,113,36008,116,35994,118,35981,118,35968,117,35955,118,35943,113,35929,121,35916,120,35905,111,35891,114,35877,122,35864,119,35851,118,35840,110,35826,116,35811,125,35800,117,35786,121,35774,115,35761,116,35749,109,35734,121,35722,116,35708,120,35695,120,35683,117,35669,121,35658,112,35645,114,35632,112,35618,118,35604,124,35591,127,35581,112,35566,122,35555,111,35542,116,35531,104,35516,117,35501,132,35492,111,35476,129,35465,118,35451,132,35437,136,35426,127,35414,119,35403,110,35389,121,35375,127,35364,119,35350,127,35338,121,35325,124,35312,127,35300,122,35286,131,35275,117,35263,117,35249,125,35237,116,35224,123,35210,130,35200,114,35187,117,35173,119,35161,121,35147,127,35136,118,35122,123,35109,124,35097,124,35085,114,35072,117,35059,125,35047,115,35035,111,35023,108,35008,122,34996,116,34983,125,34970,121,34957,126,34944,125,34932,122,34919,129,34905,133,34894,122,34882,119,34870,114,34857,119,34845,112,34832,123,34818,128,34808,115,34794,122,34783,116,34770,116,34757,118,34744,122,34732,119,34720,117,34707,119,34695,115,34682,121,34669,124,34657,121,34645,116,34632,126,34620,121,34607,128,34595,124,34581,132,34569,131,34557,128,34545,120,34533,116,34521,117,34508,118,34495,122,34481,134,34471,118,34457,126,34445,124,34432,128,34420,126,34407,129,34395,129,34382,128,34371,122,34357,134,34346,124,34333,126,34320,134,34309,119,34296,120,34282,136,34270,137,34257,140,34245,135,34234,123,34220,131,34208,126,34195,141,34183,129,34170,136,34157,140,34146,135,34133,139,34069,778,34055,796,34043,800,34030,818,34015,861,33994,979,33971,1126,33950,1260,33893,1861,33891,1746,33877,1782,33861,1856,33849,1866,33838,1868,33826,1880,33815,1883,33803,1885,33793,1880,33782,1880,33771,1880,33760,1882,33749,1876,33738,1869,33727,1874,33716,1866,33705,1872,33694,1868,33682,1879,33671,1882,33660,1878,33649,1882,33638,1893,33627,1888,33616,1884,33605,1884,33594,1882,33583,1884,33572,1874,33562,1868,33551,1866,33539,1888,33528,1890,33516,1896,33505,1898,33495,1886,33483,1891,33473,1884,33462,1876,33451,1885,33440,1881,33429,1879,33418,1887,33407,1885,33396,1885,33384,1900,33374,1898,33363,1897,33352,1901,33341,1894,33330,1883,33319,1906,33308,1896,33297,1903,33286,1895,33275,1892,33264,1894,33253,1894,33242,1899,33232,1892,33221,1895,33209,1904,33198,1902,33187,1902,33176,1904,33166,1897,33155,1894,33144,1895,33133,1902,33122,1896,33111,1900,33100,1904,33089,1906,33078,1905,33067,1910,33056,1916,33045,1914,33034,1913,33023,1910,33012,1912,33001,1908,32991,1903,32980,1899,32969,1910,32958,1912,32947,1915,32936,1917,32925,1919,32914,1912,32903,1922,32892,1920,32881,1917,32870,1915,32859,1905,32848,1914,32838,1899,32827,1913,32816,1916,32805,1922,32794,1926,32783,1930,32772,1931,32761,1939,32750,1929,32739,1914,32728,1909,32717,1915,32706,1915,32696,1921,32685,1927,32674,1926,32663,1930,32652,1933,32641,1927,32630,1934,32619,1933,32608,1931,32597,1922,32586,1918,32575,1927,32565,1933,32554,1931,32543,1925,32532,1918,32521,1939,32510,1941,32499,1945,32488,1948,32478,1952,32466,1935,32455,1932,32445,1932,32434,1934,32423,1937,32412,1945,32401,1940,32390,1939,32379,1938,32368,1940,32358,1948,32347,1944,32336,1943,32325,1937,32314,1941,32303,1941,32292,1938,32281,1942,32270,1945,32260,1955,32249,1951,32238,1947,32227,1948,32216,1944,32205,1944,32194,1941,32183,1949,32172,1943,32161,1942,32150,1942,32139,1941,32128,1941,32118,1949,32107,1950,32096,1950,32085,1946,32074,1948,32063,1954,32052,1954,32041,1946,32030,1941,32019,1944,32008,1948,31997,1948,31986,1953,31976,1958,31965,1962,31954,1964,31943,1956,31932,1961,31921,1961,31910,1963,31899,1961,31888,1956,31876,1950,31865,1945,31854,1940,31844,1960,31834,1971,31823,1966,31812,1969,31801,1968,31790,1967,31779,1970,31767,1961,31756,1963,31746,1966,31734,1960,31724,1966,31713,1971,31702,1966,31691,1971,31680,1970,31670,1976,31659,1983,31648,1984,31637,1983,31625,1971,31614,1973,31603,1963,31592,1965,31581,1970,31571,1977,31560,1979,31549,1976,31538,1973,31527,1982,31517,1985,31506,1985,31495,1986,31484,1983,31473,1984,31462,1983,31450,1980,31439,1976,31428,1979,31418,1983,31407,1991,31396,1988,31386,1994,31375,2001,31365,2003,31353,1994,31342,1998,31330,1992,31319,1989,31308,1988,31296,1983,31285,1983,31275,1991,31264,1996,31253,1996,31242,1997,31232,2007,31221,2013,31209,2001,31198,2006,31187,2003,31176,2002,31164,1998,31153,1994,31141,1994,31130,1994,31120,2005,31110,2010,31098,2007,31087,2003,31076,2003,31065,2007,31054,2004,31043,2005,31031,1999,31019,1996,31009,2004,30998,2003,30987,2004,30976,2004,30965,2009,30955,2018,30944,2014,30933,2021,30921,2016,30911,2017,30899,2013,30887,2008,30876,2011,30866,2014,30853,2005,30840,1984,30816,1886,30787,1748,30765,1669,30744,1593,30724,1529,30703,1458,30684,1400,30663,1326,30643,1268,30621,1197,30596,1104,30575,1038,30535,923,30420,191,30416,251,30404,254,30391,252,30380,260,30366,254,30353,249,30342,262,30329,257,30316,254,30304,258,30291,260,30278,256,30267,268,30253,260,30240,253,30228,258,30214,250,30203,262,30190,259,30178,260,30164,254,30152,254,30139,255,30127,260,30115,259,30102,258,30090,263,30077,262,30065,265,30052,262,30039,258,30027,262,30014,261,30003,268,29990,269,29978,271,29965,270,29951,263,29939,263,29927,266,29913,262,29900,263,29887,259,29873,257,29861,259,29848,259,29836,262,29824,267,29810,264,29799,272,29786,273,29773,272,29761,275,29747,270,29735,273,29722,277,29709,273,29696,275,29682,270,29669,269,29657,272,29645,276,29630,267,29619,275,29606,276,29593,276,29581,279,29569,286,29557,288,29544,288,29531,289,29516,279,29502,275,29489,275,29477,276,29465,281,29452,280,29439,280,29426,279,29413,282,29401,287,29388,285,29376,288,29361,280,29347,275,29335,277,29321,274,29309,277,29298,287,29284,280,29271,281,29258,281,29244,278]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-7.617977,-82.38203,-0.134,10.9],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":6.08},\"Min\":{\"x\":-35.22,\"z\":15.56},\"values\":[-7.623,-82.38,-0.1338,10.85]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-7.622632,-82.37737,-0.134,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":6.08},\"Min\":{\"x\":-35.22,\"z\":15.56},\"values\":[-7.623,-82.38,-0.1338,10.85]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "09366bc5ba271e04",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":28504,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4204,277755],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,136,36315,134,36302,135,36289,137,36277,132,36263,139,36249,144,36237,135,36226,127,36210,141,36196,148,36184,142,36171,144,36159,140,36147,131,36137,118,36123,124,36109,130,36095,134,36081,137,36068,141,36053,148,36042,139,36028,147,36017,133,36005,130,35991,136,35979,128,35965,136,35950,145,35936,152,35923,150,35912,141,35900,135,35887,137,35874,137,35859,149,35846,151,35835,137,35820,146,35807,147,35794,151,35783,139,35770,139,35756,141,35744,137,35731,139,35718,141,35705,141,35691,145,35680,135,35667,134,35654,134,35640,140,35625,150,35613,150,35599,154,35587,149,35574,150,35561,153,35549,149,35536,153,35523,151,35509,163,35498,149,35485,155,35471,164,35460,149,35447,152,35433,161,35421,161,35409,152,35397,150,35384,150,35371,155,35358,156,35345,159,35332,159,35319,161,35306,163,35294,163,35283,149,35271,144,35257,157,35244,156,35232,151,35219,153,35206,153,35194,149,35183,143,35170,143,35157,146,35144,150,35131,150,35118,155,35106,149,35092,160,35080,150,35067,153,35054,157,35042,155,35030,151,35018,144,35004,155,34991,159,34978,156,34965,162,34952,161,34940,156,34927,158,34916,152,34901,164,34890,151,34876,167,34864,163,34852,161,34839,163,34828,153,34815,153,34803,154,34790,154,34778,154,34764,163,34753,153,34740,157,34728,152,34715,159,34702,161,34691,154,34677,169,34664,166,34653,162,34640,165,34628,158,34614,168,34602,169,34589,169,34578,160,34565,165,34552,168,34540,165,34528,162,34515,167,34502,172,34490,166,34477,171,34466,159,34453,170,34440,170,34430,151,34416,165,34404,162,34391,163,34379,162,34366,166,34354,166,34341,166,34329,168,34316,165,34304,167,34291,168,34280,162,34267,164,34255,162,34241,170,34229,170,34216,177,34204,171,34192,167,34179,176,34167,174,34155,168,34142,170,34130,170,34118,173,34106,170,34093,170,34081,173,34069,171,34057,165,34045,161,34032,168,34019,173,34007,179,33994,182,33982,182,33970,177,33958,171,33946,170,33933,180,33921,180,33909,173,33897,172,33884,182,33871,184,33859,186,33846,190,33835,184,33823,168,33810,179,33799,170,33786,177,33773,186,33761,185,33749,185,33736,186,33724,179,33712,178,33700,179,33688,177,33676,176,33664,170,33651,179,33638,186,33627,175,33614,181,33602,177,33590,171,33577,176,33565,185,33553,184,33541,176,33528,179,33516,185,33503,198,33491,189,33479,182,33467,188,33454,187,33415,880,33403,870,33392,869,33380,870,33368,865,33356,890,33343,922,33328,1018,33313,1131,33299,1185,33286,1250,33272,1311,33259,1354,33246,1427,33233,1483,33220,1548,33207,1611,33193,1719,33179,1830,33165,1909,33154,1927,33143,1937,33132,1944,33121,1949,33110,1954,33099,1953,33088,1945,33077,1948,33066,1948,33055,1948,33045,1937,33034,1925,33023,1927,33012,1922,33001,1939,32990,1935,32979,1943,32968,1942,32957,1951,32946,1954,32935,1952,32925,1951,32914,1956,32903,1949,32892,1942,32881,1939,32870,1942,32859,1944,32848,1943,32837,1948,32826,1958,32815,1961,32805,1954,32794,1946,32783,1953,32772,1960,32761,1948,32750,1945,32739,1945,32728,1950,32717,1951,32707,1957,32696,1955,32685,1955,32674,1957,32663,1956,32652,1956,32641,1959,32630,1958,32619,1951,32608,1948,32597,1947,32587,1949,32576,1955,32565,1953,32554,1945,32543,1949,32532,1953,32521,1952,32510,1950,32500,1960,32489,1960,32478,1955,32467,1952,32456,1951,32445,1947,32434,1949,32423,1948,32412,1952,32401,1953,32390,1954,32380,1962,32369,1955,32358,1960,32347,1950,32336,1949,32325,1955,32314,1952,32303,1947,32292,1954,32281,1952,32270,1952,32259,1949,32249,1950,32238,1948,32227,1954,32216,1957,32206,1968,32194,1961,32183,1956,32172,1954,32161,1949,32150,1949,32140,1950,32129,1953,32118,1946,32107,1954,32096,1948,32085,1953,32075,1963,32064,1965,32053,1964,32042,1964,32031,1959,32019,1944,32008,1948,31997,1953,31986,1948,31976,1954,31965,1955,31953,1943,31943,1957,31932,1966,31921,1967,31911,1970,31899,1961,31888,1964,31877,1953,31865,1950,31854,1948,31843,1948,31833,1952,31822,1956,31811,1956,31800,1955,31789,1959,31779,1970,31768,1970,31756,1963,31745,1962,31734,1962,31723,1956,31712,1956,31701,1956,31690,1956,31679,1961,31669,1964,31658,1969,31647,1971,31636,1971,31625,1971,31614,1965,31602,1957,31591,1955,31580,1950,31569,1953,31558,1956,31547,1960,31537,1964,31525,1959,31516,1977,31504,1970,31494,1973,31482,1971,31471,1969,31461,1974,31449,1963,31437,1956,31426,1959,31415,1958,31405,1960,31394,1965,31382,1959,31371,1958,31360,1954,31348,1947,31339,1962,31328,1965,31316,1963,31307,1976,31294,1965,31283,1961,31273,1970,31262,1977,31250,1970,31239,1971,31228,1969,31217,1975,31206,1976,31195,1974,31184,1974,31172,1971,31161,1971,31149,1963,31139,1969,31127,1967,31116,1967,31105,1968,31095,1978,31085,1983,31073,1982,31062,1983,31051,1982,31039,1978,31028,1977,31017,1981,31006,1978,30994,1970,30982,1962,30970,1955,30960,1968,30950,1976,30939,1978,30929,1985,30917,1975,30906,1984,30896,1987,30885,1987,30873,1980,30860,1973,30849,1970,30838,1974,30827,1974,30816,1972,30805,1975,30794,1978,30782,1974,30772,1979,30761,1978,30750,1982,30738,1977,30727,1977,30716,1977,30705,1978,30693,1976,30681,1969,30669,1962,30659,1971,30649,1976,30638,1981,30627,1984,30615,1979,30605,1986,30594,1991,30581,1978,30569,1977,30559,1983,30547,1982,30535,1977,30524,1976,30513,1978,30502,1981,30492,1989,30480,1989,30468,1982,30455,1971,30443,1973,30434,1986,30423,1988,30411,1981,30400,1989,30387,1977,30376,1977,30365,1980,30354,1981,30343,1988,30331,1980,30320,1983,30308,1983,30297,1981,30282,1961,30270,1960,30261,1975,30251,1980,30238,1974,30228,1983,30217,1982,30206,1983,30195,1985,30184,1987,30173,1993,30162,1995,30149,1988,30136,1978,30051,1560,30014,1414,29980,1286,29950,1186,29758,263,29745,258,29730,250,29719,257,29705,251,29692,254,29679,253,29667,256,29654,258,29640,251,29627,249,29616,259,29603,260,29590,260,29577,259,29564,259,29552,266,29540,269,29526,266,29513,263,29499,260,29488,266,29474,261,29461,261,29448,262,29435,261,29422,259,29410,265,29396,259,29385,272,29372,271,29359,270,29345,266,29331,257,29319,263,29307,269,29293,262,29282,272,29268,266,29256,272,29243,273]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "2e100d752b9a986c",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":29160,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4237,910587],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36328,135,36316,129,36303,133,36292,122,36278,129,36265,129,36253,124,36239,125,36225,132,36209,146,36198,137,36183,145,36172,137,36159,139,36146,138,36134,135,36120,139,36107,140,36094,141,36083,131,36070,130,36053,151,36041,144,36028,146,36015,147,36003,142,35991,135,35979,129,35962,149,35949,149,35935,156,35923,153,35912,139,35900,134,35884,150,35871,154,35859,145,35847,140,35833,150,35820,149,35808,144,35793,154,35781,149,35772,128,35756,146,35744,142,35732,133,35718,140,35703,152,35689,158,35678,145,35667,137,35652,145,35638,151,35624,158,35614,143,35599,152,35586,156,35575,149,35562,150,35548,157,35538,141,35525,141,35511,149,35499,148,35485,154,35473,151,35460,150,35447,153,35434,156,35421,159,35409,154,35396,155,35384,151,35371,152,35357,161,35345,156,35333,152,35321,152,35309,147,35297,142,35282,154,35270,151,35256,164,35243,163,35229,170,35216,172,35205,166,35192,163,35181,157,35168,159,35155,157,35143,154,35130,158,35117,158,35105,154,35091,161,35081,149,35065,169,35054,161,35042,152,35029,152,35017,151,35004,154,34992,151,34977,165,34965,157,34954,151,34940,162,34926,169,34915,157,34901,167,34890,155,34876,162,34862,173,34850,170,34839,165,34827,162,34813,170,34802,161,34790,157,34777,165,34765,157,34753,157,34740,162,34727,161,34713,174,34702,160,34689,168,34676,173,34663,175,34652,163,34640,166,34626,172,34614,171,34601,177,34589,174,34576,175,34563,182,34551,176,34540,167,34527,168,34515,171,34503,165,34490,169,34477,171,34465,174,34453,171,34440,169,34428,170,34416,169,34403,166,34390,176,34378,171,34366,166,34353,173,34341,166,34328,171,34315,180,34303,178,34290,184,34278,178,34266,177,34253,177,34241,170,34229,170,34216,173,34203,186,34190,186,34179,174,34167,175,34155,168,34142,172,34130,169,34118,163,34105,175,34092,180,34081,176,34068,174,34056,175,34044,173,34032,173,34019,179,34007,175,33995,176,33982,187,33970,183,33957,185,33945,179,33933,179,33921,180,33908,180,33896,180,33884,174,33872,172,33859,179,33847,180,33835,172,33823,179,33811,176,33799,165,33786,173,33773,181,33761,181,33749,182,33736,188,33724,189,33712,180,33700,182,33687,191,33675,187,33663,188,33651,182,33638,184,33626,193,33613,193,33602,185,33589,191,33577,191,33565,186,33552,189,33540,186,33528,191,33516,185,33474,857,33462,858,33451,855,33439,866,33427,873,33414,903,33397,1041,33381,1146,33367,1204,33353,1268,33339,1336,33326,1397,33313,1444,33299,1526,33285,1613,33271,1682,33258,1757,33244,1830,33231,1905,33220,1916,33209,1930,33198,1928,33187,1923,33176,1929,33165,1927,33154,1938,33143,1937,33132,1942,33121,1948,33110,1940,33099,1936,33088,1928,33078,1919,33067,1926,33056,1934,33045,1933,33034,1943,33023,1945,33012,1931,33001,1943,32990,1950,32979,1946,32968,1936,32957,1943,32947,1933,32936,1934,32925,1936,32914,1941,32903,1938,32892,1938,32881,1935,32870,1941,32859,1940,32848,1944,32837,1946,32826,1953,32816,1946,32805,1931,32794,1928,32783,1936,32772,1935,32761,1941,32750,1944,32739,1929,32728,1944,32717,1947,32707,1948,32696,1953,32685,1945,32674,1951,32663,1938,32652,1944,32641,1945,32630,1945,32619,1945,32608,1940,32598,1947,32587,1952,32576,1949,32565,1952,32554,1947,32543,1944,32532,1951,32521,1948,32510,1942,32499,1946,32488,1947,32478,1950,32467,1944,32456,1954,32445,1954,32434,1950,32423,1953,32412,1957,32401,1942,32390,1947,32380,1952,32369,1951,32358,1951,32347,1945,32336,1948,32325,1955,32314,1949,32303,1955,32292,1951,32281,1956,32271,1962,32260,1956,32249,1957,32238,1947,32227,1954,32216,1952,32205,1949,32194,1949,32183,1943,32172,1949,32162,1956,32151,1960,32140,1960,32129,1955,32118,1956,32107,1951,32096,1961,32085,1957,32074,1944,32063,1954,32052,1953,32041,1949,32031,1956,32020,1965,32009,1962,31998,1962,31987,1954,31976,1958,31964,1953,31953,1952,31943,1955,31931,1951,31921,1952,31910,1953,31899,1954,31888,1961,31877,1964,31866,1964,31856,1968,31844,1966,31834,1970,31822,1964,31811,1960,31800,1959,31789,1957,31778,1959,31766,1945,31756,1958,31745,1958,31735,1963,31724,1976,31713,1974,31702,1972,31690,1961,31679,1955,31668,1957,31657,1953,31646,1958,31635,1955,31625,1964,31614,1966,31603,1971,31592,1968,31582,1974,31571,1980,31560,1983,31549,1973,31537,1965,31526,1971,31515,1965,31504,1960,31493,1961,31482,1964,31471,1966,31460,1967,31450,1976,31439,1974,31427,1969,31417,1971,31406,1975,31395,1970,31383,1967,31372,1965,31362,1970,31350,1966,31339,1969,31328,1971,31317,1969,31307,1982,31296,1978,31285,1981,31274,1982,31263,1984,31251,1973,31239,1972,31228,1971,31215,1955,31205,1966,31195,1972,31183,1969,31173,1981,31163,1985,31152,1987,31140,1981,31129,1982,31118,1980,31106,1977,31095,1976,31084,1975,31072,1973,31062,1976,31051,1983,31039,1977,31029,1981,31018,1983,31007,1987,30997,1993,30984,1985,30974,1993,30962,1983,30951,1984,30940,1985,30927,1973,30916,1971,30905,1976,30895,1979,30884,1982,30873,1984,30862,1984,30852,1992,30840,1989,30829,1990,30817,1979,30805,1979,30794,1973,30781,1965,30770,1964,30761,1981,30750,1982,30739,1983,30731,2003,30719,2003,30707,1995,30696,1993,30684,1987,30672,1986,30661,1985,30650,1984,30639,1984,30627,1984,30615,1975,30605,1988,30594,1989,30583,1995,30573,2000,30561,1996,30550,2001,30536,1983,30526,1988,30514,1989,30501,1975,30490,1977,30478,1978,30468,1982,30458,1995,30448,2004,30437,2003,30423,1990,30414,2000,30402,1999,30391,1999,30379,1996,30369,2004,30356,1998,30344,1995,30332,1988,30320,1987,30310,1993,30300,2002,30289,2006,30278,2007,30265,1999,30255,2004,30243,2001,30233,2007,30220,2000,30166,1749,30112,1504,30079,1377,30052,1294,30022,1187,29984,1040,29837,270,29824,271,29810,261,29796,259,29784,260,29771,260,29759,264,29746,264,29732,260,29720,262,29706,259,29694,263,29681,266,29670,272,29657,271,29642,264,29630,267,29617,269,29606,277,29592,271,29581,280,29567,277,29555,283,29542,280,29529,280,29516,278,29502,275,29489,272,29477,277,29465,280,29451,278,29439,279,29425,274,29413,279,29399,275,29386,277,29374,281,29360,275,29347,273,29335,278,29322,279,29310,280,29298,289,29287,297,29272,286,29259,288,29246,287]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.66183,-75.33817,-0.262,11.0],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.725},\"Min\":{\"x\":-35.2,\"z\":20.27},\"values\":[-14.68,-75.32,-0.2619,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.67714,-75.32286,-0.262,11.0],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.718},\"Min\":{\"x\":-35.2,\"z\":20.27},\"values\":[-14.68,-75.32,-0.2619,11.05]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "6e79c7984c2203bd",
        "type": "inject",
        "z": "c4f35bb0ae2de5ca",
        "name": "Cinghia grandissima 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 8",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":29353,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4247,955699],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,135,36314,139,36303,132,36291,129,36277,132,36264,134,36250,137,36237,138,36224,135,36211,136,36199,131,36186,132,36169,155,36159,139,36146,138,36133,139,36120,140,36108,133,36094,138,36080,143,36068,139,36054,147,36041,142,36028,147,36016,138,36000,155,35987,157,35976,144,35964,140,35950,148,35937,145,35923,153,35911,149,35897,152,35885,147,35872,150,35858,153,35848,138,35833,146,35821,140,35807,146,35793,152,35782,146,35768,150,35757,140,35742,150,35731,142,35718,141,35705,139,35693,134,35681,128,35666,141,35651,153,35640,142,35624,161,35613,149,35599,153,35587,149,35575,148,35565,130,35552,133,35536,150,35521,164,35511,152,35498,150,35485,154,35473,149,35460,153,35447,154,35435,151,35423,146,35411,142,35396,155,35383,157,35370,158,35359,150,35346,150,35332,161,35320,156,35307,159,35295,153,35281,162,35269,156,35255,165,35242,168,35229,171,35217,168,35206,156,35193,156,35180,164,35167,162,35155,161,35143,154,35130,155,35118,155,35104,159,35091,161,35079,156,35066,161,35055,152,35042,151,35029,155,35016,159,35005,149,34990,161,34978,158,34964,170,34952,163,34939,163,34929,146,34915,155,34902,162,34889,164,34875,169,34866,143,34852,156,34841,148,34829,146,34815,155,34802,159,34789,161,34777,158,34764,163,34751,166,34738,173,34725,176,34714,170,34701,171,34689,170,34676,171,34664,170,34652,163,34639,167,34626,174,34614,175,34601,175,34589,175,34576,176,34564,173,34552,170,34540,171,34526,179,34515,172,34502,174,34490,171,34477,175,34465,174,34453,167,34441,163,34427,175,34414,179,34403,170,34390,173,34377,180,34365,179,34353,171,34340,180,34327,183,34315,175,34302,185,34291,169,34278,178,34265,182,34253,177,34240,186,34228,179,34216,177,34203,179,34192,170,34179,172,34167,171,34154,174,34142,177,34130,176,34117,181,34105,178,34093,171,34080,177,34068,178,34056,177,34043,178,34031,178,34018,185,34006,189,33994,180,33982,180,33970,173,33958,178,33946,171,33933,181,33920,186,33907,197,33849,874,33838,870,33825,884,33813,896,33800,914,33784,983,33764,1110,33747,1203,33731,1268,33714,1355,33698,1431,33683,1501,33666,1593,33650,1675,33634,1762,33618,1848,33605,1885,33592,1924,33580,1935,33569,1938,33558,1944,33547,1940,33536,1937,33525,1936,33514,1940,33503,1950,33491,1952,33480,1952,33470,1943,33459,1945,33448,1947,33437,1945,33426,1942,33415,1941,33405,1940,33394,1943,33383,1941,33372,1944,33360,1954,33350,1952,33339,1947,33328,1938,33317,1939,33307,1932,33296,1930,33285,1930,33274,1935,33263,1948,33252,1943,33241,1954,33230,1950,33219,1950,33208,1951,33197,1949,33186,1951,33175,1951,33164,1944,33154,1947,33143,1944,33132,1947,33121,1959,33110,1952,33099,1950,33088,1951,33077,1956,33066,1949,33055,1946,33044,1950,33033,1953,33023,1941,33012,1942,33001,1946,32990,1944,32979,1948,32968,1959,32957,1959,32946,1951,32935,1952,32924,1970,32914,1953,32903,1952,32892,1951,32881,1958,32870,1948,32859,1943,32848,1952,32837,1959,32826,1951,32816,1949,32805,1959,32794,1967,32783,1962,32772,1957,32761,1960,32750,1954,32739,1951,32728,1949,32717,1952,32707,1948,32696,1954,32685,1957,32674,1958,32663,1951,32652,1955,32641,1956,32630,1958,32619,1963,32609,1959,32598,1948,32587,1942,32576,1951,32565,1947,32554,1949,32543,1957,32532,1955,32521,1950,32511,1967,32500,1959,32489,1966,32478,1963,32467,1970,32456,1959,32445,1963,32434,1948,32423,1950,32412,1952,32401,1954,32391,1964,32380,1967,32369,1968,32358,1966,32347,1966,32336,1968,32325,1957,32314,1959,32303,1952,32292,1952,32281,1952,32271,1966,32260,1966,32249,1972,32238,1972,32227,1962,32216,1955,32205,1957,32195,1968,32183,1955,32172,1952,32162,1954,32150,1949,32140,1950,32129,1967,32118,1964,32108,1970,32097,1970,32086,1967,32075,1973,32064,1966,32053,1971,32042,1968,32031,1960,32020,1958,32008,1954,31998,1962,31987,1969,31976,1969,31966,1975,31954,1966,31944,1976,31933,1985,31922,1981,31911,1970,31900,1969,31888,1966,31877,1967,31866,1965,31855,1958,31844,1960,31833,1962,31823,1971,31812,1973,31801,1973,31790,1969,31779,1979,31768,1974,31757,1978,31746,1965,31735,1969,31724,1966,31713,1967,31702,1972,31691,1974,31680,1975,31670,1985,31659,1984,31649,1993,31637,1988,31626,1979,31615,1982,31604,1978,31592,1970,31581,1968,31570,1962,31559,1965,31549,1976,31538,1982,31528,1984,31516,1981,31505,1980,31494,1981,31483,1974,31472,1981,31461,1977,31449,1969,31438,1964,31427,1967,31416,1966,31407,1981,31396,1981,31386,1994,31374,1988,31363,1982,31352,1990,31341,1987,31330,1991,31319,1990,31307,1979,31295,1973,31283,1962,31273,1974,31262,1977,31252,1988,31241,1984,31230,1986,31218,1984,31208,1989,31197,1990,31186,1990,31174,1984,31162,1981,31150,1971,31139,1969,31129,1982,31119,1993,31108,1996,31097,1996,31086,1993,31074,1992,31064,1994,31052,1988,31040,1987,31029,1985,31018,1984,31006,1978,30995,1976,30984,1978,30974,1992,30963,1995,30953,1998,30942,1999,30929,1983,30917,1980,30906,1984,30896,1986,30884,1983,30873,1986,30861,1976,30851,1989,30841,1997,30830,1995,30819,1998,30807,1990,30797,2000,30785,1994,30773,1989,30762,1987,30752,1995,30741,1995,30729,1993,30717,1982,30705,1981,30694,1978,30685,1995,30675,2006,30664,2006,30653,2003,30642,2004,30629,1993,30617,1989,30605,1985,30591,1972,30558,1820,30517,1620,30495,1555,30466,1439,30441,1347,30414,1247,30386,1142,30361,1054,30213,240,30202,254,30191,261,30177,257,30164,253,30151,252,30141,264,30128,262,30117,272,30104,272,30091,266,30076,253,30064,260,30052,260,30041,270,30027,264,30013,258,30001,256,29987,251,29975,254,29963,256,29950,256,29940,271,29926,265,29912,259,29900,261,29887,262,29875,266,29862,265,29849,265,29837,270,29824,270,29810,261,29797,264,29785,270,29773,270,29761,277,29746,268,29734,272,29721,269,29709,273,29696,276,29684,277,29670,274,29659,282,29646,281,29632,276,29619,279,29607,282,29595,288,29584,295,29570,291,29558,294,29544,287,29529,278,29516,278,29505,289,29492,289,29478,285,29465,283,29453,286,29438,277,29427,288,29413,281,29401,287,29388,285,29374,281,29361,278,29348,281,29335,279,29323,282,29312,292,29297,283,29286,292,29273,293,29261,296,29248,296]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-10.01565,-79.98434,-0.177,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":4.786},\"Min\":{\"x\":-35.19,\"z\":17.29},\"values\":[-10.02,-79.99,-0.1766,11.08]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-10.015,-79.985,-0.177,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":4.787},\"Min\":{\"x\":-35.18,\"z\":17.29},\"values\":[-10.02,-79.99,-0.1766,11.08]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "ed3d79337cc829de"
            ]
        ]
    },
    {
        "id": "3aa5e7b308f3148f",
        "type": "link in",
        "z": "c4f35bb0ae2de5ca",
        "name": "SYM_DATA",
        "links": [
            "489d1cdef715df67",
            "81c2e60b6744e96f",
            "8a3e176fb1de8b2b",
            "ed3d79337cc829de"
        ],
        "x": 725,
        "y": 340,
        "wires": [
            [
                "f42c53637b7508c0"
            ]
        ]
    },
    {
        "id": "e75f96ae7eb85fac",
        "type": "link out",
        "z": "c4f35bb0ae2de5ca",
        "name": "dati profilo simulati out",
        "mode": "link",
        "links": [
            "17b766de82e53283"
        ],
        "x": 1125,
        "y": 340,
        "wires": []
    },
    {
        "id": "08c48fbdf72c0fce",
        "type": "comment",
        "z": "c4f35bb0ae2de5ca",
        "name": "HO AGGIUNTO RUMORE BIANCO AI DATI: TODO RIMUOVERLO",
        "info": "",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "f9fa4c658006eb60",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Lettura Parametri allo StartUp",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n/*********************** MODELLO DEL PROBLEMA RANSAC ****************/\n//STIMA RETTA IN 2D\nvar problem = {\n    // Your model, is how you compute your parameters or\n    // variable you want to find. Here there are m and b\n    model: function (sample) {\n        var p1 = sample[0];\n        var p2 = sample[1];\n        // You should validate p2.x != p1.x\n        var m = (p2.y - p1.y) / (p2.x - p1.x);\n        var b = p1.y - m * p1.x;\n        return {\n            m: m,\n            b: b\n        }\n    },\n    // Given model values, return a number indicate if you\n    // accept the point as inlier\n    fit: function (model, point) {\n        var y_estimated = model.m * point.x + model.b;\n        var error = point.y - y_estimated;\n        return Math.abs(error);\n    },\n\n    data: {}\n};\n\n/********************** PARAMETRI **************/\n//TODO: LEGGERLI DA DB\n\n//LETTURA CSV DATABASE CODICI PRODOTTO\n//const csvFilePath = 'D:\\\\LAVORI\\\\A22-1006-DAYCO-STIMA_ANGOLO_CINGHIE\\\\ESEMPIO_DATABASE_CODICI_PRODOTTO.csv';\nconst csvFilePath = 'C:\\\\StimaAngoli\\\\DB.csv';\nvar db_codici_prodotto = {};\nconst fs = global.get('fs');\ntry {\n    const result = fs.readFileSync(csvFilePath, 'utf8');\n    //console.log(result);\n    //SPLIT ROWS & COLUMNS\n    let temp = result.split(\"\\r\\n\");\n    //console.log(\"temp0\");\n    //console.log(temp);\n    //rimuovo tutte le righe vuote\n    const index = temp.indexOf('');\n    if (index > -1) { // only splice array when item is found\n        temp.splice(index)//, 1); // 2nd parameter means remove one item only\n    }\n\n    for (let i in temp) {\n        temp[i] = temp[i].split(\";\");\n    }\n    //console.log(\"temp\");\n    //console.log(temp);\n    //REARRANGE KEYS & VALUES\n    let data = {};\n    for (let i in temp[0]) {\n        data[(temp[0][i]).trim()] = [];\n        for (let j = 1; j < temp.length; j++) {\n            data[(temp[0][i]).trim()].push(temp[j][i]);\n        }\n    }\n    //DONE!\n    // data = JSON.stringify(data);\n    //console.log(data);\n    db_codici_prodotto = data;\n    console.log(\"[OK] LETTURA CSV DATABASE CODICI PRODOTTO\");\n} catch (err) {\n    console.error(err);\n    console.log(\"[ERR] LETTURA CSV DATABASE CODICI PRODOTTO\");\n}\n\n//LETTURA DA JSON DEI PARAMETRI RITENTIVI SALVATI\nvar gparams = {};\nvar carica_parametri_default=false;\nconst csvFilePathRitentive = \"C:\\\\StimaAngoli\\\\parametri\\\\parametri_ritentivi.json\";\n\ntry {\n    if (fs.existsSync(csvFilePathRitentive)) {\n        //file exists\n        try {\n            let rawdata = fs.readFileSync(csvFilePathRitentive);\n            gparams = JSON.parse(rawdata);\n           \n            \n            carica_parametri_default = false;\n\n            //aggiorno i codici prodotto con la lettura fatta sopra da CSV\n            gparams.db_codici_prodotto = db_codici_prodotto;\n            //il problema ransac non viene salvato nel json quindi lo ricarico io a mano\n            //gparams.ransac.problema = problem;\n            console.log(gparams);\n            console.log(\"[OK] PARAMS RITENTIVI LETTI DA JSON\");\n        } catch (error) {\n            console.log(error);\n            carica_parametri_default = true;\n        };\n    }\n    else {\n       //non esiste il file\n        carica_parametri_default = true;\n        console.log(\"[WARN] FILE JSON PARAMS RITENTIVI NON PRESENTE\");\n    }\n} catch (err) {\n    console.error(err);\n    console.log(\"[ERR] PARAMS RITENTIVI LETTI DA JSON\");\n    //errore\n    carica_parametri_default = true;\n}\n\n\nif (carica_parametri_default)\n{\n    console.log(\"[WARN] CARICATI PARAMETRI RITENTIVI DI DEFAULT (NO DA FILE JSON)\");\n    gparams = {\n        \"ransac\": {\n            \"sx\": {\n                \"sampleSize\": 2,\n                \"threshold\": 0.25,\n                \"maxIterations\": 20,\n                \"inliersRatio\": 0.4,\n                \"improveModelWithConcensusSet\": false\n            },\n            \"dx\": {\n                \"sampleSize\": 2,\n                \"threshold\": 0.25,\n                \"maxIterations\": 20,\n                \"inliersRatio\": 0.4,\n                \"improveModelWithConcensusSet\": false\n            },\n            \"base\": {\n                \"sampleSize\": 2,\n                \"threshold\": 0.3,\n                \"maxIterations\": 20,\n                \"inliersRatio\": 0.6,\n                \"improveModelWithConcensusSet\": false\n            },\n            \"massimi\": {\n                \"sampleSize\": 2,\n                \"threshold\": 0.3,\n                \"maxIterations\": 20,\n                \"inliersRatio\": 0.6,\n                \"improveModelWithConcensusSet\": false\n            },\n            //\"problema\": problem\n        },\n        \"divisione\": { \"n_min_punti\": 4 },\n        \"inizializzazione\": { \"init_ok\": false },\n        \"viz\": { \"offset_disegno_linee_sup_inf\": 1.0 },\n        \"db_codici_prodotto\": db_codici_prodotto,\n        \"calibrazione\": { \"rotazione_piano\": 0, \"offset_angolo_sx\": 0, \"offset_angolo_dx\": 0, \"offset_lt\": 0 },//in gradi e mm\n        \"algoritmi\": { \"divisione\": \"med\", \"stima_rette\": \"ransac\" }, //med o std //ransac o lineareprofili\n        \"path\": {\n            \"database_codici_prodotto\": csvFilePath,\n            \"database_risultati\": \"C:\\\\StimaAngoli\\\\risultati.csv\",\n            \"database_profili\": \"C:\\\\StimaAngoli\\\\profili\\\\\",\n            \"parametri_ritentivi\": csvFilePathRitentive\n        },\n        \"flusso_dati\": \"daProf\", //o daCsv\n        \n    };\n}\n\nglobal.set(\"PARAMETRI\", gparams);\n\n\n\n\n\n\n//VARIABILI GLOBALI NON RITENTIVE\n\nvar objLottoInLavorazione = {\n    \"Lotto\": \"---\", \"Articolo\": \"0\",\n    \"AngoloSXmin\": \"0\", \"AngoloSXmax\": \"0\", \"AngoloDXmin\": \"0\",\n    \"AngoloDXmax\": \"0\", \"HC\":\"0\", \"err_str\": \"init\", \"err_status\": false, \"Note\": \"---\"\n};\n\n\nvar var_globali = { \"count_alive\": 0, \"rotazione_linea_mediana\": 0, \n\"LottoInLavorazione\": objLottoInLavorazione, \"connessione_udp_ok\":false, \n    \"salvataggi\": { \"salva_risultato\": false, \"salva_profilo\": false }, \"ultimo_msg\": null,\n    \"back_up_ritentive\": null, \"ransac_problema\": problem, \"stream_dati_in_pausa\": false, \n    \"carica_profilo_da_csv\": { \"stato\": true, \"abs_path\": \"\" }, \n    \"aggiorna_tabella_file_profili\": true, \"aggiorna_file_lotti_articoli\": false, \n    \"aggiorna_parametri_ritentivi\": false};\n\nglobal.set(\"GLOBALI\", var_globali);\n\nglobal.set(\"PARAMETRI.inizializzazione.init_ok\", true);\n\n//faccio una copia di back up in memoria globale che uso per testare se ci sono\n//variazione dei parametri e se ci sono le salvo su file json\n//deep copy\nlet gcopy = JSON.parse(JSON.stringify(global.get(\"PARAMETRI\")));\nglobal.set(\"GLOBALI.back_up_ritentive\", gcopy);\n\n",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "46a361450e8e8786",
        "type": "http in",
        "z": "98a3eee5c375d831",
        "name": "",
        "url": "/dayco_profilo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "603e829c8c370aae"
            ]
        ]
    },
    {
        "id": "488f562b80f9d20f",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "PUBBLICAZIONE DELLA PAGINA WEB C:\\StimaAngoli\\chart_dinamico_con_WS.html",
        "info": "http://localhost:1880/prova-ws",
        "x": 620,
        "y": 120,
        "wires": []
    },
    {
        "id": "603e829c8c370aae",
        "type": "file in",
        "z": "98a3eee5c375d831",
        "name": "",
        "filename": "C:\\StimaAngoli\\chart_dinamico_con_WS.html",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 200,
        "wires": [
            [
                "71dd77df8a822715"
            ]
        ]
    },
    {
        "id": "71dd77df8a822715",
        "type": "http response",
        "z": "98a3eee5c375d831",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 200,
        "wires": []
    },
    {
        "id": "aab91e48d3a11910",
        "type": "websocket in",
        "z": "98a3eee5c375d831",
        "name": "",
        "server": "27824c37.1dfa24",
        "client": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "ea7c8f4ef60a5b90",
                "0d154281c3fae512"
            ]
        ]
    },
    {
        "id": "7ff6a7b3ebcd47c3",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "RICEZIONE MESSAGGI DALLA PAGINA WEB",
        "info": "",
        "x": 560,
        "y": 280,
        "wires": []
    },
    {
        "id": "f3516eef01913376",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Switch Funzioni Ricevute da Pagina Web",
        "func": "var msg2={};\nmsg2.fcn = [];\nswitch (msg.payload.funzione) {\n    case \"calcola_rotazione\":\n        let rot = global.get(\"GLOBALI.rotazione_linea_mediana\"); //calcolata ad ogni msg del baumer\n        global.set(\"PARAMETRI.calibrazione.rotazione_piano\", rot);\n        msg.payload = { \"function\": \"\", \"value\": 0 };\n        break;\n    case \"reset_rotazione\":\n        global.set(\"PARAMETRI.calibrazione.rotazione_piano\", 0);\n        msg.payload = { \"function\": \"\", \"value\": 0 };\n        break;\n    case \"req_lista_lotti\":\n    {\n            let lista_lotti = global.get(\"PARAMETRI.db_codici_prodotto.Lotto\");\n            let lista_articoli = global.get(\"PARAMETRI.db_codici_prodotto.Articolo\");\n            //concatenazione delle 2 liste per autocompletamento di ricerca lotto/articolo\n            let lista_totale = lista_lotti.concat(lista_articoli);\n            //tolgo tutti i doppioni\n            let uniq_lista = [...new Set(lista_totale)];\n            msg.payload = { \"function\": \"req_lista_lotti\", \"value\": uniq_lista };\n            break;\n    }\n    case \"carica_params_lotto\":\n    {\n            //CERCO SIA PER LOTTO SIA PER ARTICOLO\n            let lotto_inserito = msg.payload.value;\n            //console.warn(lotto_inserito);\n            let cod_prod = global.get(\"PARAMETRI.db_codici_prodotto\");\n            //console.warn(cod_prod);\n            let idxLotto = cod_prod.Lotto.indexOf(lotto_inserito);\n            let idxArticolo = cod_prod.Articolo.indexOf(lotto_inserito);\n            //solo uno dei 2 deve essere > 0 se o un lotto o un articolo trovati\n            let idx = -1;\n            let str_msg =\"Lotto o Articolo non trovati nel database\";\n            if (idxLotto > 0 && idxArticolo<0)\n            {\n                //è stato inserito un codice lotto\n                idx = idxLotto;\n                str_msg = \"Lotto caricato con successo\";\n            }\n            else if (idxLotto < 0 && idxArticolo > 0)\n            {\n                //è stato inserito un codice articolo\n                idx = idxArticolo;\n                str_msg = \"Articolo caricato con successo\";\n            }\n            else if (idxLotto > 0 && idxArticolo > 0)\n            {\n                //questa situazione non dovrebbe mai accadere a meno che la stringa lotto non combacia con stringa articolo\n                //diamo priorità al lotto che carica anche l'articolo\n                idx = idxLotto;\n                str_msg = \"Lotto caricato con successo\";\n            }           \n            //console.warn(lotto_inserito+ \" \" + idx);\n            \n            let obj = {}\n            if (idx < 0 || lotto_inserito==\"\")\n            {\n                //Lotto non presente nel database (csv fornito)\n                obj = {\n                    \"Lotto\": lotto_inserito, \"Articolo\": \"0\",\n                    \"AngoloSXmin\": \"0\", \"AngoloSXmax\": \"0\", \"AngoloDXmin\": \"0\",\n                    \"AngoloDXmax\": \"0\", \"HC\": \"0\", \"err_str\": str_msg, \"err_status\" : true, \"Note\": \"---\"\n                };\n                //salvalo come variabile globale anche\n                global.set(\"GLOBALI.LottoInLavorazione\", obj);\n            }\n            else\n            {\n                //lotto torvato carica i parametri del lotto\n                obj = { \"Lotto\": cod_prod.Lotto[idx], \"Articolo\": cod_prod.Articolo[idx],\n                    \"AngoloSXmin\": cod_prod.AngoloSXmin[idx],\n                    \"AngoloSXmax\": cod_prod.AngoloSXmax[idx],\n                    \"AngoloDXmin\": cod_prod.AngoloDXmin[idx],\n                    \"AngoloDXmax\": cod_prod.AngoloDXmax[idx],\n                    \"HC\": cod_prod.HC[idx],\n                    \"err_str\": str_msg, \"err_status\": false, \"Note\": \"---\"};\n\n                //salvalo come variabile globale anche\n                global.set(\"GLOBALI.LottoInLavorazione\", obj);\n                \n            }\n            msg.payload = { \"function\": \"carica_params_lotto\", \"value\": obj };\n        break;\n    }\n    case \"req_algo_di_stima\":\n    {\n            let algo_div_punti = global.get(\"PARAMETRI.algoritmi.divisione\");\n            let algo_linefitting = global.get(\"PARAMETRI.algoritmi.stima_rette\");\n            msg.payload = {\n                \"function\": \"req_algo_di_stima\",\n                    \"value\": { \"divisione\": algo_div_punti, \"stima_rette\": algo_linefitting } };\n        break;\n    }\n    case \"req_flusso_dati\":\n    {\n        let flusso = global.get(\"PARAMETRI.flusso_dati\");\n        \n        msg.payload = {\n            \"function\": \"req_flusso_dati\",\n            \"value\": flusso\n        };\n        break;\n    }\n    case \"setta_algoritmi\":\n    {\n        let algo_div_punti = msg.payload.value.divisione;\n        let algo_linefitting = msg.payload.value.stima_rette;\n            if (algo_div_punti === \"med\" || algo_div_punti === \"std\")\n                global.set(\"PARAMETRI.algoritmi.divisione\", algo_div_punti);\n            if (algo_linefitting === \"ransac\" || algo_linefitting === \"lineare\")\n                global.set(\"PARAMETRI.algoritmi.stima_rette\", algo_linefitting);\n        break;\n    }\n    case \"salva_risultato\":\n    {\n            var note = msg.payload.value;\n            global.set(\"GLOBALI.LottoInLavorazione.Note\",note);\n            global.set(\"GLOBALI.salvataggi.salva_risultato\", true);\n\n        break;\n    }\n    case \"salva_profilo\":\n    {\n            \n        global.set(\"GLOBALI.salvataggi.salva_profilo\", true);\n        break;\n    }\n    case \"toggle_pausa_stream_dati\":\n    {\n            //toggle\n            var stream_dati_in_pausa = global.get(\"GLOBALI.stream_dati_in_pausa\");\n            var toggled = !stream_dati_in_pausa;\n            global.set(\"GLOBALI.stream_dati_in_pausa\", toggled);\n\n            msg.payload = { \"function\": \"toggle_pausa_stream_dati\", \"value\": toggled };\n        break;\n    }\n    case \"req_carica_profilo_da_csv\":\n    {\n        let percorso_assoluto_file_csv = msg.payload.value;\n        global.set(\"GLOBALI.carica_profilo_da_csv.abs_path\", percorso_assoluto_file_csv);\n        global.set(\"GLOBALI.carica_profilo_da_csv.stato\", true);\n\n        //msg.payload = { \"function\": \"toggle_pausa_stream_dati\", \"value\": toggled };\n        break;\n    }\n    case \"setta_flusso_dati\":\n    {\n        let flusso = msg.payload.value;\n        \n            if (flusso === \"daProf\" || flusso === \"daCsv\")\n                global.set(\"PARAMETRI.flusso_dati\", flusso);\n       \n        break;\n    }\n    case \"aggiorna_tabella_file_profili\":\n    {\n        \n            global.set(\"GLOBALI.aggiorna_tabella_file_profili\", true);\n\n        break;\n    }\n    case \"aggiorna_file_lotti_articoli\":\n    {\n\n            global.set(\"GLOBALI.aggiorna_file_lotti_articoli\", true);\n\n        break;\n    }\n    case \"aggiorna_parametri_ritentivi\":\n    {\n\n        global.set(\"GLOBALI.aggiorna_parametri_ritentivi\", true);\n\n        break;\n    }\n\n        \n\n    case \"req_aggiornamento_pagina\":\n    {\n        //stato della pause dello stream\n        var stream_dati_in_pausa = global.get(\"GLOBALI.stream_dati_in_pausa\");\n        \n        msg2.fcn.push({ \"function\": \"toggle_pausa_stream_dati\", \"value\": stream_dati_in_pausa });\n\n        //dati lotto in uso\n        var lotto_in_uso= global.get(\"GLOBALI.LottoInLavorazione\");\n        msg2.fcn.push({ \"function\": \"carica_params_lotto\", \"value\": lotto_in_uso });\n\n        //aggiorna la tabella con la lista dei profili in csv\n        global.set(\"GLOBALI.aggiorna_tabella_file_profili\", true);\n\n    }\n\n    default:\n        \n}\n\n\n\n\nreturn [msg, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "f961fd6dbc7054a0"
            ],
            [
                "e550a3035ff2ced5",
                "202b73d7847142d4"
            ]
        ]
    },
    {
        "id": "d5227be6bfbb78cd",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "http://127.0.0.1:1880/dayco_profilo",
        "info": "http://127.0.0.1:1880/dayco_profilo",
        "x": 200,
        "y": 160,
        "wires": []
    },
    {
        "id": "32b10f10f9536811",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "INVIO MESSAGGI ALLA PAGINA WEB",
        "info": "",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "0f24f8d1e82f773b",
        "type": "websocket out",
        "z": "98a3eee5c375d831",
        "name": "",
        "server": "27824c37.1dfa24",
        "client": "",
        "x": 740,
        "y": 540,
        "wires": []
    },
    {
        "id": "f4d6df22675c88ad",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "fake aggiorna chart",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"aggiorna_chart\",\"value\":[{\"x\":0,\"y\":0},{\"x\":10,\"y\":5},{\"x\":20,\"y\":10},{\"x\":30,\"y\":20},{\"x\":-20,\"y\":25}]}",
        "payloadType": "json",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "c81dc6d4bcd06536"
            ]
        ]
    },
    {
        "id": "5f1de224ca2741c5",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "messages",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"messages\", \"value\":\"Ciao Belli\"}",
        "payloadType": "str",
        "x": 260,
        "y": 540,
        "wires": [
            [
                "c81dc6d4bcd06536"
            ]
        ]
    },
    {
        "id": "e7cb50a3eedd091c",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "echo",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"echo\", \"value\":\"invio ack\"}",
        "payloadType": "str",
        "x": 270,
        "y": 580,
        "wires": [
            [
                "c81dc6d4bcd06536"
            ]
        ]
    },
    {
        "id": "b42aca4b833d2597",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "info",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"info\", \"value\":\"INFORMAZIONI...\"}",
        "payloadType": "str",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "c81dc6d4bcd06536"
            ]
        ]
    },
    {
        "id": "c81dc6d4bcd06536",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "WS",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 465,
        "y": 540,
        "wires": []
    },
    {
        "id": "06e25fa3b990a25b",
        "type": "link in",
        "z": "98a3eee5c375d831",
        "name": "WS",
        "links": [
            "c81dc6d4bcd06536",
            "f961fd6dbc7054a0",
            "c9f346426edf3322",
            "f93a089c065e9068",
            "a0a8b3cbd42f1353",
            "f656d41adabeb5be",
            "38f256427efb957f",
            "9d38a367eedc4e2a",
            "29882ee8e5825337",
            "132ccd62ef435617",
            "660363939bf7d56b"
        ],
        "x": 575,
        "y": 540,
        "wires": [
            [
                "0f24f8d1e82f773b"
            ]
        ]
    },
    {
        "id": "ea7c8f4ef60a5b90",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "0d154281c3fae512",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "string to json",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "f3516eef01913376"
            ]
        ]
    },
    {
        "id": "f961fd6dbc7054a0",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 1075,
        "y": 320,
        "wires": []
    },
    {
        "id": "8294315b34e73be5",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "date_time",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"date_time\",\"value\":\"...\"}",
        "payloadType": "json",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "f43f7bf0e9c93035"
            ]
        ]
    },
    {
        "id": "f43f7bf0e9c93035",
        "type": "moment",
        "z": "98a3eee5c375d831",
        "name": "ts to YYYYMMDD_HHmmss",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "it-IT",
        "output": "datetime",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "cb97b223f2949a00"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "cb97b223f2949a00",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "",
        "func": "msg.payload.value=msg.datetime;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 700,
        "wires": [
            [
                "c9f346426edf3322"
            ]
        ]
    },
    {
        "id": "c9f346426edf3322",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 855,
        "y": 700,
        "wires": []
    },
    {
        "id": "7c369e75c95e923d",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "INVIO CICLICLO TIMESTAMP ALLA PAGINA WEB",
        "info": "",
        "x": 590,
        "y": 660,
        "wires": []
    },
    {
        "id": "9a4104ee578a4783",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "INVIO CICLICLO ANGOLO ROTAZIONE PIANO E OFFSETS ALLA PAGINA WEB",
        "info": "",
        "x": 570,
        "y": 780,
        "wires": []
    },
    {
        "id": "b3eb02a2408fc513",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Lettura Angolo di Rotazione del Piano E OFFSETS",
        "func": "\nvar rotazione = global.get(\"PARAMETRI.calibrazione.rotazione_piano\");\nvar obj = { \"function\": \"rotazione\", \"value\": rotazione};\nmsg.payload = obj;\n\nvar offset_angolo_sx = global.get(\"PARAMETRI.calibrazione.offset_angolo_sx\");\nvar offset_angolo_dx = global.get(\"PARAMETRI.calibrazione.offset_angolo_dx\");\nvar offset_lt = global.get(\"PARAMETRI.calibrazione.offset_lt\");\nvar obj2 = { \"function\": \"aggiorna_offsets_misura\", \n            \"value\": {  \"offset_angolo_sx\": offset_angolo_sx,\n                        \"offset_angolo_dx\": offset_angolo_dx,\n                        \"offset_lt\": offset_lt } };\nvar msg2={};\nmsg2.payload = obj2;\n\nreturn [msg, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 820,
        "wires": [
            [
                "f93a089c065e9068"
            ],
            [
                "f93a089c065e9068"
            ]
        ]
    },
    {
        "id": "503a66102d535a4f",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "Angolo Rotazione Piano",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "b3eb02a2408fc513"
            ]
        ]
    },
    {
        "id": "f93a089c065e9068",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 975,
        "y": 820,
        "wires": []
    },
    {
        "id": "cdb2d5949703c15b",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "DATI SENSORE",
        "func": "\nvar stream_dati_in_pausa = global.get(\"GLOBALI.stream_dati_in_pausa\");\n//esegue il freeze\nif (stream_dati_in_pausa)\n{\n    return;\n}\n\nif (msg.hasOwnProperty('flusso_dati') && msg.flusso_dati.points.length>0 ) {\n    let dati= msg.flusso_dati;\n    \n    let count_alive = global.get(\"GLOBALI.count_alive\");\n    count_alive=count_alive+1;\n    if (count_alive>100)\n    {\n        count_alive=0;\n    }\n    global.set(\"GLOBALI.count_alive\",count_alive);\n    \n    msg.payload = {};\n    \n    msg.payload.function    =\"aggiorna_chart\";\n    msg.payload.value       =dati.points;\n    msg.payload.count_alive =count_alive;\n    return msg;\n}\nelse{\n    msg.payload = {};\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 960,
        "wires": [
            [
                "a0a8b3cbd42f1353",
                "4a91f258935c27bc"
            ]
        ]
    },
    {
        "id": "9aafa0b132f29615",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "FLUSSO DATI PROFILO RAW RICEVUTO DAL SENSORE E INVIO ALLA PAGINA WEB",
        "info": "",
        "x": 570,
        "y": 860,
        "wires": []
    },
    {
        "id": "a0a8b3cbd42f1353",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 1015,
        "y": 960,
        "wires": []
    },
    {
        "id": "51faa18fd8eb6cf4",
        "type": "link in",
        "z": "98a3eee5c375d831",
        "name": "DATI LIVE DA BAUMER",
        "links": [
            "9414813b.beed9"
        ],
        "x": 265,
        "y": 940,
        "wires": [
            [
                "cdb2d5949703c15b"
            ]
        ]
    },
    {
        "id": "6596f957f45fc2db",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "SIMULAZIONI DATI PROFILOMETRO",
        "info": "",
        "x": 270,
        "y": 980,
        "wires": []
    },
    {
        "id": "17b766de82e53283",
        "type": "link in",
        "z": "98a3eee5c375d831",
        "name": "dati profilo simulati in",
        "links": [
            "e75f96ae7eb85fac"
        ],
        "x": 265,
        "y": 1020,
        "wires": [
            [
                "cdb2d5949703c15b"
            ]
        ]
    },
    {
        "id": "f9783150df08d734",
        "type": "switch",
        "z": "98a3eee5c375d831",
        "name": "",
        "property": "PARAMETRI.algoritmi.divisione",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "med",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "std",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1320,
        "wires": [
            [
                "013fbc4857b34acf"
            ],
            [
                "2410b90a6b9f6e69"
            ]
        ]
    },
    {
        "id": "f208c60da83b3805",
        "type": "switch",
        "z": "98a3eee5c375d831",
        "name": "",
        "property": "PARAMETRI.algoritmi.stima_rette",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "ransac",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "lineare",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1580,
        "wires": [
            [
                "071801823be420ec"
            ],
            [
                "bb67b8e712e11afa"
            ]
        ]
    },
    {
        "id": "071801823be420ec",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ransac base",
        "func": "if (msg.errore.stato)\n    return msg;\ntry\n{\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_inferiori;\n\n\n    global.set(\"GLOBALI.ransac_problema.data\", data);\n    var problema = global.get(\"GLOBALI.ransac_problema\");\n    var params = global.get(\"PARAMETRI.ransac.base\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n    // node.warn('solution ok');\n    //msg.ransac={};\n    msg.ransac.soluz_base = solution;\n    //rotazione di +90 CCW della retta della base\n    // y' = x\n    // x' = - (m*y'+b) \n    //msg.ransac.soluz_normale_alla_base = {};\n    //msg.ransac.soluz_normale_alla_base.model = {};\n    msg.ransac.soluz_normale_alla_base.model.m = -solution.model.m;\n    msg.ransac.soluz_normale_alla_base.model.b = -solution.model.b;\n\n    if (solution.status !== \"Success\")\n    {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Base\";\n        node.status({ text: \"WARN: \" + msg.errore.msg });\n    }\n    else {\n        node.status({ text: \"DONE\" });\n    }\n\n}\ncatch(er)\n{\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n\n    node.status({ text: \"ERROR\" });\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1740,
        "wires": [
            [
                "91b202e9e074fe08"
            ]
        ]
    },
    {
        "id": "c4a2f57d2a791b2d",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ransac massimi",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_superiori;\n\n    global.set(\"GLOBALI.ransac_problema.data\", data);\n    var problema = global.get(\"GLOBALI.ransac_problema\");\n    var params = global.get(\"PARAMETRI.ransac.massimi\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n\n\n    msg.ransac.soluz_massimi = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Superiore\";\n        node.status({ text: \"WARN: \" + msg.errore.msg });\n    }\n    else\n    {\n        node.status({ text: \"DONE\" });\n    }\n\n    \n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1860,
        "wires": [
            [
                "2651447fa3b0afcd"
            ]
        ]
    },
    {
        "id": "2651447fa3b0afcd",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ransac lato sx",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry\n{\n\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_latosx;\n\n    global.set(\"GLOBALI.ransac_problema.data\", data);\n    var problema = global.get(\"GLOBALI.ransac_problema\");\n    var params = global.get(\"PARAMETRI.ransac.sx\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n\n    msg.ransac.soluz_latosx = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Lato SX\";\n        node.status({ text: \"WARN: \" + msg.errore.msg });\n    }\n    else {\n        node.status({ text: \"DONE\" });\n    }\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1920,
        "wires": [
            [
                "39a804e54836cd91"
            ]
        ]
    },
    {
        "id": "39a804e54836cd91",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ransac lato dx",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n\n\n    var Ransac=global.get('ransac');\n\n    var data = msg.divisione.punti_latodx;\n\n    global.set(\"GLOBALI.ransac_problema.data\", data);\n    var problema = global.get(\"GLOBALI.ransac_problema\");\n    var params = global.get(\"PARAMETRI.ransac.dx\");\n\n\n    var ransacProblem = new Ransac(problema);\n\n    var solution = ransacProblem.estimate(params);\n    msg.ransac.soluz_latodx = solution;\n\n    if (solution.status !== \"Success\") {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Fallita Stima Retta Lato DX\";\n        node.status({ text: \"WARN: \" + msg.errore.msg });\n    }\n    else {\n        node.status({ text: \"DONE\" });\n    }\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1980,
        "wires": [
            [
                "a216570c118538ad"
            ]
        ]
    },
    {
        "id": "a216570c118538ad",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Calcolo Intersezioni",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n\n    var offset_lt = global.get(\"PARAMETRI.calibrazione.offset_lt\");\n\n    var retta_base = msg.ransac.soluz_base;\n    var retta_sx = msg.ransac.soluz_latosx;\n    var retta_dx = msg.ransac.soluz_latodx;\n\n\n    //intersezione BASE-SX\n    var Dintersect = (retta_sx.model.b - retta_base.model.b);\n    var Dslope = (retta_base.model.m - retta_sx.model.m);\n    var x_base_sx = Dintersect / Dslope;\n    var y_base_sx = retta_base.model.m * x_base_sx + retta_base.model.b;\n    //console.warn(\"==INTERSEZIONE BASE-SX==\")\n    //console.warn(\"x:\" + x_base_sx + \" z:\" + y_base_sx + \"\\n\");\n\n    //intersezione BASE-DX\n    Dintersect = (retta_dx.model.b - retta_base.model.b);\n    Dslope = (retta_base.model.m - retta_dx.model.m);\n    var x_base_dx = Dintersect / Dslope;\n    var y_base_dx = retta_base.model.m * x_base_dx + retta_base.model.b;\n    //console.warn(\"==INTERSEZIONE BASE-DX==\")\n    //console.warn(\"x:\" + x_base_dx + \" z:\" + y_base_dx + \"\\n\");\n\n    //distanza LT\n    var dX = (x_base_dx - x_base_sx);\n    var dY = (y_base_dx - y_base_sx);\n    var dX2 = dX*dX;\n    var dY2 = dY*dY;\n    var lt = Math.sqrt(dX2 + dY2) + offset_lt;\n    //console.warn(\"==DISTANZA Lt==\")\n    //console.warn(\"Lt:\" + lt + \"mm\\n\");\n    //msg.stima={};\n    //msg.stima.intersezione={};\n    msg.stima.intersezione.base_sx = { \"x\": x_base_sx, \"y\": y_base_sx};\n    msg.stima.intersezione.base_dx = { \"x\": x_base_dx, \"y\": y_base_dx };\n    msg.stima.intersezione.lt = lt;\n    msg.stima.intersezione.lt_fixed = lt.toFixed(3); //3 cifre dopo la virgola\n\n    node.status({ text: \"DONE\" });\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2040,
        "wires": [
            [
                "495b8f472a1b1943"
            ]
        ]
    },
    {
        "id": "495b8f472a1b1943",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Calcolo Angoli",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry\n{\n\n    //carico gli offsets\n    var offset_angolo_sx = global.get(\"PARAMETRI.calibrazione.offset_angolo_sx\");\n    var offset_angolo_dx = global.get(\"PARAMETRI.calibrazione.offset_angolo_dx\");\n    //var offset_lt = global.get(\"PARAMETRI.calibrazione.offset_lt\");\n\n    //ANGOLO TRA LATO SX E NORMALE ALLA BASE\n    var m_normbase = msg.ransac.soluz_normale_alla_base.model.m;\n    var m_sx = msg.ransac.soluz_latosx.model.m;\n    var alfa_sx_norm_base = (90 - Math.atan2(m_normbase + m_sx, 1 + m_normbase * m_sx) * (180.0 / Math.PI)) + offset_angolo_sx;\n    //var alfa_sx_norm_base = Math.atan(-m_normbase + m_sx / (1 + m_normbase * m_sx)) * 180.0 / Math.PI;\n    //msg.stima.angolo={};\n    msg.stima.angolo.sx = alfa_sx_norm_base;\n    msg.stima.angolo.sx_fixed = alfa_sx_norm_base.toFixed(3);//3 cifre dopo la virgola\n    //console.warn(\"==ANGOLO RETTA SX==\")\n    //console.warn(\"Asx: \" + alfa_sx_norm_base + \"°\\n\");\n\n\n    //ANGOLO TRA LATO DX E NORMALE ALLA BASE\n    //var m_normbase = msg.ransac.soluz_normale_alla_base.model.m;\n    var m_dx = msg.ransac.soluz_latodx.model.m;\n    var alfa_dx_norm_base = (90 + Math.atan2(m_normbase + m_dx, 1 + m_normbase * m_dx) * (180.0 / Math.PI)) + offset_angolo_dx;\n    //var alfa_dx_norm_base = Math.atan(-m_normbase + m_dx / (1 + m_normbase * m_dx)) * 180.0 / Math.PI;\n    msg.stima.angolo.dx = alfa_dx_norm_base;\n    msg.stima.angolo.dx_fixed = alfa_dx_norm_base.toFixed(3);//3 cifre dopo la virgola\n    //console.warn(\"==ANGOLO RETTA DX==\")\n    //console.warn(\"Adx: \" + alfa_dx_norm_base + \"°\\n\");\n\n    //ANGOLO RETTA BASE RISPETTO ASSE DELLE ASCISSE\n    var angolo_retta_base_rispetto_ascisse = Math.round((18000 * (Math.atan(msg.ransac.soluz_base.model.m) / Math.PI))) / 100;\n    //ANGOLO RETTA SUPERIORE RISPETTO ASSE DELLE ASCISSE\n    var angolo_superiore_rispetto_ascisse = Math.round((18000 * (Math.atan(msg.ransac.soluz_massimi.model.m) / Math.PI))) / 100;\n\n\n    //info\n    var info = msg.stima.info;\n    //RETTA SX\n    var eq_retta = \"y= \" + msg.ransac.soluz_latosx.model.m.toFixed(3) + \"x + \" + msg.ransac.soluz_latosx.model.b.toFixed(3);\n    info = info + \"<font color='#FF00FF'>Linea Sinistra: </font>\" + \"Punti = \" + msg.divisione.punti_latosx.length + \"; \" + eq_retta + \" (r^2=\" + msg.ransac.soluz_latosx.error.toFixed(3) + \"); Angolo rispetto normale base: \" + msg.stima.angolo.sx_fixed + \"°<br>\";\n\n    //RETTA DX\n    eq_retta = \"y= \" + msg.ransac.soluz_latodx.model.m.toFixed(3) + \"x + \" + msg.ransac.soluz_latodx.model.b.toFixed(3);\n    info = info + \"<font color='#55ff55'>Linea Destra: </font>\" + \"Punti = \" + msg.divisione.punti_latodx.length + \"; \" + eq_retta + \" (r^2=\" + msg.ransac.soluz_latodx.error.toFixed(3) + \"); Angolo rispetto normale base: \" + msg.stima.angolo.dx_fixed + \"°<br>\";\n\n    //RETTA SUPERIORE\n    eq_retta = \"y= \" + msg.ransac.soluz_massimi.model.m.toFixed(3) + \"x + \" + msg.ransac.soluz_massimi.model.b.toFixed(3);\n    info = info + \"<font color='#ff0000'>Linea Superiore: </font>\" + \"Punti = \" + msg.divisione.punti_superiori.length + \"; \" + eq_retta + \" (r^2=\" + msg.ransac.soluz_massimi.error.toFixed(3) + \"); Angolo rispetto ascisse: \" + angolo_superiore_rispetto_ascisse + \"°<br>\";\n\n    //RETTA INFERIORE\n    eq_retta = \"y= \" + msg.ransac.soluz_base.model.m.toFixed(3) + \"x + \" + msg.ransac.soluz_base.model.b.toFixed(3);\n    info = info + \"<font color='#0000ff'>Linea Inferiore: </font>\" + \"Punti = \" + msg.divisione.punti_inferiori.length + \"; \" + eq_retta + \" (r^2=\" + msg.ransac.soluz_base.error.toFixed(3) + \"); Angolo rispetto ascisse: \" + angolo_retta_base_rispetto_ascisse + \"°<br>\";\n\n\n\n\n    msg.stima.info = info;\n    node.status({ text: \"DONE\" });\n\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2100,
        "wires": [
            [
                "ca8bd78fa259c30b"
            ]
        ]
    },
    {
        "id": "bb67b8e712e11afa",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ALGO REGRESSIONE LINEARE LS",
        "func": "if (msg.errore.stato)\n    return msg;\ntry{\n\n    //carico gli offsets\n    var offset_angolo_sx = global.get(\"PARAMETRI.calibrazione.offset_angolo_sx\");\n    var offset_angolo_dx = global.get(\"PARAMETRI.calibrazione.offset_angolo_dx\");\n    //var offset_lt = global.get(\"PARAMETRI.calibrazione.offset_lt\");\n\nvar regression = global.get('modulo_regressione');\nvar info = msg.stima.info;\nvar json_ = {\"x\":0,\"y\":0};\n\n\nvar offset_disegno_linee_sup_inf = global.get(\"PARAMETRI.viz.offset_disegno_linee_sup_inf\");\n//var d = 1; //offset per il disegno delle linee sup e inf\n\n\nvar dati_sup = msg.divisione.punti_superiori;\nvar dati_inf = msg.divisione.punti_inferiori;\n//var dati_sx = msg.divisione.punti_latosx;\n//var dati_dx = msg.divisione.punti_latodx;\n\nvar point_sup_1 = msg.divisione.point_sup_1;\nvar point_sup_2 = msg.divisione.point_sup_2;\n\nvar angolo_sx = 0;\nvar angolo_dx = 0;\nvar m_normbase = 1;\n\n// ########### REGRESSIONE LINEA INF  ###########\nnode.status({ text: \"regressione linea inf\" });\nvar chart_linea_inf = [];\nif (dati_inf.length > 1) {\n    var result_inf = regression.linear(dati_inf);\n    var gradient_inf = result_inf.equation[0];\n    var yIntercept_inf = result_inf.equation[1];\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = dati_inf[0][0] - offset_disegno_linee_sup_inf;\n    json_.y = (dati_inf[0][0] - offset_disegno_linee_sup_inf) * gradient_inf + yIntercept_inf;\n    chart_linea_inf.push(json_);\n\n    msg.lineare.soluz_base.model.m = gradient_inf;\n    msg.lineare.soluz_base.model.b = yIntercept_inf;\n    msg.lineare.soluz_normale_alla_base.model.m = -gradient_inf;\n    msg.lineare.soluz_normale_alla_base.model.b = -yIntercept_inf;\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = dati_inf[dati_inf.length - 1][0] + offset_disegno_linee_sup_inf;\n    json_.y = (dati_inf[dati_inf.length - 1][0] + offset_disegno_linee_sup_inf) * gradient_inf + yIntercept_inf;\n    chart_linea_inf.push(json_);\n\n    info = info + \"<font color='#0000ff'>Linea Inferiore: </font>\" + \"Punti = \" + dati_inf.length + \"; \" + result_inf.string + \" (r^2=\" + result_inf.r2 + \"); Angolo rispetto ascisse: \" + Math.round((18000 * (Math.atan(gradient_inf) / Math.PI))) / 100 + \"°<br>\";\n}\nelse {\n    info = info + \"<font color='#0000ff'>Linea Inferiore: </font>\" + \"Punti = \" + dati_inf.length + \" <br>\";\n    chart_linea_inf = [{ \"x\": 0, \"y\": 0 }];\n    msg.errore.stato = true;\n    msg.errore.msg = \"[ERR] Punti Linea Inferiore non sufficienti (\" + dati_inf.length + \")\";\n}\n\n// ######### FILTRO HC LATI SX-DX #############\n    \n    try {\n\n        let lato_sinistro = msg.divisione.punti_latosx;\n        let lato_destro = msg.divisione.punti_latodx;\n        //console.warn(\"-----\\n\");\n        //console.warn(lato_sinistro.length);\n        //console.warn(lato_sinistro);\n        //console.warn(lato_destro.length);\n        //console.warn(lato_destro);\n        let hc = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.HC\").replace(',', '.'));\n        //console.warn(\"hc: \" + hc);\n        //retta base y=mx+q\n        let m = msg.lineare.soluz_base.model.m;\n        let q = msg.lineare.soluz_base.model.b;\n        //console.warn(\"-----\\n\");\n        //console.warn(\"m: \"+m);\n        //console.warn(\"q: \" + q);\n\n\n        //ax+by+c=0 -> by = -ax-c -> y= -a/bx - c/b -> m=-a/b q=-c/b \n        //y=mx+q -> 0 = mx-y+q -> a=m -> b=-1 -> c=q\n        let a = m;\n        let b = -1;\n        let c = q;\n\n        \n        //console.warn(\"Math.sqrt(a * a + b * b): \" + Math.sqrt(a * a + b * b));\n        //calcolo distanza punto vs retta base\n        //dist = |ax0 + by0+c|/sqrt(a^2+b^2)\n\n        //LATOSX\n        let lista_punti_sx = [];\n        var chart_points_sx = [];\n        var chart_punti_sotto_hc = [];\n        for (let i = 0; i < lato_sinistro.length; i++) {\n            const x0 = lato_sinistro[i][0];\n            const y0 = lato_sinistro[i][1];\n\n            let dist = Math.abs(a * x0 + b * y0 + c) / Math.sqrt(a * a + b * b);\n            /*\n            console.warn(\"a \"+ a + \"b \"+ b + \"c \" + c + \"x0 \"+ x0 + \"y0 \"+y0);\n            console.warn(\"Math.abs(a * x0 + b * y0 + c): \" + Math.abs(a * x0 + b * y0 + c));\n            console.warn(\"Math.sqrt(a * a + b * b): \" + Math.sqrt(a * a + b * b));\n            console.warn(\"SX\")\n            console.warn(dist)\n            */\n            let jason = {};\n            if (dist > hc) {\n                jason.x = x0;\n                jason.y = y0;\n                chart_points_sx.push(jason);\n                lista_punti_sx.push([x0, y0]);\n            }\n            else\n            {\n                jason.x = x0;\n                jason.y = y0;\n                chart_punti_sotto_hc.push(jason);\n            }\n\n        }\n\n        //LATODX\n        let lista_punti_dx = [];\n        var chart_points_dx=[];\n        for (let i = 0; i < lato_destro.length; i++) {\n            const x0 = lato_destro[i][0];\n            const y0 = lato_destro[i][1];\n\n            let dist = Math.abs(a * x0 + b * y0 + c) / Math.sqrt(a * a + b * b);\n            //console.warn(\"DX\")\n            //console.warn(dist)\n            let jason = {};\n            if (dist > hc) {\n                jason.x = x0;\n                jason.y = y0;\n                chart_points_dx.push(jason);\n                lista_punti_dx.push([x0,y0]);\n            }\n            else {\n                jason.x = x0;\n                jason.y = y0;\n                chart_punti_sotto_hc.push(jason);\n            }\n\n        }\n\n        //punti lato SX usati per il calcolo del ransac retta sx\n        msg.viz.punti_latosx = chart_points_sx;\n\n        //punti lato DX usati per il calcolo del ransac retta dx\n        msg.viz.punti_latodx = chart_points_dx;\n\n        //punti che ricadono sotto il filtro HC\n        msg.viz.punti_sotto_hc = chart_punti_sotto_hc;\n\n        //aggiorno i punti lato sx - dx\n        msg.divisione.punti_latosx = lista_punti_sx;\n        msg.divisione.punti_latodx = lista_punti_dx;\n\n\n        //controllo che ogni arrray abbia i punti minimi sufficienti per eseguire i calcoli successivi\n        var n_min_punti = global.get(\"PARAMETRI.divisione.n_min_punti\");\n        if (lista_punti_sx.length < n_min_punti) {\n            msg.errore.stato = true;\n            msg.errore.msg = \"Num. Minimo Punti lato sx: \" + lista_punti_sx.length + \" < \" + n_min_punti;\n        }\n        if (lista_punti_dx.length < n_min_punti) {\n            msg.errore.stato = true;\n            msg.errore.msg = \"Num. Minimo Punti lato dx: \" + lista_punti_dx.length + \" < \" + n_min_punti;\n        }\n\n\n        \n    }\n    catch (er) {\n\n        msg.errore.stato = true;\n        msg.errore.msg = er.message;\n        node.status({ text: \"ERROR\" });\n        //console.error(msg.errore.msg);\n        return msg;\n    };\n\n//riarico i punti lato sx-dx dopo il filtro HC\nvar dati_sx = msg.divisione.punti_latosx;\nvar dati_dx = msg.divisione.punti_latodx;\n\n\n// ########### REGRESSIONE LINEA SX  ###########\nnode.status({ text: \"regressione linea sx\" });\nvar chart_linea_sx = [];\n\nif (dati_sx.length > 1) {\n    var result_sx = regression.linear(dati_sx);\n    var gradient_sx = result_sx.equation[0];\n    var yIntercept_sx = result_sx.equation[1];\n    var x1s = 0;\n    var x2s = 0;\n\n    if (gradient_sx !== 0) {\n        x1s = (-1 - yIntercept_sx) / gradient_sx;\n        x2s = (point_sup_1.y - yIntercept_sx + 1) / gradient_sx;\n    }\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = x1s;\n    json_.y = x1s * gradient_sx + yIntercept_sx;\n    chart_linea_sx.push(json_);\n    //console.log(json_);\n    msg.lineare.soluz_latosx.model.m = gradient_sx;\n    msg.lineare.soluz_latosx.model.b = yIntercept_sx;\n \n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = x2s;\n    json_.y = x2s * gradient_sx + yIntercept_sx;\n    //console.log(json_);\n    chart_linea_sx.push(json_);\n\n    m_normbase = msg.lineare.soluz_normale_alla_base.model.m;\n    var m_sx = msg.lineare.soluz_latosx.model.m;\n    var alfa_sx_norm_base = (90 - Math.atan2(m_normbase + m_sx, 1 + m_normbase * m_sx) * (180.0 / Math.PI)) + offset_angolo_sx;\n    angolo_sx = alfa_sx_norm_base;\n\n    //angolo_sx = 90-Math.round((18000 * (Math.atan(gradient_sx) / Math.PI))) / 100;\n\n    info = info + \"<font color='#FF00FF'>Linea Sinistra: </font>\" + \"Punti = \" + dati_sx.length + \"; \" + result_sx.string + \" (r^2=\" + result_sx.r2 + \"); Angolo rispetto normale base: \" + angolo_sx.toFixed(3) + \"°<br>\";\n} else {\n    info = info + \"<font color='#FF00FF'>Linea Sinistra: </font>\" + \"Punti = \" + dati_sx.length + \" <br>\";\n    chart_linea_sx = [{ \"x\": 0, \"y\": 0 }];\n    msg.errore.stato = true;\n    msg.errore.msg = \"[ERR] Punti Linea Sx non sufficienti (\" + dati_sx.length+\")\";\n}\n\n\n// ########### REGRESSIONE LINEA DX  ###########\nnode.status({ text: \"regressione dx\" });\nvar chart_linea_dx = [];\n\n// dati_dx=            dati_dx.slice(5, -5);\n// chart_points_dx=    chart_points_dx.slice(5,-5);\n\n// dati_dx=[[18,15],[19,10],[20,5]];\n// chart_points_dx=[{\"x\":18,\"y\":15},{\"x\":19,\"y\":10},{\"x\":20,\"y\":5}]\n\nif (dati_dx.length > 1) {\n    var result_dx = regression.linear(dati_dx);\n    var gradient_dx = result_dx.equation[0];\n    var yIntercept_dx = result_dx.equation[1];\n    var x1d = 0;\n    var x2d = 0;\n\n    if (gradient_dx !== 0) {\n        x1d = (point_sup_2.y - yIntercept_dx + 1) / gradient_dx;\n        x2d = (-1 - yIntercept_dx) / gradient_dx;\n    }\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = x1d;\n    json_.y = x1d * gradient_dx + yIntercept_dx;\n    chart_linea_dx.push(json_);\n\n    msg.lineare.soluz_latodx.model.m = gradient_dx;\n    msg.lineare.soluz_latodx.model.b = yIntercept_dx;\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = x2d;\n    json_.y = x2d * gradient_dx + yIntercept_dx;\n    chart_linea_dx.push(json_);\n\n    var m_dx = msg.lineare.soluz_latodx.model.m;\n    var alfa_dx_norm_base = (90 + Math.atan2(m_normbase + m_dx, 1 + m_normbase * m_dx) * (180.0 / Math.PI))+offset_angolo_dx;\n    angolo_dx = alfa_dx_norm_base;\n\n    //angolo_dx = 90+Math.round((18000 * (Math.atan(gradient_dx) / Math.PI))) / 100;\n    info = info + \"<font color='#55ff55'>Linea Destra: </font>\" + \"Punti = \" + dati_dx.length + \"; \" + result_dx.string + \" (r^2=\" + result_dx.r2 + \"); Angolo rispetto normale base: \" + angolo_dx.toFixed(3) + \"°<br>\";\n} else {\n    info = info + \"<font color='#55ff55'>Linea Destra: </font>\" + \"Punti = \" + dati_dx.length + \" <br>\";\n    chart_linea_dx = [{ \"x\": 0, \"y\": 0 }];\n    msg.errore.stato = true;\n    msg.errore.msg = \"[ERR] Punti Linea Dx non sufficienti (\" + dati_dx.length + \")\";\n}\n\n// msg.chart_linea_dx=chart_linea_dx;\n\n\n// ########### REGRESSIONE LINEA SUP  ###########\nnode.status({ text: \"regressione linea sup\" });\nvar chart_linea_sup = [];\nif (dati_sup.length>1)\n{\n    var result_sup = regression.linear(dati_sup);\n    var gradient_sup = result_sup.equation[0];\n    var yIntercept_sup = result_sup.equation[1];\n\n\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = point_sup_1.x - offset_disegno_linee_sup_inf;\n    json_.y = (point_sup_1.x - offset_disegno_linee_sup_inf) * gradient_sup + yIntercept_sup;\n    chart_linea_sup.push(json_);\n\n    msg.lineare.soluz_massimi.model.m = gradient_sup;\n    msg.lineare.soluz_massimi.model.b = yIntercept_sup;\n\n    json_ = { \"x\": 0, \"y\": 0 };\n    json_.x = point_sup_2.x + offset_disegno_linee_sup_inf;\n    json_.y = (point_sup_2.x + offset_disegno_linee_sup_inf) * gradient_sup + yIntercept_sup;\n    chart_linea_sup.push(json_);\n\n    info = info + \"<font color='#ff0000'>Linea Superiore: </font>\" + \"Punti = \" + dati_sup.length + \"; \" + result_sup.string + \" (r^2=\" + result_sup.r2 + \"); Angolo rispetto ascisse: \" + Math.round((18000 * (Math.atan(gradient_sup) / Math.PI))) / 100 + \"°<br>\";\n}\nelse\n{\n    info = info + \"<font color='#ff0000'>Linea Superiore: </font>\" + \"Punti = \" + dati_sup.length + \" <br>\";\n    chart_linea_sup = [{ \"x\": 0, \"y\": 0 }];\n    msg.errore.stato = true;\n    msg.errore.msg = \"[ERR] Punti Linea Superiore non sufficienti (\" + dati_sup.length + \")\";\n}\n\n\n\nmsg.viz.punti_retta_base = chart_linea_inf;\nmsg.viz.punti_retta_massimi = chart_linea_sup;\nmsg.viz.punti_retta_latosx = chart_linea_sx;\nmsg.viz.punti_retta_latodx = chart_linea_dx;\n\nmsg.stima.info = info;\n\nmsg.stima.angolo.sx = angolo_sx;\nmsg.stima.angolo.sx_fixed = angolo_sx.toFixed(3);//3 cifre dopo la virgola\n\nmsg.stima.angolo.dx = angolo_dx;\nmsg.stima.angolo.dx_fixed = angolo_dx.toFixed(3);//3 cifre dopo la virgola\n\nnode.status({ text: \"DONE\" });\n\nreturn msg;\n\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n    return msg;\n\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1740,
        "wires": [
            [
                "6030ba7ba5b436fb"
            ]
        ]
    },
    {
        "id": "82abd51423ddc6b9",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "CREAZIONE DEL PAYLOAD DA INVIARE VIA WS",
        "func": "try\n{\n    //variabili delle RETTE STIMATE\n    var chart_linea_inf = msg.viz.punti_retta_base;\n    var chart_linea_sup = msg.viz.punti_retta_massimi;\n    var chart_linea_sx = msg.viz.punti_retta_latosx;\n    var chart_linea_dx = msg.viz.punti_retta_latodx;\n\n    //VARIABILI DEI PUNTI CON CUI SI SONO STIMATE LE RETTE\n    //punti lato SX usati per il calcolo del ransac retta sx\n    var chart_points_sx = msg.viz.punti_latosx;\n\n    //punti lato DX usati per il calcolo del ransac retta dx\n    var chart_points_dx = msg.viz.punti_latodx;\n\n    //punti lato superiore usati per il calcolo del ransac retta superiore\n    var chart_points_sup = msg.viz.punti_superiori;\n\n    //punti lato inferiore (base) usati per il calcolo del ransac retta base\n    var chart_points_inf = msg.viz.punti_inferiori;\n\n    var chart_dati_ruotati = msg.viz.chart_dati_ruotati;\n\n    var chart_punti_sotto_hc = msg.viz.punti_sotto_hc;\n\n    var info = msg.stima.info;\n\n    if (msg.errore.stato)\n    {\n        //errore\n        info = info + \"<font color='#FF0000'>ERR: \" + msg.errore.msg + \"</font>\" + \"<br>\";\n        chart_linea_sx = [{\"x\":0,\"y:\":0}];\n        chart_linea_dx = [{ \"x\": 0, \"y:\": 0 }];\n        chart_linea_sup = [{ \"x\": 0, \"y:\": 0 }];\n        chart_linea_inf = [{ \"x\": 0, \"y:\": 0 }];\n        chart_points_sup = [{ \"x\": 0, \"y:\": 0 }];\n        chart_points_inf = [{ \"x\": 0, \"y:\": 0 }];\n        chart_points_sx = [{ \"x\": 0, \"y:\": 0 }];\n        chart_points_dx = [{ \"x\": 0, \"y:\": 0 }];\n        chart_punti_sotto_hc = [{ \"x\": 0, \"y:\": 0 }];\n    }\n\n    var linea_sx = { payload: { \"function\": \"aggiorna_linea_sx\", \"value\": chart_linea_sx } };\n    var linea_dx = { payload: { \"function\": \"aggiorna_linea_dx\", \"value\": chart_linea_dx } };\n    var info_out = { payload: { \"function\": \"info\", \"value\": info } };\n    var linea_sup_out = { payload: { \"function\": \"aggiorna_linea_sup\", \"value\": chart_linea_sup } };\n    var linea_inf_out = { payload: { \"function\": \"aggiorna_linea_inf\", \"value\": chart_linea_inf } };\n    var punti_sup_out = { payload: { \"function\": \"aggiorna_punti_sup\", \"value\": chart_points_sup } };\n    var punti_inf_out = { payload: { \"function\": \"aggiorna_punti_inf\", \"value\": chart_points_inf } };\n    var dati_ruotati = { payload: { \"function\": \"aggiorna_dati_ruotati\", \"value\": chart_dati_ruotati } };\n    var punti_sx = { payload: { \"function\": \"aggiorna_punti_sx\", \"value\": chart_points_sx } };\n    var punti_dx = { payload: { \"function\": \"aggiorna_punti_dx\", \"value\": chart_points_dx } };\n    var punti_intersezione = { payload: { \"function\": \"aggiorna_intersezioni\", \n        \"value\": { \"base_sx\": msg.stima.intersezione.base_sx, \"base_dx\": msg.stima.intersezione.base_dx} } };\n    var angoli_e_lt = { payload: { \"function\": \"aggiorna_angoli_e_lt\", \n        \"value\": { \"asx\": msg.stima.angolo.sx_fixed, \"adx\": msg.stima.angolo.dx_fixed, \"lt\": msg.stima.intersezione.lt_fixed , \n        \"sx_inrange\": msg.stima.angolo.sx_inrange, \"dx_inrange\": msg.stima.angolo.dx_inrange} }};\n\n    var punti_sotto_hc = { payload: { \"function\": \"aggiorna_punti_sotto_hc\", \"value\": chart_punti_sotto_hc } };\n\n    node.status({ text: \"DONE\" });\n\n    //return msg;\n    return [msg, info_out, linea_sup_out, linea_inf_out, punti_sup_out, punti_inf_out, dati_ruotati, punti_sx, punti_dx, linea_sx, linea_dx, punti_intersezione, angoli_e_lt, punti_sotto_hc];\n    //return [info_out, linea_sup_out, linea_inf_out, punti_sup_out, punti_inf_out, dati_ruotati, punti_sx, punti_dx, linea_sx, linea_dx];\n\n\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n\n};",
        "outputs": 14,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2280,
        "wires": [
            [
                "31c5b43e1464880b",
                "15928fcceeffcef4"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ],
            [
                "f656d41adabeb5be"
            ]
        ],
        "outputLabels": [
            "msg",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "id": "59766ab0bb9d88df",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "SCELTA DELL'ALGO DI SEPARAZIONE PUNTI",
        "info": "",
        "x": 520,
        "y": 1240,
        "wires": []
    },
    {
        "id": "999c69d29e4ac4d8",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "SCELTA DELL'ALGO DI FITTING RETTE",
        "info": "",
        "x": 520,
        "y": 1500,
        "wires": []
    },
    {
        "id": "8b89fe4c8c65caaf",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "ALGO RANSAC",
        "info": "",
        "x": 300,
        "y": 1700,
        "wires": []
    },
    {
        "id": "0bc462dcd9cafdaf",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "ALGO REGRESSIONE LINEARE LS",
        "info": "",
        "x": 800,
        "y": 1680,
        "wires": []
    },
    {
        "id": "992bc63ff26fb45a",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "CALCOLO ROTAZIONE LINEA MEDIANA",
        "func": "var mathjs = global.get('mathjs'); //https://mathjs.org/docs/reference/functions.html\nvar regression = global.get('modulo_regressione');\n\n\n//leggo il valore di rotazione piano dalla variabile globale\nvar rotazione = global.get(\"PARAMETRI.calibrazione.rotazione_piano\");\nif (typeof rotazione == 'undefined') {\n    global.set(\"PARAMETRI.calibrazione.rotazione_piano\", 0.0);\n    rotazione = 0;\n}\n\n\n\n\n// ########### Creazione array_xy e array_xy_originale  ###########\nnode.status({ text: \"Creazione array_xy e array_xy_originale\" });\n\nvar y_max_tmp = -9999;\nvar y_min_tmp = 9999;\n\nvar dati_in = msg.flusso_dati.points;//array di oggetti x,y\nvar elemento = [];\nvar array_xy_originale=[];\nvar array_xy_tmp=[];\nvar array_xy=[];\nvar array_xy_sorted_by_y = [];\nvar info = msg.stima.info;\n\nfor (let i = 0; i < dati_in.length; i++) {\n    elemento = [dati_in[i].x, dati_in[i].y];\n    array_xy_originale.push(elemento);\n\n    // ROTAZIONE dei punti\n    array_xy_tmp.push(mathjs.rotate(elemento, - mathjs.pi * rotazione / 180.0));\n\n    // ricerca massimo e minimo\n    if (array_xy_tmp[i][1] > y_max_tmp) {\n        y_max_tmp = array_xy_tmp[i][1];\n    }\n    if (array_xy_tmp[i][1] < y_min_tmp) {\n        y_min_tmp = array_xy_tmp[i][1];\n    }\n}\n\n\nvar off_set_y = 0.0;\nif (rotazione !== 0.0) {\n    off_set_y = y_min_tmp;\n}\n\nfor (let i = 0; i < array_xy_tmp.length; i++) {\n    elemento = [array_xy_tmp[i][0], array_xy_tmp[i][1] - off_set_y]\n    array_xy.push(elemento);\n    array_xy_sorted_by_y.push(elemento)\n}\n\narray_xy_sorted_by_y.sort((a, b) => a[1] - b[1]);\n\n\n// ########### REGRESSIONE dati ORIGINALI per calcolare il valore della rotazione ###########\n// (questa operazione va fatta senza la cinghia)\nnode.status({ text: \"REGRESSIONE dati ORIGINALI (senza rotazione) \" });\n\nvar result_originale = regression.linear(array_xy_originale);\nvar gradient_originale = result_originale.equation[0];\n\n// Salvataggio dell'angolo di rotazione\nvar angolo_mediana_originale = Math.round((18000 * (Math.atan(gradient_originale) / Math.PI))) / 100;\n\nglobal.set(\"GLOBALI.rotazione_linea_mediana\", angolo_mediana_originale);\ninfo = info + \"<font color='#aaaaaa'>Tendenza inclinazione dati: </font>\" + \"(r^2=\" + result_originale.r2 + \") \" + \"Angolo: \" + angolo_mediana_originale + \"<br><br>\";\n\n\n// ########### Pubblicazione dei dati ruotati ###########\nnode.status({ text: \"Chart dei dati ruotati\" });\n\nvar chart_dati_ruotati = [];\n\nfor (let i = 0; i < array_xy.length; i++) {\n    let json_ = {};\n    json_.x = array_xy[i][0];\n    json_.y = array_xy[i][1];\n    chart_dati_ruotati.push(json_);\n}\n\nmsg.flusso_modificato.array_xy = array_xy; // i punti potRebbero essere stati ruotati rispetto agli originali\nmsg.flusso_modificato.array_xy_sorted_by_y = array_xy_sorted_by_y;\nmsg.flusso_modificato.array_xy_originale = array_xy_originale;\n\nmsg.viz.chart_dati_ruotati = chart_dati_ruotati;\n\nmsg.stima.info = info;\n\nnode.status({ text: \"DONE\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1180,
        "wires": [
            [
                "f9783150df08d734"
            ]
        ]
    },
    {
        "id": "4a91f258935c27bc",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Inizializza Messaggio",
        "func": "msg.errore = {};\nmsg.errore.stato = false;\nmsg.errore.msg = \"---\";\n\nmsg.datetime={};\nmsg.datetime.text=\"\";\nmsg.datetime.epoch_ms = 0;\n\nmsg.flusso_modificato={};\nmsg.flusso_modificato.array_xy = []; // i punti potRebbero essere stati ruotati rispetto agli originali\nmsg.flusso_modificato.array_xy_sorted_by_y = [];\nmsg.flusso_modificato.array_xy_originale = [];\n\n\nmsg.divisione = {};\nmsg.divisione.punti_superiori = [];\nmsg.divisione.punti_inferiori = [];\nmsg.divisione.punto_medio = 0;\nmsg.divisione.centro_dente_x = 0;\nmsg.divisione.max_y = 0;\nmsg.divisione.min_y = 0;\nmsg.divisione.punti_latosx = [];\nmsg.divisione.punti_latodx = [];\nmsg.divisione.point_sup_1 = {\"x\":0,\"y\":0};\nmsg.divisione.point_sup_2 = { \"x\": 0, \"y\": 0 };\n\n\nmsg.ransac = {};\nmsg.ransac.soluz_base = {};\nmsg.ransac.soluz_normale_alla_base = {};\nmsg.ransac.soluz_normale_alla_base.model = {};\nmsg.ransac.soluz_normale_alla_base.model.m = 0;\nmsg.ransac.soluz_normale_alla_base.model.b = 0;\nmsg.ransac.soluz_massimi = {};\nmsg.ransac.soluz_latosx = {};\nmsg.ransac.soluz_latodx = {};\n\n//Stima regressione lineare LS\nmsg.lineare={};\nmsg.lineare.soluz_base = {};\nmsg.lineare.soluz_base.model = {\"m\":0,\"b\":0};\n\nmsg.lineare.soluz_normale_alla_base = {};\nmsg.lineare.soluz_normale_alla_base.model = { \"m\": 0, \"b\": 0 };\n\nmsg.lineare.soluz_massimi = {};\nmsg.lineare.soluz_massimi.model = { \"m\": 0, \"b\": 0 };\n\nmsg.lineare.soluz_latosx = {};\nmsg.lineare.soluz_latosx.model = { \"m\": 0, \"b\": 0 };\n\nmsg.lineare.soluz_latodx = {};\nmsg.lineare.soluz_latodx.model = { \"m\": 0, \"b\": 0 };\n\nmsg.stima = {};\nmsg.stima.intersezione = {};\nmsg.stima.intersezione.base_sx = {};\nmsg.stima.intersezione.base_dx = {};\nmsg.stima.intersezione.lt = 0;\nmsg.stima.intersezione.lt_fixed = 0; //3 cifre dopo la virgola\nmsg.stima.info = \"\";\n\nmsg.stima.angolo = {};\nmsg.stima.angolo.sx = 0;\nmsg.stima.angolo.sx_fixed = 0;//3 cifre dopo la virgola\nmsg.stima.angolo.sx_inrange = false;\n\nmsg.stima.angolo.dx = 0;\nmsg.stima.angolo.dx_fixed = 0;//3 cifre dopo la virgola\nmsg.stima.angolo.dx_inrange = false;\n\nmsg.viz = {};\nmsg.viz.profilo_z = \"[{x:0,y:0}]\";\ntry\n{\n    msg.viz.profilo_z = JSON.stringify(msg.flusso_dati.points).replace(/\"/g, \"'\").replace(/'/g, \"\");\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n}\n\n//controllo che inizializzazione dei parametri sia avvenuta con successo\nvar init_params_ok = global.get(\"PARAMETRI.inizializzazione.init_ok\");\n\nif (init_params_ok === false)\n{\n    msg.errore.stato = true;\n    msg.errore.msg = \"Inizializzazione Parametri Fallita\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1120,
        "wires": [
            [
                "17e17f70a8f16763"
            ]
        ]
    },
    {
        "id": "f656d41adabeb5be",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 1005,
        "y": 2280,
        "wires": []
    },
    {
        "id": "31c5b43e1464880b",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2160,
        "wires": []
    },
    {
        "id": "ca8bd78fa259c30b",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Conversione per Visualizzazione",
        "func": "//retta base\nif (msg.errore.stato)\n    return msg;\n\ntry\n{\n\n    var offset_disegno_linee_sup_inf = global.get(\"PARAMETRI.viz.offset_disegno_linee_sup_inf\");\n\n    //###### RETTA BASE E NORMALE ########\n    var punti_retta_base = [];\n    var punti_retta_normale_alla_base = [];\n\n    //1o punto\n    let jason = {\"x\":0,\"y\":0};\n    let jason2 = {};\n    let x = msg.divisione.punti_inferiori[0].x - offset_disegno_linee_sup_inf; //x-min\n    jason.x = x;\n    jason.y = msg.ransac.soluz_base.model.m * x + msg.ransac.soluz_base.model.b;\n    punti_retta_base.push(jason);\n    //todo normale alla retta base\n\n    //2o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    jason2 = {};\n    x = msg.divisione.punti_inferiori[msg.divisione.punti_inferiori.length - 1].x + offset_disegno_linee_sup_inf; //x-max\n    jason.x = x;\n    jason.y = msg.ransac.soluz_base.model.m * x + msg.ransac.soluz_base.model.b;\n    punti_retta_base.push(jason);\n\n    //msg.viz={};\n    //msg.viz.punti_retta_base = JSON.stringify(punti_retta_base).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_retta_base = punti_retta_base;\n    //msg.viz.punti_retta_normale_alla_base = JSON.stringify(punti_retta_normale_alla_base).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    //msg.viz.profilo_z = JSON.stringify(msg.flusso_dati.points).replace(/\"/g, \"'\").replace(/'/g, \"\");\n\n    //###### RETTA SUPERIORE (MASSIMI) ########\n    var punti_retta_massimi = [];\n    //1o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    x = msg.divisione.punti_superiori[0].x - offset_disegno_linee_sup_inf; //x-min\n    jason.x = x;\n    jason.y = msg.ransac.soluz_massimi.model.m * x + msg.ransac.soluz_massimi.model.b;\n    punti_retta_massimi.push(jason);\n    //2o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    x = msg.divisione.punti_superiori[msg.divisione.punti_superiori.length - 1].x + offset_disegno_linee_sup_inf; //x-max\n    jason.x = x;\n    jason.y = msg.ransac.soluz_massimi.model.m * x + msg.ransac.soluz_massimi.model.b;\n    punti_retta_massimi.push(jason);\n\n    //msg.viz.punti_retta_massimi = JSON.stringify(punti_retta_massimi).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_retta_massimi = punti_retta_massimi;\n\n\n    //###### RETTA LATO SX ########\n    var punti_retta_latosx = [];\n    //1o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    /*\n    x = msg.divisione.punti_latosx[0].x; //x-min  \n    jason.x = x;\n    jason.y = msg.ransac.soluz_latosx.model.m * x + msg.ransac.soluz_latosx.model.b;\n    */\n    jason.y = msg.divisione.min_y-offset_disegno_linee_sup_inf;\n    jason.x = (jason.y - msg.ransac.soluz_latosx.model.b) / msg.ransac.soluz_latosx.model.m;\n\n    punti_retta_latosx.push(jason);\n    //2o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    /*\n    x = msg.divisione.punti_latosx[msg.divisione.punti_latosx.length - 1].x; //x-max\n    jason.x = x;\n    jason.y = msg.ransac.soluz_latosx.model.m * x + msg.ransac.soluz_latosx.model.b;\n    */\n\n    jason.y = msg.divisione.max_y + offset_disegno_linee_sup_inf;\n    jason.x = (jason.y - msg.ransac.soluz_latosx.model.b) / msg.ransac.soluz_latosx.model.m;\n\n    punti_retta_latosx.push(jason);\n\n    //msg.viz.punti_retta_latosx = JSON.stringify(punti_retta_latosx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_retta_latosx = punti_retta_latosx;\n\n\n    //###### RETTA LATO DX ########\n    var punti_retta_latodx = [];\n    //1o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    /*\n    x = msg.divisione.punti_latodx[0].x; //x-min\n    jason.x = x;\n    jason.y = msg.ransac.soluz_latodx.model.m * x + msg.ransac.soluz_latodx.model.b;\n    */  \n    jason.y = msg.divisione.min_y - offset_disegno_linee_sup_inf;\n    jason.x = (jason.y - msg.ransac.soluz_latodx.model.b) / msg.ransac.soluz_latodx.model.m;\n    punti_retta_latodx.push(jason);\n\n    //2o punto\n    jason = { \"x\": 0, \"y\": 0 };\n    /*\n    x = msg.divisione.punti_latodx[msg.divisione.punti_latodx.length - 1].x; //x-max\n    jason.x = x;\n    jason.y = msg.ransac.soluz_latodx.model.m * x + msg.ransac.soluz_latodx.model.b;\n    */\n    jason.y = msg.divisione.max_y + offset_disegno_linee_sup_inf;\n    jason.x = (jason.y - msg.ransac.soluz_latodx.model.b) / msg.ransac.soluz_latodx.model.m;\n    punti_retta_latodx.push(jason);\n\n    //msg.viz.punti_retta_latodx = JSON.stringify(punti_retta_latodx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_retta_latodx = punti_retta_latodx;\n\n\n    //intersezione SX\n    var punto_intersezione_sx = [msg.stima.intersezione.base_sx];\n    //msg.viz.punto_intersezione_sx = JSON.stringify(punto_intersezione_sx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punto_intersezione_sx = punto_intersezione_sx;\n\n    //intersezione DX\n    var punto_intersezione_dx = [msg.stima.intersezione.base_dx];\n    //msg.viz.punto_intersezione_dx = JSON.stringify(punto_intersezione_dx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punto_intersezione_dx = punto_intersezione_dx;\n\n    //punti lato SX usati per il calcolo del ransac retta sx\n    //msg.viz.punti_latosx = JSON.stringify(msg.divisione.punti_latosx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_latosx = msg.divisione.punti_latosx;\n\n    //punti lato DX usati per il calcolo del ransac retta dx\n    //msg.viz.punti_latodx = JSON.stringify(msg.divisione.punti_latodx).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_latodx = msg.divisione.punti_latodx;\n\n    //punti lato superiore usati per il calcolo del ransac retta superiore\n    //msg.viz.punti_superiori = JSON.stringify(msg.divisione.punti_superiori).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_superiori = msg.divisione.punti_superiori;\n\n    //punti lato inferiore (base) usati per il calcolo del ransac retta base\n    //msg.viz.punti_inferiori = JSON.stringify(msg.divisione.punti_inferiori).replace(/\"/g, \"'\").replace(/'/g, \"\");\n    msg.viz.punti_inferiori = msg.divisione.punti_inferiori;\n\n    node.status({ text: \"DONE\" });\n\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "2cfb3834d6e03810"
            ]
        ]
    },
    {
        "id": "013fbc4857b34acf",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ALGO DIVISIONE PUNTI MED",
        "func": "\n\ntry {\n    //var points_x = msg.flusso_dati.points_x;\n    //var points_y = msg.flusso_dati.points_y;\n    //msg.flusso_modificato.array_xy //array di array[2] [0]=x [1]=y\n    var points_x = [];\n    var points_y = [];\n    for (let index = 0; index < msg.flusso_modificato.array_xy.length; index++) {\n        points_x.push(msg.flusso_modificato.array_xy[index][0]);\n        points_y.push(msg.flusso_modificato.array_xy[index][1]);       \n    }\n\n    var max_y = Math.max(...points_y);\n    var min_y = Math.min(...points_y);\n\n    var mean_y = (max_y+min_y)/2.0;\n    var dmeanmax = max_y - mean_y;\n    var dmeanmin = mean_y - min_y;\n\n    var upper_points = [];\n    var lower_points=[];\n    var lato_sinistro=[];\n    var lato_destro=[];\n    var lista_x_punti_sup = [];\n    var centro_dente_x = 0;\n    for (let i = 0; i < points_y.length; i++) {\n        \n        let jason = {};\n        if (points_y[i] > mean_y + dmeanmax/1.4)\n        {\n            jason.x = points_x[i];\n            jason.y = points_y[i];\n            upper_points.push(jason);\n            lista_x_punti_sup.push(points_x[i]);\n        }\n        else if (points_y[i] < mean_y - dmeanmin/1.4)\n        {\n            jason.x = points_x[i];\n            jason.y = points_y[i];\n            lower_points.push(jason);\n        }\n        else\n        {\n            /*\n            if (points_x[i]<0)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_sinistro.push(jason); \n            }\n            else if (points_x[i] > 0)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_destro.push(jason); \n            }\n            */\n        }        \n    }//fine for\n\n    \n    //trovo il centro dente\n    var max_x_sup = Math.max(...lista_x_punti_sup);\n    var min_x_sup = Math.min(...lista_x_punti_sup);\n    var dist_sup = Math.abs(max_x_sup - min_x_sup);\n    centro_dente_x = min_x_sup + dist_sup/2.0;\n    //estraggo i punti lato sx  e dx\n    for (let i = 0; i < points_y.length; i++) {\n\n        let jason = {};\n        if (points_y[i] > mean_y + dmeanmax / 1.4) {\n            ;\n        }\n        else if (points_y[i] < mean_y - dmeanmin / 1.4) {\n            ;\n        }\n        else {\n            \n            if (points_x[i] < centro_dente_x)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_sinistro.push(jason); \n            }\n            else if (points_x[i] > centro_dente_x)\n            {\n                jason.x = points_x[i];\n                jason.y = points_y[i];\n                lato_destro.push(jason); \n            }\n            \n        }\n    }//fine for\n\n    //msg.divisione={};\n    msg.divisione.punti_superiori = upper_points;\n    msg.divisione.punti_inferiori = lower_points;\n    msg.divisione.punto_medio = mean_y;\n    msg.divisione.centro_dente_x = centro_dente_x;\n    msg.divisione.max_y = max_y;\n    msg.divisione.min_y = min_y;\n    msg.divisione.punti_latosx = lato_sinistro;\n    msg.divisione.punti_latodx = lato_destro;\n\n\n    //controllo che ogni arrray abbia i punti minimi sufficienti per eseguire i calcoli successivi\n    var n_min_punti = global.get(\"PARAMETRI.divisione.n_min_punti\");\n    if (upper_points.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti Superiori: \" + upper_points.length + \" < \" + n_min_punti;\n    }\n    if (lower_points.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti Inferiori: \" + lower_points.length + \" < \" + n_min_punti;\n    }\n    if (lato_sinistro.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato sx: \" + lato_sinistro.length + \" < \" + n_min_punti;\n    }\n    if (lato_destro.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato dx: \" + lato_destro.length + \" < \" + n_min_punti;\n    }\n\n    node.status({ text: \"DONE\" });\n\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n};\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "f208c60da83b3805"
            ]
        ]
    },
    {
        "id": "2410b90a6b9f6e69",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "ALGO DIVISIONE PUNTI STD",
        "func": "\n\ntry {\n    \n\nvar mathjs = global.get('mathjs'); //https://mathjs.org/docs/reference/functions.html\n\n\n\nvar array_xy = msg.flusso_modificato.array_xy; // i punti potRebbero essere stati ruotati rispetto agli originali\nvar array_xy_sorted_by_y = msg.flusso_modificato.array_xy_sorted_by_y;\nvar array_xy_originale = msg.flusso_modificato.array_xy_originale;\n\nvar elemento = [];\nvar dati_sup = [];\nvar dati_inf = [];\nvar dati_sx = [];\nvar dati_dx = [];\n\nvar chart_points_sup = [];\nvar chart_points_inf = [];\nvar chart_points_sx = [];\nvar chart_points_dx = [];\n\nvar y_sup = [];\nvar y_inf = [];\n\n\nvar x = 0;\nvar y = 0;\n\nvar json = {};\nvar ycalc = 0;\n\n\n// ########### PRIMA SEPARAZIONE DEI DATI (sulla base del range) ###########\n// Inizializzizone degli array\ndati_inf.length = 0;\ndati_sup.length = 0;\nchart_points_inf.length = 0;\nchart_points_sup.length = 0;\ny_inf.length = 0;\ny_sup.length = 0;\n\nvar min_y = array_xy_sorted_by_y[0][1];\nvar max_y = array_xy_sorted_by_y[array_xy_sorted_by_y.length - 1][1];\n\n\nfor (let i = 0; i < array_xy.length; i++) {\n    // inizializzaizone degli elementi\n    x = array_xy[i][0];\n    y = array_xy[i][1];\n    elemento = [x, y];\n    json = { \"x\": x, \"y\": y };\n\n    if (y > max_y - 1) {\n        dati_sup.push(elemento);\n        chart_points_sup.push(json);\n        y_sup.push(array_xy[i][1])\n    }\n    else if (y < min_y + 1) {\n        dati_inf.push(elemento);\n        chart_points_inf.push(json);\n        y_inf.push(array_xy[i][1])\n    }\n}\n\n// ########### SECONDA SEPARAZIONE dei dati SUP  e  INF sulla base della STD ###########\nnode.status({ text: \"Seconda separazione dati sup...\" });\n\nvar y_avg_sup, y_avg_inf, y_std_sup, y_std_inf;\n\nif (y_sup.length > 1) {\n    // calcolo dati statistici\n    y_avg_sup = mathjs.mean(y_sup);\n    y_std_sup = mathjs.std(y_sup) * 0.55;\n\n    // Inizializzazione degli array sup\n    dati_sup.length = 0;\n    chart_points_sup.length = 0;\n    y_sup.length = 0;\n\n    //\n    for (let i = 0; i < array_xy.length; i++) {\n        x = array_xy[i][0];\n        y = array_xy[i][1];\n        elemento = [x, y];\n        json = { \"x\": x, \"y\": y };\n\n        if (y >= y_avg_sup - y_std_sup) {\n            dati_sup.push(elemento);\n            chart_points_sup.push(json);\n            y_sup.push(y)\n        }\n    }\n}\n\nnode.status({ text: \"Seconda separazione dati inf...\" });\n\nif (y_inf.length > 1) {\n    // calcolo dati statistici\n    y_avg_inf = mathjs.mean(y_inf);\n    y_std_inf = mathjs.std(y_inf) * 0.55;\n\n    // Inizializzazione degli array inf\n    dati_inf.length = 0;\n    chart_points_inf.length = 0;\n    y_inf.length = 0;\n\n    //\n    for (let i = 0; i < array_xy.length; i++) {\n        x = array_xy[i][0];\n        y = array_xy[i][1];\n        elemento = [x, y];\n        json = { \"x\": x, \"y\": y };\n\n        if (y <= y_avg_inf + y_std_inf) {\n            dati_inf.push(elemento);\n            chart_points_inf.push(json);\n            y_inf.push(y)\n        }\n    }\n}\n\n\n\n// ################## RICERCA ESTREMI dei SEGMENTI ##############\nnode.status({ text: \"ricerca estremi segmenti...\" });\nvar point_inf_1 = {};\nvar point_inf_2 = {};\nvar point_sup_1 = {};\nvar point_sup_2 = {};\n\n\nfor (let i = 1; i < chart_points_inf.length; i++) {\n    if ((chart_points_inf[i].x - chart_points_inf[i - 1].x) > 5.0) {\n        point_inf_1 = chart_points_inf[i - 1];\n        point_inf_2 = chart_points_inf[i];\n        break;\n    }\n}\n\npoint_sup_1 = chart_points_sup[0];\npoint_sup_2 = chart_points_sup[chart_points_sup.length - 1];\n\n\n\n//########### SEPARAZIONE DATI SINISTRA - DESTRA #########\nnode.status({ text: \"separazione dati sx e dx...\" });\n\nfor (let i = 0; i < array_xy.length; i++) {\n    elemento = [];\n    json = {};\n    x = array_xy[i][0];\n    y = array_xy[i][1]\n    // inizializzaizone degli elementi\n    elemento = [x, y];\n    json = { \"x\": x, \"y\": y };\n\n    // SINISTRA\n    if (x > point_inf_1.x && x < point_sup_1.x) {\n        chart_points_sx.push(json);\n        dati_sx.push(elemento)\n\n        // DESTRA    \n    } else if (x > point_sup_2.x && x < point_inf_2.x) {\n        chart_points_dx.push(json);\n        dati_dx.push(elemento)\n    }\n}\n\nmsg.divisione.punti_superiori = dati_sup;\nmsg.divisione.punti_inferiori = dati_inf;\nmsg.divisione.punti_latosx = dati_sx;\nmsg.divisione.punti_latodx = dati_dx;\nmsg.divisione.point_sup_1 = point_sup_1;\nmsg.divisione.point_sup_2 = point_sup_2;\nmsg.divisione.point_inf_1 = point_inf_1;\nmsg.divisione.point_inf_2 = point_inf_2;\nmsg.divisione.max_y = max_y;\n\n\n//punti lato SX usati per il calcolo del ransac retta sx\n//msg.viz.punti_latosx = chart_points_sx;\n\n//punti lato DX usati per il calcolo del ransac retta dx\n//msg.viz.punti_latodx = chart_points_dx;\n\n//punti lato superiore usati per il calcolo del ransac retta superiore\nmsg.viz.punti_superiori = chart_points_sup;\n\n//punti lato inferiore (base) usati per il calcolo del ransac retta base\nmsg.viz.punti_inferiori = chart_points_inf;\n\nnode.status({ text: \"DONE\" });\n\nreturn msg;\n\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1360,
        "wires": [
            [
                "f208c60da83b3805"
            ]
        ]
    },
    {
        "id": "17e17f70a8f16763",
        "type": "moment",
        "z": "98a3eee5c375d831",
        "name": "ts to YYYYMMDD_HHmmss",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD_HH-mm-ss-sss",
        "locale": "it-IT",
        "output": "datetime.text",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "3a9fef0cb0bc25e1"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "3a9fef0cb0bc25e1",
        "type": "moment",
        "z": "98a3eee5c375d831",
        "name": "ts to epoc ms",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "x",
        "locale": "it-IT",
        "output": "datetime.epoch_ms",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "992bc63ff26fb45a"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "900df8e679a595ab",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "SALVA CSV RISULTATI",
        "func": "\ntry{\n\n\nif (global.get(\"GLOBALI.salvataggi.salva_risultato\"))\n{\n    global.set(\"GLOBALI.salvataggi.salva_risultato\",false);\n}\nelse\n{\n    //return msg;\n    return;\n}\n\nvar msg_ = global.get(\"GLOBALI.ultimo_msg\");\n\nif(msg_==undefined || msg_==null)\n{\n    msg.errore.stato = true;\n    msg.errore.msg = \"Nessun Risultato da Salvare\";\n    node.status({ text: \"ERROR\" });\n    //return msg;\n}\nelse\n{\n    if (msg_ == {} )\n    {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Nessun Risultato da Salvare\";\n        node.status({ text: \"ERROR\" });\n        //return msg;\n    }\n}\n\nif (!msg.errore.stato)\n{\n\n\nvar csv_writer = global.get(\"csv_writer\");\nconst fs = global.get('fs')\nvar append = true;\nvar path_to_csv = global.get(\"PARAMETRI.path.database_risultati\");\n\ntry {\n    if (fs.existsSync(path_to_csv)) {\n        //file exists\n        append = true;\n    }\n    else\n    {\n        append = false;\n    }\n} catch (err) {\n    console.error(err);\n    append = false;\n}\n\nconst createCsvWriter = csv_writer.createObjectCsvWriter;\nconst csvWriter = createCsvWriter({\n    path: path_to_csv ,\n    header: [ //mapping del header: id=nome del oggetto nel json, title=nome sul header del csv\n        { id: 'Timestamp', title: 'Timestamp' },\n        //{ id: 'Timestamp_ms', title: 'Timestamp_ms' },\n        { id: 'Lotto', title: 'Lotto' },\n        { id: 'Articolo', title: 'Articolo' },\n        { id: 'AngoloSXmin', title: 'AngoloSXmin' },\n        { id: 'AngoloSXmax', title: 'AngoloSXmax' },\n        { id: 'AngoloDXmin', title: 'AngoloDXmin' },\n        { id: 'AngoloDXmax', title: 'AngoloDXmax' },\n        { id: 'HC', title: 'HC' },\n        { id: 'OffsetAngSX', title: 'OffsetAngSX' },\n        { id: 'OffsetAngDX', title: 'OffsetAngDX' },\n        { id: 'OffsetLt', title: 'OffsetLt' },\n        { id: 'AngSX', title: 'AngSX' },\n        { id: 'AngDX', title: 'AngDX' },\n        { id: 'Distanza', title: 'Distanza' },\n        { id: 'RotazionePiano', title: 'RotazionePiano' },\n        { id: 'TipoMisura', title: 'TipoMisura' },\n        { id: 'Note', title: 'Note' },\n    ],\n    fieldDelimiter: \";\",\n    recordDelimiter:\"\\r\\n\", //windows\n    append: append\n});\n\nvar rotazione_piano = global.get(\"PARAMETRI.calibrazione.rotazione_piano\");\nlet algo_div_punti = global.get(\"PARAMETRI.algoritmi.divisione\");\nlet algo_linefitting = global.get(\"PARAMETRI.algoritmi.stima_rette\");\n\nconst data = [\n    {\n        Timestamp: msg_.datetime.text,\n        Lotto: global.get(\"GLOBALI.LottoInLavorazione.Lotto\"),\n        Articolo: global.get(\"GLOBALI.LottoInLavorazione.Articolo\"),\n        AngoloSXmin: global.get(\"GLOBALI.LottoInLavorazione.AngoloSXmin\"),\n        AngoloSXmax: global.get(\"GLOBALI.LottoInLavorazione.AngoloSXmax\"),\n        AngoloDXmin: global.get(\"GLOBALI.LottoInLavorazione.AngoloDXmin\"),\n        AngoloDXmax: global.get(\"GLOBALI.LottoInLavorazione.AngoloDXmax\"),\n        HC: global.get(\"GLOBALI.LottoInLavorazione.HC\"),\n        OffsetAngSX: global.get(\"PARAMETRI.calibrazione.offset_angolo_sx\"),\n        OffsetAngDX: global.get(\"PARAMETRI.calibrazione.offset_angolo_dx\"),\n        OffsetLt: global.get(\"PARAMETRI.calibrazione.offset_lt\"),\n        AngSX: msg_.stima.angolo.sx_fixed,\n        AngDX: msg_.stima.angolo.dx_fixed,\n        Distanza: msg_.stima.intersezione.lt_fixed,\n        TipoMisura: algo_div_punti + '+' + algo_linefitting,\n        Note: global.get(\"GLOBALI.LottoInLavorazione.Note\"),\n        RotazionePiano: rotazione_piano\n\n    }\n];\n\ncsvWriter\n    .writeRecords(data)\n    .then(() => console.log('[OK] RISULTATI SCRITTI SU CSV'));\n\n    node.status({ text: \"DONE\" });\n}//fine if not errore\n} catch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n    console.error('[ERR] ERRORE SCRITTURA RISULTATI')\n\n};\n\nmsg.payload = { \"function\": \"salva_risultato\", \"value\": msg.errore }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2540,
        "wires": [
            [
                "38f256427efb957f",
                "23e83b9b065c29cf"
            ]
        ]
    },
    {
        "id": "061893152c7b5891",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "SALVA CSV PROFILO",
        "func": "\ntry{\n\n\n\nif (global.get(\"GLOBALI.salvataggi.salva_profilo\")) {\n    global.set(\"GLOBALI.salvataggi.salva_profilo\", false);\n}\nelse {\n    //return msg;\n    return;\n}\n\nvar msg_ = global.get(\"GLOBALI.ultimo_msg\");\n\nif (msg_ == undefined || msg_ == null) {\n    msg.errore.stato = true;\n    msg.errore.msg = \"Nessun Profilo da Salvare\";\n    node.status({ text: \"ERROR\" });\n    //return msg;\n}\nelse {\n    if (msg_ == {}) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Nessun Profilo da Salvare\";\n        node.status({ text: \"ERROR\" });\n        //return msg;\n    }\n}\n\nif (!msg.errore.stato) {\n\n\nvar csv_writer = global.get(\"csv_writer\");\nconst fs = global.get('fs')\nvar append = true;\nvar path_to_csv = global.get(\"PARAMETRI.path.database_profili\");\npath_to_csv += msg_.datetime.text + \".csv\";\n\ntry {\n    if (fs.existsSync(path_to_csv)) {\n        //file exists\n        append = true;\n    }\n    else\n    {\n        append = false;\n    }\n} catch (err) {\n    console.error(err);\n    append = false;\n}\n\n\nconst createCsvWriter = csv_writer.createArrayCsvWriter;\nconst csvWriter = createCsvWriter({\n    path: path_to_csv ,\n    fieldDelimiter: \";\",\n    recordDelimiter:\"\\r\\n\", //windows\n    append: append\n});\nvar profile_array = [msg_.flusso_dati.points_x.length]; //primo elemento indica il numero di punti (x,y) del profilo\nprofile_array = profile_array.concat(msg_.flusso_dati.points_x);//secondo elemento è array ordinato delle X\nprofile_array = profile_array.concat(msg_.flusso_dati.points_y);//terzo elemento è array ordinato delle Y (Z)\nconst data = [\n    profile_array\n];\n//console.log(profile_array);\ncsvWriter\n    .writeRecords(data)\n    .then(() => console.log('Profilo CSV salvato con successo'));\n\n    node.status({ text: \"DONE\" });\n\n\n}//fine if not errore.stato\n\n}catch (er) \n{\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n\n};\n\nmsg.payload = { \"function\": \"salva_profilo\", \"value\": msg.errore }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2600,
        "wires": [
            [
                "38f256427efb957f",
                "23e83b9b065c29cf"
            ]
        ]
    },
    {
        "id": "15928fcceeffcef4",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "back-up ultimo msg",
        "func": "\nglobal.set(\"GLOBALI.ultimo_msg\", msg);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "f64df7047ef5607a",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "errore",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "errore.stato",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "errore.msg",
                "v": "---",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 310,
        "y": 2540,
        "wires": [
            [
                "900df8e679a595ab",
                "061893152c7b5891"
            ]
        ]
    },
    {
        "id": "79e4c2bf8053b2db",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "SALVATAGGIO CSV SU RICHIESTA",
        "info": "",
        "x": 680,
        "y": 2480,
        "wires": []
    },
    {
        "id": "38f256427efb957f",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 815,
        "y": 2580,
        "wires": []
    },
    {
        "id": "23e83b9b065c29cf",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2700,
        "wires": []
    },
    {
        "id": "3972058b7ac46ed8",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "SCRITTURA JSON PARAMETRI RITENTIVI",
        "func": "\ntry {\n\n    //CONTROLLO SE VI è STATA VARIAZIONE DI QUALCHE PARAMETRO RITENTIVO\n    if (JSON.stringify(global.get(\"GLOBALI.back_up_ritentive\")) \n        == JSON.stringify(global.get(\"PARAMETRI\")))\n    {\n        return;\n    }\n\n\n    const fs = global.get('fs')\n\n\n    var gparams = global.get(\"PARAMETRI\");\n\n\n    let data = JSON.stringify(gparams, null, 2);\n\n    fs.writeFileSync(gparams.path.parametri_ritentivi, data);\n\n    //aggiorno il backup\n    //deep copy\n    let gcopy = JSON.parse(JSON.stringify(global.get(\"PARAMETRI\")));\n    global.set(\"GLOBALI.back_up_ritentive\", gcopy);\n\n    console.log(\"[INFO] SCRITTURA JSON RITENTIVE SU VARIAZIONE PARAMETRI\")\n\n    return msg;\n} catch (error) {\n    //TODO:ERROR\n    console.error(error);\n    console.error(\"[ERR] SCRITTURA JSON PARAMETRI RITENTIVI\");\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2840,
        "wires": [
            [
                "8fdf88003fd6f24b"
            ]
        ]
    },
    {
        "id": "2eb30f6a159ba02b",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 2840,
        "wires": [
            [
                "3972058b7ac46ed8"
            ]
        ]
    },
    {
        "id": "8fdf88003fd6f24b",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2840,
        "wires": []
    },
    {
        "id": "0e6e5a07d36ab0de",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "SCRITTURA DEI PARAMETRI RITENTITIVI SU FILE JSON AD OGNI VARIAZIONE DI UN PARAMETRO",
        "info": "",
        "x": 640,
        "y": 2780,
        "wires": []
    },
    {
        "id": "6030ba7ba5b436fb",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Calcolo Intersezioni",
        "func": "if (msg.errore.stato)\n    return msg;\n\ntry{\n\n    var offset_lt = global.get(\"PARAMETRI.calibrazione.offset_lt\");\n\n    var retta_base = msg.lineare.soluz_base;\n    var retta_sx = msg.lineare.soluz_latosx;\n    var retta_dx = msg.lineare.soluz_latodx;\n\n\n    //intersezione BASE-SX\n    var Dintersect = (retta_sx.model.b - retta_base.model.b);\n    var Dslope = (retta_base.model.m - retta_sx.model.m);\n    var x_base_sx = Dintersect / Dslope;\n    var y_base_sx = retta_base.model.m * x_base_sx + retta_base.model.b;\n    //console.warn(\"==INTERSEZIONE BASE-SX==\")\n    //console.warn(\"x:\" + x_base_sx + \" z:\" + y_base_sx + \"\\n\");\n\n    //intersezione BASE-DX\n    Dintersect = (retta_dx.model.b - retta_base.model.b);\n    Dslope = (retta_base.model.m - retta_dx.model.m);\n    var x_base_dx = Dintersect / Dslope;\n    var y_base_dx = retta_base.model.m * x_base_dx + retta_base.model.b;\n    //console.warn(\"==INTERSEZIONE BASE-DX==\")\n    //console.warn(\"x:\" + x_base_dx + \" z:\" + y_base_dx + \"\\n\");\n\n    //distanza LT\n    var dX = (x_base_dx - x_base_sx);\n    var dY = (y_base_dx - y_base_sx);\n    var dX2 = dX*dX;\n    var dY2 = dY*dY;\n    var lt = Math.sqrt(dX2 + dY2) + offset_lt;\n    //console.warn(\"==DISTANZA Lt==\")\n    //console.warn(\"Lt:\" + lt + \"mm\\n\");\n    //msg.stima={};\n    //msg.stima.intersezione={};\n    msg.stima.intersezione.base_sx = { \"x\": x_base_sx, \"y\": y_base_sx};\n    msg.stima.intersezione.base_dx = { \"x\": x_base_dx, \"y\": y_base_dx };\n    msg.stima.intersezione.lt = lt;\n    msg.stima.intersezione.lt_fixed = lt.toFixed(3); //3 cifre dopo la virgola\n\n    node.status({ text: \"DONE\" });\n}\ncatch (er) {\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1900,
        "wires": [
            [
                "2cfb3834d6e03810"
            ]
        ]
    },
    {
        "id": "2cfb3834d6e03810",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "CONTROLLO SOGLIE ANGOLI MIN-MAX",
        "func": "try{\n    var asx = msg.stima.angolo.sx;\n    var adx = msg.stima.angolo.dx;\n\n    var min_sx = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.AngoloSXmin\").replace(',', '.'));\n    var max_sx = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.AngoloSXmax\").replace(',', '.'));\n\n    var min_dx = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.AngoloDXmin\").replace(',', '.'));\n    var max_dx = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.AngoloDXmax\").replace(',', '.'));\n    /*\n        console.error(min_sx);\n        console.error(max_sx);\n        console.error(min_dx);\n        console.error(max_dx);\n    */\n\n    if (asx >= min_sx && asx <= max_sx)\n    {\n        //ok in range\n        msg.stima.angolo.sx_inrange = true;\n    }\n    else\n    {\n        //fuori range\n        msg.stima.angolo.sx_inrange = false;\n    }\n\n    if (adx >= min_dx && adx <= max_dx) {\n        //ok in range\n        msg.stima.angolo.dx_inrange = true;\n    }\n    else {\n        //fuori range\n        msg.stima.angolo.dx_inrange = false;\n    }\n        node.status({ text: \"DONE\" });\n    }\ncatch(err)\n{\n    console.error(err);\n    node.status({ text: \"ERROR\" });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2060,
        "wires": [
            [
                "82abd51423ddc6b9"
            ]
        ]
    },
    {
        "id": "d9e10ef6c7d320b6",
        "type": "fs-file-lister",
        "z": "98a3eee5c375d831",
        "name": "",
        "start": "C:\\temp\\profili",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 460,
        "y": 3000,
        "wires": [
            [
                "915cdf224eecff5e"
            ]
        ]
    },
    {
        "id": "a9ac2304183ce535",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"start\":\"C:\\\\temp\\\\profili\", \"hidden\":false}",
        "payloadType": "json",
        "x": 150,
        "y": 3000,
        "wires": [
            [
                "d9e10ef6c7d320b6"
            ]
        ]
    },
    {
        "id": "d27e3637a5e5ca92",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 3100,
        "wires": []
    },
    {
        "id": "915cdf224eecff5e",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "Convert timestamps e popola statistiche files",
        "func": "for (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 3000,
        "wires": [
            [
                "364d8666e03d2db8",
                "d27e3637a5e5ca92"
            ]
        ]
    },
    {
        "id": "364d8666e03d2db8",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "preparo dati da inviare alla WS",
        "func": "//deep copy\nvar msg_deep = JSON.parse(JSON.stringify(msg));\n\nmsg = {\n    payload: {\n        \"function\": \"aggiorna_lista_file_profili\",\n        \"value\": {\n            \"payload\": msg_deep.payload, \"start_path\": msg_deep.config.start}\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 3000,
        "wires": [
            [
                "d27e3637a5e5ca92",
                "29882ee8e5825337"
            ]
        ]
    },
    {
        "id": "29882ee8e5825337",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 1255,
        "y": 3000,
        "wires": []
    },
    {
        "id": "8ccaa544268aecd2",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "CARICA PROFILO DA CSV",
        "func": "\nif (global.get(\"GLOBALI.carica_profilo_da_csv.stato\") )\n{\n    global.set(\"GLOBALI.carica_profilo_da_csv.stato\",false);\n    var percorso_assoluto_file_csv = global.get(\"GLOBALI.carica_profilo_da_csv.abs_path\");\n}\nelse\n{\n    return;\n}\n\n//solo se abilitata lo streaming offline da csv\nif (global.get(\"PARAMETRI.flusso_dati\")!==\"daCsv\")\n{\n    return;\n}\n\n//algo per caricare file fa csv\n//READ CSV\ntry {\n    const fs = global.get('fs');\n    var data = fs.readFileSync(percorso_assoluto_file_csv);\n    //dovrebbe essere una unica riga dove primo elemento rappresenta il numero di coppie di punti campionati\n    //poi le X in ordine crescente e poi le Z in ordine \n    var data_str = data.toString();\n    //data_str = data_str.split(\"\\r\\n\");//return windows\n    var arr = data_str.split(\";\");\n/*\n    for (let i of data) \n    { data[i] = data[i].split(\";\") } //separatore ;\n\n    var num_coppie_punti = data[0][0];\n    */\n    var num_coppie_punti = parseFloat(arr[0]);\n\n    var arr_x = [];\n    var arr_y = [];//Z\n    for (let index = 1; index <= num_coppie_punti; index++) {\n        arr_x.push(parseFloat(arr[index]));\n        \n    }\n    for (let index = num_coppie_punti + 1; index < arr.length; index++) {\n        arr_y.push(parseFloat(arr[index]));\n\n    }\n    var punti=[];\n    for (let index = 0; index < num_coppie_punti; index++) {\n        let json_={};\n        json_.x = arr_x[index];\n        json_.y = arr_y[index];\n        punti.push(json_);\n\n    }\n\n\n    var flusso_dati = {\n        \"points\": punti,\n        \"points_x\": arr_x,\n        \"points_y\": arr_y\n    };\n    msg.flusso_dati = flusso_dati;\n\n    msg.payload = arr;\n\n\n} catch (er) {\n    msg.err = er;\n    console.error(er);\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 3260,
        "wires": [
            [
                "5e2a829455e2aba3",
                "64f5d3c6f44645e7"
            ]
        ]
    },
    {
        "id": "82c22eef864f07b3",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "dt",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 3260,
        "wires": [
            [
                "8ccaa544268aecd2"
            ]
        ]
    },
    {
        "id": "5e2a829455e2aba3",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 3200,
        "wires": []
    },
    {
        "id": "1fcdd44d964c638c",
        "type": "link in",
        "z": "98a3eee5c375d831",
        "name": "DA CSV",
        "links": [
            "64f5d3c6f44645e7"
        ],
        "x": 445,
        "y": 900,
        "wires": [
            [
                "cdb2d5949703c15b"
            ]
        ]
    },
    {
        "id": "64f5d3c6f44645e7",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "1fcdd44d964c638c"
        ],
        "x": 915,
        "y": 3300,
        "wires": []
    },
    {
        "id": "ef42a46244b66d1e",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "REALTIME DA PROFILOMETRO",
        "info": "",
        "x": 230,
        "y": 900,
        "wires": []
    },
    {
        "id": "6e8c9d99495b0d23",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "OFFLINE DA CSV",
        "info": "",
        "x": 590,
        "y": 920,
        "wires": []
    },
    {
        "id": "167b79baa6e499a5",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "",
        "func": "\n\nif (global.get(\"GLOBALI.aggiorna_tabella_file_profili\"))\n{\n    global.set(\"GLOBALI.aggiorna_tabella_file_profili\", false);\n}\nelse\n{\n    return;\n}\n\nvar path_folder_profili = global.get(\"PARAMETRI.path.database_profili\")\n\nmsg.payload = { \"start\": path_folder_profili, \"hidden\": false };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3060,
        "wires": [
            [
                "d9e10ef6c7d320b6"
            ]
        ]
    },
    {
        "id": "431a95aa90648d06",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3060,
        "wires": [
            [
                "167b79baa6e499a5"
            ]
        ]
    },
    {
        "id": "e550a3035ff2ced5",
        "type": "debug",
        "z": "98a3eee5c375d831",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 360,
        "wires": []
    },
    {
        "id": "202b73d7847142d4",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "SPLIT MSG PER AGGIONRAMENTO PAGINA",
        "func": "\nif (msg.fcn.length!=2)\n{\n    return;\n}\n\nvar msg1 = { payload: { \"function\": msg.fcn[0].function, \"value\": msg.fcn[0].value } };\nvar msg2 = { payload: { \"function\": msg.fcn[1].function, \"value\": msg.fcn[1].value } };\n\nreturn [msg, msg1, msg2];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 440,
        "wires": [
            [],
            [
                "132ccd62ef435617"
            ],
            [
                "132ccd62ef435617"
            ]
        ]
    },
    {
        "id": "132ccd62ef435617",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 1265,
        "y": 440,
        "wires": []
    },
    {
        "id": "91b202e9e074fe08",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "FILTRO HC LATI SX-DX",
        "func": "var lato_sinistro = msg.divisione.punti_latosx;\nvar lato_destro = msg.divisione.punti_latodx;\ntry {\n    \n    var hc = parseFloat(global.get(\"GLOBALI.LottoInLavorazione.HC\").replace(',', '.'));\n    //retta base y=mx+q\n    var m = msg.ransac.soluz_base.model.m;\n    var q = msg.ransac.soluz_base.model.b;\n\n\n\n    //ax+by+c=0 -> by = -ax-c -> y= -a/bx - c/b -> m=-a/b q=-c/b \n    //y=mx+q -> 0 = mx-y+q -> a=m -> b=-1 -> c=q\n    var a=m;\n    var b=-1;\n    var c=q;\n    //calcolo distanza punto vs retta base\n    //dist = |ax0 + by0+c|/sqrt(a^2+b^2)\n\n    //LATOSX\n    var chart_punti_sotto_hc=[];\n    var lista_punti_sx=[];\n    for (let i = 0; i < lato_sinistro.length; i++) {\n        const x0 = lato_sinistro[i].x;\n        const y0 = lato_sinistro[i].y;\n\n        var dist = Math.abs(a*x0 + b*y0 + c)/Math.sqrt(a*a + b*b);\n        let jason = {};\n        if (dist>hc) {\n            jason.x = lato_sinistro[i].x;\n            jason.y = lato_sinistro[i].y;\n            lista_punti_sx.push(jason);\n        }\n        else {\n            jason.x = x0;\n            jason.y = y0;\n            chart_punti_sotto_hc.push(jason);\n        }\n    \n    }\n\n    //LATODX\n    var lista_punti_dx = [];\n    for (let i = 0; i < lato_destro.length; i++) {\n        const x0 = lato_destro[i].x;\n        const y0 = lato_destro[i].y;\n\n        var dist = Math.abs(a * x0 + b * y0 + c) / Math.sqrt(a * a + b * b);\n        let jason = {};\n        if (dist > hc) {\n            jason.x = lato_destro[i].x;\n            jason.y = lato_destro[i].y;\n            lista_punti_dx.push(jason);\n        }\n        else {\n            jason.x = x0;\n            jason.y = y0;\n            chart_punti_sotto_hc.push(jason);\n        }\n\n    }\n\n    //punti che ricadono sotto il filtro HC\n    msg.viz.punti_sotto_hc = chart_punti_sotto_hc;\n\n    msg.divisione.punti_latosx = lista_punti_sx;\n    msg.divisione.punti_latodx = lista_punti_dx;\n\n\n    //controllo che ogni arrray abbia i punti minimi sufficienti per eseguire i calcoli successivi\n    var n_min_punti = global.get(\"PARAMETRI.divisione.n_min_punti\");\n    if (lista_punti_sx.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato sx: \" + lista_punti_sx.length + \" < \" + n_min_punti;\n    }\n    if (lista_punti_dx.length < n_min_punti) {\n        msg.errore.stato = true;\n        msg.errore.msg = \"Num. Minimo Punti lato dx: \" + lista_punti_dx.length + \" < \" + n_min_punti;\n    }\n\n\n    node.status({ text: \"DONE\" });\n    return msg;\n}\ncatch (er) {\n\n    msg.errore.stato = true;\n    msg.errore.msg = er.message;\n    node.status({ text: \"ERROR\" });\n    console.error(msg.errore.msg);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1800,
        "wires": [
            [
                "c4a2f57d2a791b2d"
            ]
        ]
    },
    {
        "id": "3aed3b2cfc723243",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "AGGIORNA FILE CSV LOTTI - ARTICOLI",
        "info": "",
        "x": 540,
        "y": 3380,
        "wires": []
    },
    {
        "id": "ef1320260ef4c3c6",
        "type": "inject",
        "z": "98a3eee5c375d831",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3440,
        "wires": [
            [
                "1103156ac3a4ba06",
                "6fa3e5ccc9ec27ab"
            ]
        ]
    },
    {
        "id": "1103156ac3a4ba06",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "AGGIORNA LISTA LOTTO-ARTICOLO E INVIA VIA WS",
        "func": "if (global.get(\"GLOBALI.aggiorna_file_lotti_articoli\")) {\n    global.set(\"GLOBALI.aggiorna_file_lotti_articoli\", false);\n    //ok\n    ;\n}\nelse {\n    return;\n}\n\nmsg.errore={};\n//LETTURA CSV DATABASE CODICI PRODOTTO\n//const csvFilePath = 'D:\\\\LAVORI\\\\A22-1006-DAYCO-STIMA_ANGOLO_CINGHIE\\\\ESEMPIO_DATABASE_CODICI_PRODOTTO.csv';\n//const csvFilePath = 'C:\\\\StimaAngoli\\\\DB.csv';\nconst csvFilePath = global.get(\"PARAMETRI.path.database_codici_prodotto\")\nvar db_codici_prodotto = {};\nconst fs = global.get('fs');\nvar uniq_lista=[];\ntry {\n    const result = fs.readFileSync(csvFilePath, 'utf8');\n    //console.log(result);\n    //SPLIT ROWS & COLUMNS\n    let temp = result.split(\"\\r\\n\");\n    //console.log(\"temp0\");\n    //console.log(temp);\n    //rimuovo tutte le righe vuote\n    const index = temp.indexOf('');\n    if (index > -1) { // only splice array when item is found\n        temp.splice(index)//, 1); // 2nd parameter means remove one item only\n    }\n\n    for (let i in temp) {\n        temp[i] = temp[i].split(\";\");\n    }\n    //console.log(\"temp\");\n    //console.log(temp);\n    //REARRANGE KEYS & VALUES\n    let data = {};\n    for (let i in temp[0]) {\n        data[(temp[0][i]).trim()] = [];\n        for (let j = 1; j < temp.length; j++) {\n            data[(temp[0][i]).trim()].push(temp[j][i]);\n        }\n    }\n    //DONE!\n    // data = JSON.stringify(data);\n    //console.log(data);\n    //db_codici_prodotto = data;\n    global.set(\"PARAMETRI.db_codici_prodotto\", data);\n    console.log(\"[OK] LETTURA CSV DATABASE CODICI PRODOTTO\");\n\n    //INVIA ALLA PAGINA WEB LA LISTA AGGIORNATA PER AUTOCOMPLETAMENTO\n    let lista_lotti = global.get(\"PARAMETRI.db_codici_prodotto.Lotto\");\n    let lista_articoli = global.get(\"PARAMETRI.db_codici_prodotto.Articolo\");\n    //concatenazione delle 2 liste per autocompletamento di ricerca lotto/articolo\n    let lista_totale = lista_lotti.concat(lista_articoli);\n    //tolgo tutti i doppioni\n    uniq_lista = [...new Set(lista_totale)];\n    msg.errore.stato = false;\n    msg.errore.msg = \"[OK] LISTA LOTTI-ART. AGGIORNATA\";\n    \n\n} catch (err) {\n    console.error(err);\n    console.log(\"[ERR] LETTURA CSV DATABASE CODICI PRODOTTO\");\n    msg.errore.stato = true;\n    msg.errore.msg = err.message;\n}\n\nmsg.payload = { \"function\": \"req_lista_lotti\", \"value\": uniq_lista, \"errore\": msg.errore };\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3440,
        "wires": [
            [
                "660363939bf7d56b"
            ]
        ]
    },
    {
        "id": "660363939bf7d56b",
        "type": "link out",
        "z": "98a3eee5c375d831",
        "name": "",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 885,
        "y": 3440,
        "wires": []
    },
    {
        "id": "fa28d7ca1861bc95",
        "type": "comment",
        "z": "98a3eee5c375d831",
        "name": "AGGIORNA (LEGGI DA FILE JSON) PARAMETRI RITENTIVI",
        "info": "",
        "x": 560,
        "y": 3520,
        "wires": []
    },
    {
        "id": "6fa3e5ccc9ec27ab",
        "type": "function",
        "z": "98a3eee5c375d831",
        "name": "AGGIORNA (LEGGI DA FILE JSON) PARAMETRI RITENTIVI",
        "func": "if (global.get(\"GLOBALI.aggiorna_parametri_ritentivi\")) {\n    global.set(\"GLOBALI.aggiorna_parametri_ritentivi\", false);\n    //ok\n    ;\n}\nelse {\n    return;\n}\n\nmsg.errore={};\n\nconst fs = global.get('fs');\n//LETTURA DA JSON DEI PARAMETRI RITENTIVI SALVATI\n//per ora solo gli offsets\nvar gparams = {};\nvar carica_parametri_default = false;\nconst csvFilePathRitentive = global.get(\"PARAMETRI.path.parametri_ritentivi\");\n\ntry {\n    if (fs.existsSync(csvFilePathRitentive)) {\n        //file exists\n        try {\n            let rawdata = fs.readFileSync(csvFilePathRitentive);\n            gparams = JSON.parse(rawdata);\n\n            global.set(\"PARAMETRI.calibrazione.rotazione_piano\", gparams.calibrazione.rotazione_piano);\n            global.set(\"PARAMETRI.calibrazione.offset_angolo_sx\", gparams.calibrazione.offset_angolo_sx);\n            global.set(\"PARAMETRI.calibrazione.offset_angolo_dx\", gparams.calibrazione.offset_angolo_dx);\n            global.set(\"PARAMETRI.calibrazione.offset_lt\", gparams.calibrazione.offset_lt);\n            \n            carica_parametri_default = false;\n\n            //aggiorno i codici prodotto con la lettura fatta sopra da CSV\n            //gparams.db_codici_prodotto = db_codici_prodotto;\n            //il problema ransac non viene salvato nel json quindi lo ricarico io a mano\n            //gparams.ransac.problema = problem;\n            //console.log(gparams);\n            console.log(\"[OK] PARAMS RITENTIVI LETTI DA JSON\");\n            msg.errore.stato = false;\n            msg.errore.msg = \"[OK] LETTURA PARAMETRI\";\n        } catch (err) {\n            console.log(err);\n            msg.errore.stato = true;\n            msg.errore.msg = err.message;\n            carica_parametri_default = true;\n        };\n    }\n    else {\n        //non esiste il file\n        carica_parametri_default = true;\n        console.log(\"[WARN] FILE JSON PARAMS RITENTIVI NON PRESENTE\");\n        msg.errore.stato = true;\n        msg.errore.msg = \"FILE JSON PARAMS RITENTIVI NON PRESENTE\";\n    }\n} catch (err) {\n    console.error(err);\n    msg.errore.stato = true;\n    msg.errore.msg = err.message;\n    console.log(\"[ERR] PARAMS RITENTIVI LETTI DA JSON\");\n    //errore\n    carica_parametri_default = true;\n}\nmsg.payload = { \"function\": \"aggiorna_parametri_ritentivi\", \"value\": \"\", \"errore\": msg.errore };\nreturn  msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3580,
        "wires": [
            [
                "660363939bf7d56b"
            ]
        ]
    },
    {
        "id": "dbb118ea.8d2b08",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "",
        "props": [
            {
                "p": "payload.x",
                "v": "[[1,1],[2,21],[3,5],[4,45],[5,59],[6,250],[7,359],[8,500],[9,456],[10,505],[11,510],[12,509],[13,456],[14,512],[15,350],[16,330],[17,300],[18,200],[19,50],[20,7],[21,18],[22,9],[23,5],[24,4],[25,2]]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "4e137d9f.1d5ed4"
            ]
        ]
    },
    {
        "id": "4e137d9f.1d5ed4",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "while",
        "func": "i=context.get('count')||0;\n\narray_ingresso=msg.payload.x;\n\ni=i+1;\n\ncontext.set('count',i);\n\n\n\nif(i<2) {\n    msg.payload.x= array_ingresso;\n    return [msg , null];\n} else {\n    msg.payload = i;\n    context.set('count',0);\n    msg.dati=array_ingresso;\n    return [null, msg];\n    }",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "7fd2b48e.90917c",
                "ec1a3022.1725b"
            ],
            [
                "59aa5cde.55cc24"
            ]
        ]
    },
    {
        "id": "ec1a3022.1725b",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 320,
        "wires": []
    },
    {
        "id": "513779ac.89c0b8",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 440,
        "wires": []
    },
    {
        "id": "59aa5cde.55cc24",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "",
        "func": "dati=msg.dati;\n\n// Y = a * X + b ;\na=msg.f_lineare.equation[0];\nb=msg.f_lineare.equation[1];\n\n// Y = c * X^2 + d * X + e ;\nc=msg.f_quadratica.equation[0];\nd=msg.f_quadratica.equation[1];\ne=msg.f_quadratica.equation[2];\n\n// Y = f * X^3 + g * X^2 + h * X  + i;\nf=msg.f_cubica.equation[0];\ng=msg.f_cubica.equation[1];\nh=msg.f_cubica.equation[2];\ni=msg.f_cubica.equation[3];\n\n\narray_punti=[];\narray_f_lin=[];\narray_f_quad=[];\narray_f_cub=[];\n\n\nlast_id = 0;\n\n    \n\nfor (const punto in dati)\n{\n    json_punto={};\n    json_f_lin={};\n    json_f_quad={};\n    json_f_cub={};\n    \n    x=dati[punto][0];\n    \n    json_punto['x']     =x ;\n    json_punto['y']     =dati[punto][1];\n   \n    json_f_lin['x']     =x;\n    json_f_lin['y']     =x * a + b;\n    \n    json_f_quad['x']    =x;\n    json_f_quad['y']    =x * x * c + x * d + e;\n    \n    json_f_cub['x']  =x;\n    json_f_cub['y']  =x**3 * f  +  x**2 * g + x * h + i;\n    \n    \n    array_punti.push(json_punto);\n    array_f_lin.push(json_f_lin);\n    array_f_quad.push(json_f_quad);\n    array_f_cub.push(json_f_cub);\n    \n    last_id= last_id + 1;    \n}\n   /* \n    json_funzione={};\n    \n    json_funzione['x']  =dati[1][0];\n    json_funzione['y']  =dati[1][0] * a + b;\n    array_funzione.push(json_funzione);\n    \n    json_funzione['x']  =dati[2][0];\n    json_funzione['y']  =dati[2][0] * a + b;\n    array_funzione.push(json_funzione);\n    */\n\nvar chart = [{\n    \"series\":[\"punti\",\"lineare\", \"quadratica\", \"cubica\"],\n        \"data\":[array_punti,array_f_lin,array_f_quad,array_f_cub ],\n    \"labels\":[\"\"]\n}];\nmsg.payload = chart;\nmsg.indice=last_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 66,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 560,
        "wires": [
            [
                "513779ac.89c0b8"
            ]
        ]
    },
    {
        "id": "caef1d50.f5c46",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "",
        "props": [
            {
                "p": "payload.x",
                "v": "[[1,1],[2,21],[3,5],[4,45],[5,59],[6,250],[7,359],[8,500],[9,456],[10,505],[11,510],[12,509],[13,456],[14,512],[15,350],[16,330],[17,300],[18,200],[19,50],[20,7],[21,18],[22,9],[23,5],[24,4],[25,2]]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "19be6d99.9b6662"
            ]
        ]
    },
    {
        "id": "19be6d99.9b6662",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "test regressione",
        "func": "dati=msg.payload.x;\nvar regression=global.get('modulo_regressione');\n\nvar result = regression.linear(dati);\nvar gradient = result.equation[0];\nvar yIntercept = result.equation[1];\n\nconst pippo =12;\n\nxxx = result;\n\npippo=13;\n\n\n\nmsg.payload = pippo;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 640,
        "wires": [
            [
                "c4aaa1d9.6df7a"
            ]
        ]
    },
    {
        "id": "c4aaa1d9.6df7a",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 660,
        "wires": []
    },
    {
        "id": "daa37444.904118",
        "type": "catch",
        "z": "50e3bf45.5484a",
        "name": "",
        "scope": [
            "19be6d99.9b6662"
        ],
        "uncaught": false,
        "x": 170,
        "y": 780,
        "wires": [
            [
                "a3d6a7d4.e3e128",
                "44d301.76e84d"
            ]
        ]
    },
    {
        "id": "a3d6a7d4.e3e128",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 780,
        "wires": []
    },
    {
        "id": "44d301.76e84d",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "",
        "func": "\nx='gino';\npayload=msg.payload;\n\nnode.warn(`Valore di x è: ${x}`);\n\nnode.warn( payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "b9dabaa4.cbc7f8",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "STAMPA_HTML_TO_PDF",
        "func": "var moment = global.get(\"moment\");\ndataora= moment(Date.now()).format('YYYY-MM-DD HH:mm:ss');\ndataora_path= moment(Date.now()).format('YYYYMMDD_HHmmss');\n\npath_html='C:\\\\temp\\\\provahtml.html'\n\npath_pdf=`C:\\\\temp\\\\provahtml_${dataora_path}.pdf`;\n\n\n\n\nvar fs = global.get('fs');\nvar pdf = global.get('html_pdf');\n//var html = fs.readFileSync(path_html, 'utf8');\n\nvar html=msg.payload;\n\nvar options = { format: 'A4' };\n\npdf.create(html, options).toFile(path_pdf, function(err, res) {\n  if (err) return node.warn(err);\n  node.warn(res); \n});\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 982.9999179840088,
        "wires": [
            []
        ]
    },
    {
        "id": "996c5c15.f80fe",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 255,
        "y": 962.9999179840088,
        "wires": [
            [
                "16ac36cf.004fe9"
            ]
        ]
    },
    {
        "id": "16ac36cf.004fe9",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "genera html",
        "func": "var moment = global.get(\"moment\");\n\n\ndataora=msg.payload;\ndataora=Date.now();\n\n\ndataora= moment(dataora).format('YYYY-MM-DD HH:mm:ss');\n\n\nhtml1=`<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n<p>${dataora}</p>\n</body>\n</html>\n`;\n\n\nhtml=`\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML>\n<HEAD>\n\t<META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=windows-1252\">\n\t<TITLE></TITLE>\n\t<META NAME=\"GENERATOR\" CONTENT=\"OpenOffice 4.1.7  (Win32)\">\n\t<META NAME=\"AUTHOR\" CONTENT=\"M L\">\n\t<META NAME=\"CREATED\" CONTENT=\"20220804;14244266\">\n\t<META NAME=\"CHANGEDBY\" CONTENT=\"M L\">\n\t<META NAME=\"CHANGED\" CONTENT=\"20220804;14264272\">\n\t<STYLE TYPE=\"text/css\">\n\t<!--\n\t\t@page { margin: 2cm }\n\t\tP { margin-bottom: 0.21cm }\n\t\tH1 { margin-bottom: 0.21cm }\n\t\tH1.western { font-family: \"Arial\", sans-serif; font-size: 16pt }\n\t\tH1.cjk { font-family: \"Microsoft YaHei\"; font-size: 16pt }\n\t\tH1.ctl { font-family: \"Arial Unicode MS\"; font-size: 16pt }\n\t\tH2 { margin-bottom: 0.21cm }\n\t\tH2.western { font-family: \"Arial\", sans-serif; font-size: 14pt; font-style: italic }\n\t\tH2.cjk { font-family: \"Microsoft YaHei\"; font-size: 14pt; font-style: italic }\n\t\tH2.ctl { font-family: \"Arial Unicode MS\"; font-size: 14pt; font-style: italic }\n\t\tH3 { margin-bottom: 0.21cm }\n\t\tH3.western { font-family: \"Arial\", sans-serif }\n\t\tH3.cjk { font-family: \"Microsoft YaHei\" }\n\t\tH3.ctl { font-family: \"Arial Unicode MS\" }\n\t\tTD P { margin-bottom: 0cm }\n\t\tTH P { margin-bottom: 0cm }\n\t-->\n\t</STYLE>\n</HEAD>\n<BODY LANG=\"it-IT\" DIR=\"LTR\">\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P ALIGN=CENTER STYLE=\"margin-bottom: 0cm\"><FONT SIZE=7 STYLE=\"font-size: 54pt\">Ciao\ncome stai?</FONT></P>\n<OL>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n</OL>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<H1 CLASS=\"western\">Ciao come stai?</H1>\n<H2 CLASS=\"western\">Ciao come stai?</H2>\n<H3 CLASS=\"western\">Ciao come stai?</H3>\n<P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<TABLE WIDTH=100% BORDER=1 BORDERCOLOR=\"#000000\" CELLPADDING=4 CELLSPACING=0>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<THEAD>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>tii</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yi</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yy</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>werwe</P>\n\t\t\t</TH>\n\t\t</TR>\n\t</THEAD>\n\t<TBODY>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"1\" SDNUM=\"1040;\">\n\t\t\t\t<P>1</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"8\" SDNUM=\"1040;\">\n\t\t\t\t<P>8</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"2\" SDNUM=\"1040;\">\n\t\t\t\t<P>2</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3\" SDNUM=\"1040;\">\n\t\t\t\t<P>3</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"7\" SDNUM=\"1040;\">\n\t\t\t\t<P>7</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3424\" SDNUM=\"1040;\">\n\t\t\t\t<P>3424</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"4\" SDNUM=\"1040;\">\n\t\t\t\t<P>4</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"6\" SDNUM=\"1040;\">\n\t\t\t\t<P>6</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"5\" SDNUM=\"1040;\">\n\t\t\t\t<P>5</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t</TBODY>\n</TABLE>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n</BODY>\n</HTML>\n`\n\n\n\n\n\nmsg.payload=html;\n\nnode.warn(dataora);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 385,
        "y": 1042.9999179840088,
        "wires": [
            [
                "b9dabaa4.cbc7f8"
            ]
        ]
    },
    {
        "id": "9c851a49.9e3878",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "genera html",
        "func": "var moment = global.get(\"moment\");\n\n\ndataora=msg.payload;\ndataora=Date.now();\n\n\ndataora= moment(dataora).format('YYYY-MM-DD HH:mm:ss');\n\n\nhtml1=`<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n<p>${dataora}</p>\n</body>\n</html>\n`;\n\n\nhtml=`\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML>\n<HEAD>\n\t<META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=windows-1252\">\n\t<TITLE></TITLE>\n\t<META NAME=\"GENERATOR\" CONTENT=\"OpenOffice 4.1.7  (Win32)\">\n\t<META NAME=\"AUTHOR\" CONTENT=\"M L\">\n\t<META NAME=\"CREATED\" CONTENT=\"20220804;14244266\">\n\t<META NAME=\"CHANGEDBY\" CONTENT=\"M L\">\n\t<META NAME=\"CHANGED\" CONTENT=\"20220804;14412975\">\n\t<STYLE TYPE=\"text/css\">\n\t\n\t\t@page { margin: 2cm }\n\t\tP { margin-bottom: 0.21cm }\n\t\tH1 { margin-bottom: 0.21cm }\n\t\tH1.western { font-family: \"Arial\", sans-serif; font-size: 16pt }\n\t\tH1.cjk { font-family: \"Microsoft YaHei\"; font-size: 16pt }\n\t\tH1.ctl { font-family: \"Arial Unicode MS\"; font-size: 16pt }\n\t\tH2 { margin-bottom: 0.21cm }\n\t\tH2.western { font-family: \"Arial\", sans-serif; font-size: 14pt; font-style: italic }\n\t\tH2.cjk { font-family: \"Microsoft YaHei\"; font-size: 14pt; font-style: italic }\n\t\tH2.ctl { font-family: \"Arial Unicode MS\"; font-size: 14pt; font-style: italic }\n\t\tH3 { margin-bottom: 0.21cm }\n\t\tH3.western { font-family: \"Arial\", sans-serif }\n\t\tH3.cjk { font-family: \"Microsoft YaHei\" }\n\t\tH3.ctl { font-family: \"Arial Unicode MS\" }\n\t\tTD P { margin-bottom: 0cm }\n\t\tTH P { margin-bottom: 0cm }\n\t\tA:link { so-language: zxx }\n\t\n\t</STYLE>\n</HEAD>\n<BODY LANG=\"it-IT\" DIR=\"LTR\">\n<DIV TYPE=HEADER>\n\t<P ALIGN=CENTER STYLE=\"margin-bottom: 0.5cm\"><FONT SIZE=1 STYLE=\"font-size: 8pt\">Intestazione</FONT></P>\n</DIV>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P ALIGN=CENTER STYLE=\"margin-bottom: 0cm\"><FONT SIZE=7 STYLE=\"font-size: 54pt\">PROVA\nREPORT</FONT></P>\n<OL>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n</OL>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<H1 CLASS=\"western\">Ciao come stai?</H1>\n<H2 CLASS=\"western\">Ciao come stai?</H2>\n<H3 CLASS=\"western\">Ciao come stai?</H3>\n<P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<TABLE WIDTH=100% BORDER=1 BORDERCOLOR=\"#000000\" CELLPADDING=4 CELLSPACING=0>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<THEAD>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>tii</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yi</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yy</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>werwe</P>\n\t\t\t</TH>\n\t\t</TR>\n\t</THEAD>\n\t<TBODY>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"1\" SDNUM=\"1040;\">\n\t\t\t\t<P>1</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"8\" SDNUM=\"1040;\">\n\t\t\t\t<P>8</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"2\" SDNUM=\"1040;\">\n\t\t\t\t<P>2</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3\" SDNUM=\"1040;\">\n\t\t\t\t<P>3</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"7\" SDNUM=\"1040;\">\n\t\t\t\t<P>7</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3424\" SDNUM=\"1040;\">\n\t\t\t\t<P>3424</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"4\" SDNUM=\"1040;\">\n\t\t\t\t<P>4</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"6\" SDNUM=\"1040;\">\n\t\t\t\t<P>6</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"5\" SDNUM=\"1040;\">\n\t\t\t\t<P>5</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t</TBODY>\n</TABLE>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<H3 CLASS=\"western\">Ciao come stai?</H3>\n<P STYLE=\"margin-bottom: 0cm\">Ciao come stai?</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<TABLE WIDTH=100% BORDER=1 BORDERCOLOR=\"#000000\" CELLPADDING=4 CELLSPACING=0>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<COL WIDTH=26*>\n\t<THEAD>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>tii</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yi</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yui</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>yy</P>\n\t\t\t</TH>\n\t\t\t<TH WIDTH=10%>\n\t\t\t\t<P>werwe</P>\n\t\t\t</TH>\n\t\t</TR>\n\t</THEAD>\n\t<TBODY>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"1\" SDNUM=\"1040;\">\n\t\t\t\t<P>1</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"8\" SDNUM=\"1040;\">\n\t\t\t\t<P>8</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"2\" SDNUM=\"1040;\">\n\t\t\t\t<P>2</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3\" SDNUM=\"1040;\">\n\t\t\t\t<P>3</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"7\" SDNUM=\"1040;\">\n\t\t\t\t<P>7</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"3424\" SDNUM=\"1040;\">\n\t\t\t\t<P>3424</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"4\" SDNUM=\"1040;\">\n\t\t\t\t<P>4</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"6\" SDNUM=\"1040;\">\n\t\t\t\t<P>6</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t</TR>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"5\" SDNUM=\"1040;\">\n\t\t\t\t<P>5</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10% SDVAL=\"35\" SDNUM=\"1040;\">\n\t\t\t\t<P>35</P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=10%>\n\t\t\t\t<P><BR>\n\t\t\t\t</P>\n\t\t\t</TD>\n\t\t</TR>\n\t</TBODY>\n</TABLE>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><SPAN ID=\"Cornice1\" DIR=\"LTR\" STYLE=\"float: left; width: 9cm; height: 16cm; border: none; padding: 0cm; background: #ffffff\">\n\t<P STYLE=\"margin-top: 0.21cm\"><IMG SRC=\"webpreview_htm_m3615a6a.jpg\" NAME=\"immagini1\" ALIGN=LEFT WIDTH=340 BORDER=0><BR CLEAR=LEFT><FONT SIZE=3><I>Illustrazione\n\t1: plc</I></FONT></P>\n</SPAN><BR CLEAR=LEFT><BR>\n</P>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<DIV TYPE=FOOTER>\n\t<TABLE WIDTH=100% BORDER=1 BORDERCOLOR=\"#000000\" CELLPADDING=4 CELLSPACING=0 RULES=NONE>\n\t\t<COL WIDTH=85*>\n\t\t<COL WIDTH=85*>\n\t\t<COL WIDTH=85*>\n\t\t<TR VALIGN=TOP>\n\t\t\t<TD WIDTH=33% BGCOLOR=\"#ffff99\">\n\t\t\t\t<P><FONT SIZE=1 STYLE=\"font-size: 8pt\">Piedi i pagina sinista</FONT></P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=33% BGCOLOR=\"#ffff99\">\n\t\t\t\t<P ALIGN=CENTER><FONT SIZE=1 STYLE=\"font-size: 8pt\">Pie di pagina\n\t\t\t\tcentro</FONT></P>\n\t\t\t</TD>\n\t\t\t<TD WIDTH=33% BGCOLOR=\"#ffff99\">\n\t\t\t\t<P ALIGN=RIGHT><FONT SIZE=1 STYLE=\"font-size: 8pt\">Pagina <SDFIELD TYPE=PAGE SUBTYPE=RANDOM FORMAT=PAGE>1</SDFIELD>\n\t\t\t\tdi <SDFIELD TYPE=DOCSTAT SUBTYPE=PAGE FORMAT=PAGE>2</SDFIELD></FONT></P>\n\t\t\t</TD>\n\t\t</TR>\n\t</TABLE>\n</DIV>\n</BODY>\n</HTML>\n`\n\n\n\n\n\nmsg.payload=html;\n\nnode.warn(dataora);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1160,
        "wires": [
            [
                "b9dabaa4.cbc7f8"
            ]
        ]
    },
    {
        "id": "1403431.59306bd",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "9c851a49.9e3878"
            ]
        ]
    },
    {
        "id": "5e7135c0.421d9c",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "ransac",
        "func": "var Ransac=global.get('ransac');\n// node.warn('ciao');\n\n/*\nvar data = [{\n    x: 0,\n    y: 0.2\n}, {\n    x: 2,\n    y: 1.9\n}, {\n    x: 2.1,\n    y: 1.85\n}];\n*/\n\nvar data= msg.dati;\nvar options=msg.impostazioni;\n\nvar problem = {\n    // Your model, is how you compute your parameters or\n    // variable you want to find. Here there are m and b\n    model: function(sample) {\n        var p1 = sample[0];\n        var p2 = sample[1];\n        // You should validate p2.x != p1.x\n        var m = (p2.y - p1.y) / (p2.x - p1.x);\n        var b = p1.y - m * p1.x;\n        return {\n            m: m,\n            b: b\n        }\n    },\n    // Given model values, return a number indicate if you\n    // accept the point as inlier\n    fit: function(model, point) {\n        var y_estimated = model.m * point.x + model.b;\n        var error = point.y - y_estimated;\n        return Math.abs(error);\n    },\n\n    data: data\n};\n// node.warn('problem ok');\n\n// **********************\n\n\n\n//node.warn('options ok');\n\n// **********************\n\n\n\n\n// Then, create your object and estime a model:\n// This is only required in Node. In Browser we use window.Ransac\n\n\n\nvar ransacProblem = new Ransac(problem);\n\n//node.warn('ransacProblem ok');\n//node.warn(ransacProblem);\n\n\nvar solution = ransacProblem.estimate(options);\n// node.warn('solution ok');\n\nmsg.payload=solution;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1280,
        "wires": [
            [
                "aaa23f76.492c1"
            ]
        ]
    },
    {
        "id": "aaa23f76.492c1",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b76c2903.797118",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "dati e impostazioni",
        "props": [
            {
                "p": "dati",
                "v": "[{\"x\":1,\"y\":1},{\"x\":2,\"y\":21},{\"x\":3,\"y\":5},{\"x\":4,\"y\":45},{\"x\":5,\"y\":59},{\"x\":6,\"y\":250},{\"x\":7,\"y\":359},{\"x\":8,\"y\":500},{\"x\":9,\"y\":456},{\"x\":10,\"y\":505},{\"x\":11,\"y\":510},{\"x\":12,\"y\":509},{\"x\":13,\"y\":456},{\"x\":14,\"y\":512},{\"x\":15,\"y\":350},{\"x\":16,\"y\":330},{\"x\":17,\"y\":300},{\"x\":18,\"y\":200},{\"x\":19,\"y\":50},{\"x\":20,\"y\":7},{\"x\":21,\"y\":18},{\"x\":22,\"y\":9},{\"x\":23,\"y\":5},{\"x\":24,\"y\":4},{\"x\":25,\"y\":2}]",
                "vt": "json"
            },
            {
                "p": "impostazioni",
                "v": "{\"sampleSize\":2,\"threshold\":25,\"maxIterations\":100,\"inliersRatio\":0.2,\"improveModelWithConcensusSet\":true}",
                "vt": "json"
            },
            {
                "p": "Commenti",
                "v": "{      \"sampleSize\": 2,     //  We only need 2 points to compute m and b      \"threshold\": 25,     // Used to determine if error is good enough      \"maxIterations\": 100,  // Number of times RANSAC will try a model      \"inliersRatio\": 0.2,  // To accept a model, atl least 70% of points must fit      \"improveModelWithConcensusSet\": true  // If model function supports more than sampleSize points, set this true to improve accepted models  }",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1280,
        "wires": [
            [
                "5e7135c0.421d9c"
            ]
        ]
    },
    {
        "id": "6e864793.c63d08",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "trasforma dati",
        "func": "dati_in=msg.payload;\n\ndati_out=[];\n\nfor (const x in dati_in)\n{\n    JASON = {};\n    JASON.x=dati_in[x][0];\n    JASON.y=dati_in[x][1];\n    \n    dati_out.push(JASON);\n    \n}\n\nmsg.payload=dati_out;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "7c67ee7f.5e35a",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d7b221d5.08729",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":8,\"msgID\":3450,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[1937,108488],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,133,36316,133,36305,123,36291,127,36275,140,36263,138,36251,133,36238,134,36226,129,36213,128,36202,118,36187,127,36173,135,36161,128,36148,127,36137,118,36124,117,36109,127,36095,132,36083,129,36072,120,36058,125,36044,130,36031,129,36020,120,36007,119,35993,122,35979,129,35967,124,35953,133,35940,132,35926,138,35916,121,35902,125,35888,129,35877,120,35864,123,35851,119,35839,113,35824,124,35812,123,35799,121,35786,121,35773,123,35761,114,35745,133,35735,118,35722,115,35709,115,35697,112,35684,112,35669,122,35658,112,35643,122,35631,118,35619,113,35605,119,35592,118,35580,115,35567,115,35555,115,35542,113,35529,119,35515,123,35501,135,35489,129,35477,127,35466,115,35452,120,35441,113,35428,114,35415,119,35403,113,35390,116,35377,116,35362,130,35350,123,35336,132,35324,129,35314,114,35301,112,35287,124,35275,122,35262,119,35249,122,35238,115,35225,112,35211,123,35200,113,35188,107,35174,117,35160,122,35148,118,35135,121,35125,106,35110,117,35098,117,35086,111,35075,99,35060,116,35047,120,35034,121,35021,124,35009,113,34995,125,34984,115,34971,115,34958,116,34945,122,34932,125,34920,118,34907,121,34895,119,34804,732,34792,729,34781,725,34769,722,34751,770,34721,920,34696,1027,34674,1112,34652,1198,34625,1327,34589,1539,34544,1819,34532,1827,34521,1824,34510,1821,34499,1819,34488,1816,34477,1815,34466,1814,34454,1827,34444,1813,34434,1799,34422,1807,34411,1808,34399,1810,34387,1815,34376,1813,34364,1826,34354,1815,34342,1816,34331,1816,34319,1825,34308,1821,34296,1826,34286,1818,34276,1810,34264,1818,34253,1812,34242,1813,34231,1811,34220,1809,34208,1813,34197,1810,34185,1814,34175,1809,34164,1808,34152,1810,34141,1814,34130,1812,34118,1822,34108,1810,34097,1811,34085,1815,34074,1813,34063,1812,34052,1815,34041,1819,34030,1811,34019,1811,34008,1817,33997,1812,33985,1818,33974,1821,33963,1818,33952,1816,33941,1818,33930,1816,33919,1814,33908,1817,33897,1812,33886,1817,33875,1814,33863,1820,33853,1810,33842,1809,33831,1810,33819,1819,33807,1829,33797,1825,33785,1827,33774,1825,33763,1825,33752,1821,33741,1819,33731,1815,33719,1823,33708,1826,33698,1814,33686,1814,33675,1825,33664,1822,33652,1831,33642,1822,33632,1804,33621,1799,33610,1797,33599,1801,33587,1807,33576,1815,33565,1805,33554,1811,33542,1825,33531,1825,33520,1819,33509,1824,33498,1828,33487,1825,33476,1826,33465,1824,33453,1832,33443,1820,33432,1809,33421,1808,33410,1813,33399,1811,33388,1825,33377,1822,33365,1833,33354,1829,33344,1821,33333,1824,33322,1821,33311,1818,33300,1826,33288,1828,33278,1827,33266,1838,33255,1839,33244,1838,33233,1842,33222,1830,33212,1820,33200,1833,33189,1838,33178,1837,33168,1821,33157,1816,33146,1822,33135,1824,33124,1827,33113,1826,33102,1833,33090,1836,33079,1838,33069,1834,33058,1826,33047,1831,33036,1834,33025,1826,33014,1822,33003,1825,32992,1827,32981,1836,32970,1830,32959,1836,32948,1832,32937,1844,32926,1841,32915,1839,32904,1835,32893,1840,32882,1839,32871,1828,32860,1828,32849,1828,32838,1831,32827,1836,32816,1834,32805,1839,32794,1834,32783,1841,32772,1841,32761,1844,32750,1830,32739,1826,32728,1833,32717,1837,32706,1839,32695,1844,32684,1845,32673,1848,32662,1848,32651,1843,32640,1844,32629,1843,32618,1847,32607,1848,32596,1843,32585,1834,32574,1834,32563,1840,32552,1842,32541,1844,32531,1850,32520,1844,32509,1848,32498,1847,32487,1851,32476,1852,32465,1848,32454,1846,32443,1841,32432,1840,32421,1836,32410,1849,32399,1845,32388,1852,32377,1854,32366,1850,32355,1854,32344,1850,32333,1857,32322,1859,32311,1864,32300,1862,32289,1856,32278,1853,32267,1851,32256,1856,32245,1859,32235,1859,32223,1850,32212,1854,32201,1851,32190,1855,32180,1858,32169,1856,32158,1859,32146,1852,32135,1847,32124,1846,32113,1847,32103,1853,32091,1850,32081,1862,32071,1873,32060,1872,32048,1870,32037,1869,32026,1864,32014,1854,32004,1861,31993,1864,31981,1847,31969,1838,31955,1773,31941,1713,31925,1631,31910,1568,31895,1501,31881,1448,31865,1372,31850,1302,31835,1240,31820,1197,31805,1131,31790,1075,31775,1016,31759,951,31742,868,31727,818,31715,809,31702,798,31691,800,31641,253,31628,242,31615,223,31601,208,31589,205,31576,201,31564,203,31553,209,31540,210,31528,208,31516,208,31504,210,31491,211,31479,212,31467,209,31455,214,31442,210,31430,209,31418,210,31406,220,31394,216,31382,220,31369,210,31357,213,31345,222,31333,223,31320,219,31308,220,31295,214,31282,209,31271,219,31258,213,31246,216,31234,221,31221,218,31209,218,31197,225,31185,226,31173,231,31160,223,31147,224,31135,226,31123,231,31111,227,31099,239,31085,222,31073,226,31062,235,31049,229,31037,233,31024,229,31012,236,31000,238,30988,238,30975,231,30964,249,30952,248,30938,239,30927,244,30914,242,30901,240,30889,242,30876,238,30865,243,30853,246,30839,238,30827,242,30816,246,30803,246,30791,245,30779,254,30767,258,30753,239,30740,236,30728,237,30716,243,30704,248,30693,255,30680,255,30668,254,30655,247,30643,253,30631,257,30618,255,30605,255,30593,254,30581,256,30568,257,30555,257,30542,250,30531,261,30519,264,30507,271,30494,269,30482,272,30469,270,30457,271,30445,280,30432,273,30419,271,30407,277,30394,274,30381,272,30370,278,30358,283,30345,285,30332,281,30320,282,30307,279,30294,281,30282,282,30270,283,30257,282,30244,281,30232,287,30220,289,30209,296,30195,289,30183,290,30171,294,30157,288,30145,292,30131,285,30119,289,30107,291,30095,296,30082,294,30071,299,30058,301,30045,297,30032,295,30021,300,30008,302,29996,303,29983,299,29970,299,29958,304,29946,303,29933,301,29920,304,29908,305,29896,310,29882,307,29870,307,29857,309,29843,301,29832,311,29819,310,29805,305,29793,313,29781,313,29768,314,29756,317,29743,318,29731,326,29717,318,29704,319,29691,319,29678,318,29665,317,29652,317,29640,317,29628,326,29615,323,29603,328,29589,324,29576,323,29565,330,29551,328,29540,333,29527,335,29515,340,29503,342,29488,335,29477,340,29464,342,29452,345,29438,342,29427,349,29412,341,29400,342,29387,343,29374,340,29362,346,29350,349,29337,352,29324,351,29311,349,29298,347,29284,344,29271,341,29259,345]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[3.070302,86.9297,0.0536,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.2},\"Min\":{\"x\":-35.08,\"z\":7.407},\"values\":[3.07,86.93,0.05364,9.289]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50,\"bottom\":0,\"left\":-36,\"right\":36},\"ActualBlindRegion\":{\"top\":0,\"bottom\":0,\"left\":0,\"right\":0},\"shiftVector\":{\"x\":0,\"z\":0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0,\"offset\":0},\"values\":[3.070302,86.9297,0.0536,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.2},\"Min\":{\"x\":-35.08,\"z\":7.407},\"values\":[3.07,86.93,0.05364,9.289]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1680,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "51c82e7c.e68d7",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":8,\"msgID\":4814,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2006,489487],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,132,36316,131,36303,134,36291,127,36275,143,36262,140,36251,131,36236,140,36226,129,36213,128,36201,123,36187,126,36173,132,36159,135,36148,126,36137,117,36124,118,36109,127,36095,131,36084,125,36073,114,36057,126,36043,132,36031,130,36019,122,36006,124,35993,124,35980,127,35968,119,35952,133,35940,130,35926,133,35915,125,35901,133,35889,127,35877,119,35863,123,35850,123,35838,119,35824,124,35811,128,35800,118,35786,121,35773,122,35761,115,35746,126,35734,121,35723,114,35709,118,35696,120,35684,111,35668,127,35657,116,35644,119,35632,115,35618,117,35604,123,35593,117,35579,120,35567,116,35553,127,35541,119,35529,119,35516,120,35502,125,35489,129,35476,131,35465,119,35452,121,35441,111,35428,111,35415,116,35402,116,35391,108,35376,121,35362,129,35351,120,35339,118,35325,124,35312,126,35301,113,35287,124,35275,122,35262,119,35251,108,35237,120,35224,121,35209,133,35199,118,35186,118,35173,120,35161,121,35150,108,35135,123,35123,116,35111,115,35097,119,35085,119,35073,114,35060,118,35047,119,35034,116,35020,126,35009,120,34997,113,34982,126,34971,116,34958,120,34945,119,34932,126,34921,114,34908,116,34895,114,34804,734,34792,728,34781,720,34769,722,34751,770,34722,915,34696,1028,34674,1111,34653,1196,34626,1322,34605,1400,34545,1813,34532,1829,34521,1826,34511,1819,34500,1818,34489,1808,34478,1810,34467,1812,34454,1819,34444,1814,34434,1798,34422,1806,34411,1807,34399,1812,34388,1812,34377,1811,34364,1823,34354,1813,34342,1815,34331,1816,34319,1823,34308,1823,34297,1825,34286,1816,34276,1809,34264,1818,34253,1811,34241,1816,34230,1814,34219,1811,34208,1817,34197,1808,34185,1814,34175,1807,34164,1807,34153,1807,34141,1813,34130,1813,34118,1822,34108,1811,34097,1813,34085,1815,34074,1812,34063,1817,34052,1815,34041,1814,34030,1812,34019,1811,34007,1818,33997,1815,33985,1819,33974,1820,33963,1815,33952,1815,33941,1819,33930,1814,33919,1814,33908,1817,33897,1813,33886,1817,33875,1815,33863,1820,33853,1809,33842,1808,33831,1809,33819,1819,33807,1829,33796,1825,33785,1827,33774,1823,33763,1825,33753,1818,33742,1818,33730,1819,33719,1823,33708,1827,33698,1813,33687,1809,33675,1826,33664,1823,33652,1828,33642,1821,33632,1802,33621,1800,33610,1797,33599,1802,33587,1807,33576,1814,33565,1805,33554,1812,33542,1825,33531,1824,33520,1820,33509,1825,33497,1832,33487,1823,33476,1821,33465,1823,33453,1829,33443,1818,33432,1805,33421,1806,33410,1811,33399,1812,33387,1827,33377,1822,33365,1833,33354,1830,33344,1822,33333,1824,33322,1820,33311,1818,33300,1826,33289,1827,33277,1828,33266,1836,33255,1837,33244,1837,33233,1843,33222,1831,33212,1819,33201,1827,33189,1837,33178,1835,33168,1820,33157,1815,33146,1822,33135,1824,33124,1826,33113,1827,33102,1833,33090,1835,33079,1836,33069,1830,33058,1825,33047,1831,33036,1833,33025,1825,33014,1822,33003,1824,32992,1827,32981,1836,32970,1830,32959,1836,32948,1830,32937,1843,32926,1840,32915,1837,32904,1836,32893,1840,32882,1839,32871,1829,32860,1827,32849,1829,32838,1832,32827,1837,32816,1831,32805,1839,32794,1834,32783,1838,32772,1840,32761,1843,32750,1832,32739,1828,32728,1830,32717,1837,32706,1840,32695,1844,32684,1846,32673,1849,32662,1848,32651,1841,32640,1844,32629,1841,32618,1845,32607,1848,32596,1841,32585,1832,32574,1835,32563,1840,32552,1841,32541,1842,32531,1851,32520,1845,32509,1848,32498,1847,32487,1850,32476,1855,32465,1847,32454,1843,32442,1837,32432,1837,32420,1835,32410,1848,32399,1845,32388,1851,32377,1854,32366,1851,32355,1855,32344,1850,32333,1857,32322,1858,32311,1863,32300,1863,32289,1855,32278,1853,32267,1852,32256,1855,32245,1859,32234,1859,32223,1850,32212,1855,32201,1851,32190,1855,32180,1861,32168,1853,32158,1864,32146,1852,32135,1846,32124,1845,32113,1846,32103,1853,32091,1848,32081,1863,32071,1873,32060,1871,32048,1870,32037,1872,32026,1867,32015,1858,32004,1857,31993,1862,31981,1849,31970,1840,31955,1779,31941,1716,31925,1633,31910,1563,31895,1497,31881,1450,31865,1372,31850,1302,31835,1241,31821,1197,31805,1128,31790,1076,31775,1014,31759,952,31742,868,31727,819,31715,807,31702,799,31690,799,31641,250,31629,250,31615,223,31601,206,31589,203,31577,203,31564,204,31552,207,31540,210,31528,210,31516,209,31504,211,31491,209,31479,210,31467,209,31455,211,31442,210,31430,211,31418,208,31406,218,31395,225,31382,221,31369,214,31357,213,31345,217,31333,218,31320,217,31308,217,31295,212,31283,219,31271,220,31258,217,31246,219,31234,219,31221,219,31209,219,31197,221,31185,224,31172,224,31160,225,31147,223,31136,235,31124,235,31112,236,31099,235,31085,223,31073,223,31061,228,31048,223,31037,230,31025,235,31012,235,31000,234,30987,233,30976,241,30964,244,30950,233,30938,234,30926,242,30913,236,30900,229,30888,228,30876,233,30864,239,30852,242,30840,243,30827,242,30814,237,30802,235,30791,250,30779,252,30766,249,30754,246,30740,240,30729,246,30717,249,30704,243,30693,253,30680,252,30667,248,30656,257,30644,257,30631,255,30618,252,30605,249,30593,254,30581,259,30568,257,30556,258,30543,262,30532,267,30518,260,30507,269,30494,267,30481,268,30469,269,30457,273,30446,281,30432,271,30420,278,30408,280,30394,273,30381,272,30368,270,30357,281,30344,278,30333,284,30319,279,30307,283,30295,288,30283,288,30270,288,30257,283,30245,286,30232,287,30221,292,30208,294,30194,283,30183,294,30171,295,30157,291,30145,290,30132,287,30120,289,30108,295,30096,297,30083,298,30071,299,30058,301,30046,304,30033,300,30021,300,30009,304,29995,297,29983,299,29970,300,29958,305,29946,306,29934,308,29920,304,29908,304,29897,314,29883,310,29870,308,29857,311,29844,310,29831,309,29819,310,29806,311,29794,314,29781,313,29768,314,29756,319,29743,320,29730,319,29716,312,29705,322,29692,321,29679,321,29666,319,29653,322,29641,324,29628,323,29615,326,29602,323,29590,330,29578,333,29566,335,29553,338,29540,333,29528,340,29515,341,29502,336,29490,341,29478,345,29464,342,29451,340,29440,352,29426,342,29414,346,29400,342,29387,344,29376,354,29362,348,29350,353,29339,357,29324,350,29313,356,29299,351,29286,352,29274,357,29261,357]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.054479,86.94552,0.0534,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.19},\"Min\":{\"x\":-35.05,\"z\":7.418},\"values\":[3.054,86.95,0.05336,9.288]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.054479,86.94552,0.0534,9.29],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":11.19},\"Min\":{\"x\":-35.05,\"z\":7.418},\"values\":[3.054,86.95,0.05336,9.288]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1720,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "668434e4.42a12c",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":1421,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2638,791756],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36331,121,36318,121,36305,124,36290,133,36275,143,36263,138,36251,132,36238,134,36224,139,36213,128,36200,127,36188,122,36175,124,36161,129,36148,130,36136,124,36121,131,36109,127,36096,128,36084,124,36070,130,36058,126,36043,134,36030,133,36017,135,36005,131,35993,125,35982,116,35967,122,35956,115,35942,119,35929,120,35918,108,35902,124,35889,125,35876,123,35864,120,35849,131,35838,122,35825,118,35812,123,35798,126,35787,116,35774,117,35760,119,35748,114,35735,116,35724,104,35711,106,35697,112,35682,125,35669,125,35658,111,35645,113,35632,115,35619,114,35607,108,35595,105,35579,123,35566,122,35554,119,35541,122,35528,122,35516,121,35503,120,35489,127,35480,110,35464,124,35453,115,35439,124,35427,122,35414,123,35401,125,35390,116,35376,119,35364,120,35350,123,35339,118,35327,113,35312,126,35299,128,35288,117,35276,113,35263,115,35249,122,35237,115,35223,124,35211,122,35198,126,35188,105,35175,109,35160,125,35148,118,35136,116,35124,110,35111,111,35099,111,35086,110,35072,117,35059,120,35046,123,35034,119,35021,118,35008,124,34996,121,34983,124,34969,133,34958,121,34946,116,34932,120,34921,109,34909,110,34895,113,34881,127,34792,734,34782,717,34770,720,34752,765,34725,887,34699,1004,34677,1088,34651,1208,34627,1309,34608,1374,34544,1823,34532,1832,34522,1821,34510,1827,34500,1815,34488,1824,34478,1810,34467,1809,34455,1814,34444,1812,34434,1801,34422,1805,34412,1795,34399,1808,34389,1801,34377,1810,34365,1816,34354,1813,34342,1819,34331,1817,34318,1833,34307,1831,34297,1818,34286,1816,34276,1804,34264,1813,34253,1809,34242,1806,34230,1816,34219,1820,34208,1812,34197,1809,34185,1814,34174,1818,34163,1816,34152,1812,34141,1815,34131,1805,34119,1811,34108,1811,34097,1813,34085,1813,34074,1815,34063,1816,34052,1818,34041,1820,34030,1812,34019,1810,34008,1808,33997,1810,33986,1810,33974,1816,33964,1812,33952,1814,33941,1821,33930,1822,33919,1821,33908,1814,33897,1810,33886,1817,33874,1819,33863,1818,33853,1808,33842,1803,33830,1814,33820,1812,33808,1823,33797,1819,33786,1824,33774,1827,33763,1828,33752,1822,33742,1815,33730,1820,33720,1814,33708,1822,33697,1821,33686,1818,33675,1822,33664,1822,33653,1821,33642,1814,33631,1807,33620,1820,33609,1812,33598,1804,33587,1805,33576,1813,33565,1808,33554,1811,33542,1820,33531,1827,33519,1831,33509,1825,33498,1827,33487,1823,33476,1816,33465,1813,33454,1821,33443,1820,33432,1807,33421,1803,33410,1814,33399,1818,33388,1823,33377,1826,33365,1836,33354,1834,33343,1827,33332,1829,33321,1832,33311,1813,33300,1818,33289,1821,33278,1819,33266,1830,33256,1826,33244,1834,33233,1844,33222,1841,33211,1831,33200,1832,33189,1839,33178,1834,33167,1833,33157,1819,33146,1820,33135,1821,33124,1830,33113,1824,33102,1831,33091,1830,33079,1838,33068,1839,33058,1830,33047,1838,33036,1837,33025,1823,33014,1826,33003,1824,32992,1823,32981,1831,32970,1838,32959,1835,32948,1837,32937,1839,32926,1838,32915,1845,32904,1840,32893,1837,32882,1841,32871,1836,32860,1823,32849,1819,32838,1830,32827,1817,32816,1838,32805,1838,32794,1838,32783,1844,32772,1841,32761,1842,32750,1824,32739,1828,32728,1833,32717,1829,32706,1833,32695,1840,32684,1844,32673,1843,32662,1851,32651,1847,32640,1845,32629,1850,32618,1844,32607,1848,32596,1842,32585,1844,32574,1829,32563,1838,32552,1842,32541,1841,32531,1846,32520,1845,32509,1855,32498,1856,32487,1853,32476,1849,32465,1848,32454,1851,32443,1845,32432,1841,32421,1841,32410,1852,32399,1846,32388,1849,32377,1856,32366,1859,32355,1852,32344,1853,32333,1862,32322,1859,32311,1856,32300,1860,32289,1856,32278,1850,32267,1856,32256,1851,32245,1859,32235,1861,32223,1855,32212,1854,32201,1850,32190,1852,32179,1853,32168,1851,32157,1853,32147,1857,32135,1849,32124,1852,32114,1853,32102,1850,32092,1855,32081,1863,32070,1867,32060,1875,32049,1874,32037,1869,32026,1869,32015,1867,32004,1863,31993,1862,31982,1859,31970,1841,31956,1787,31941,1723,31926,1650,31911,1575,31896,1513,31881,1457,31866,1378,31850,1310,31835,1240,31821,1203,31806,1143,31790,1083,31774,1010,31759,958,31743,882,31728,824,31715,810,31702,800,31690,799,31679,807,31628,233,31615,228,31601,208,31589,206,31577,203,31565,206,31552,208,31540,207,31528,208,31516,209,31503,208,31492,214,31479,210,31467,210,31455,213,31442,210,31430,214,31418,216,31406,214,31394,217,31381,214,31369,215,31357,215,31345,213,31333,222,31320,217,31308,215,31296,223,31283,216,31271,218,31259,223,31246,221,31234,224,31221,219,31209,224,31197,225,31185,225,31173,229,31160,224,31148,233,31136,238,31123,232,31111,235,31098,225,31086,228,31075,242,31062,234,31050,236,31037,235,31024,230,31012,236,31000,233,30988,241,30976,244,30963,238,30951,238,30939,242,30927,244,30914,238,30902,244,30889,237,30877,241,30865,247,30852,245,30840,241,30827,242,30816,250,30803,248,30792,253,30780,259,30767,254,30755,254,30742,249,30728,242,30717,247,30705,253,30692,249,30681,259,30669,266,30657,267,30644,263,30631,261,30618,254,30607,265,30594,261,30582,264,30569,265,30556,261,30544,266,30532,269,30520,276,30508,275,30495,276,30483,276,30469,268,30457,274,30445,275,30432,278,30420,277,30405,265,30395,278,30383,286,30371,285,30358,288,30346,287,30332,278,30321,288,30309,292,30296,294,30283,292,30270,288,30259,295,30246,295,30233,288,30221,296,30208,291,30195,292,30184,297,30171,296,30158,294,30146,296,30133,295,30121,301,30109,302,30096,300,30084,302,30071,300,30059,302,30047,306,30034,307,30021,305,30008,299,29996,302,29984,304,29971,305,29959,307,29947,313,29934,307,29921,306,29908,306,29894,302,29883,311,29870,312,29860,324,29847,324,29832,315,29820,317,29807,317,29794,315,29780,310,29769,318,29756,320,29744,322,29731,325,29719,327,29705,325,29692,324,29680,324,29668,329,29655,329,29643,334,29629,330,29617,333,29603,327,29591,334,29580,342,29566,338,29552,331,29543,348,29529,343,29516,346,29504,349,29491,347,29478,345,29465,347,29453,353,29440,349,29427,349,29415,355,29403,356,29391,364,29377,357,29367,368,29353,363,29339,361,29328,367,29314,361,29301,364,29288,360,29276,367,29263,367]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[2.931314,87.06869,0.0512,9.3],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":11.13},\"Min\":{\"x\":-35.03,\"z\":7.507},\"values\":[2.931,87.07,0.05121,9.301]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[2.931314,87.06869,0.0512,9.3],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":11.13},\"Min\":{\"x\":-35.03,\"z\":7.507},\"values\":[2.931,87.07,0.05121,9.301]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1760,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "d3cd0594.4a1ef8",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1540,
        "wires": []
    },
    {
        "id": "6e3509cd.285a28",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "Preparazione Dati",
        "func": "inizio=Date.now();\n\nxStart=     msg.payload.msgData[1].Profile.xStart;\nlength=     msg.payload.msgData[1].Profile.length;\nprec=       msg.payload.msgData[1].Profile.prec;\nqualityID=  msg.payload.msgData[1].Profile.qualityID;\npoints=     msg.payload.msgData[1].Profile.points;\n\n\ndati=   [];\ndati_x= [];\ndati_y= [];\ndati_xy= [];\n\nfor (let i = length*2 -2 ; i >=0  ; i-=2){\n    jason={};\n    \n    jason.x= points[i]+ xStart; \n    jason.y= points[i+1];\n    \n    dati.push(jason);\n}\n\n\ndati.forEach(punto => { \n    punto.x=punto.x/prec; \n    punto.y=punto.y/prec;  \n    dati_x.push(punto.x);  \n    dati_y.push(punto.y);\n    dati_xy.push([punto.x,punto.y]);\n    } );\n\ndurata=Date.now()-inizio;\n\nmsg.points=     dati;\nmsg.points_x=   dati_x;\nmsg.points_y=   dati_y;\nmsg.points_xy=   dati_xy;\n\nmsg.durata =    durata;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1540,
        "wires": [
            [
                "b1f1617d.7b951"
            ]
        ]
    },
    {
        "id": "b1f1617d.7b951",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "pre elaborazione",
        "func": "\n\nmin=function myArrayMax(arr) {\n  return Math.max.apply(null, arr);\n};\n\n\nmax= Math.max.apply(null, msg.points_y);\nmin= Math.min.apply(null, msg.points_y);\n\n\n// avg= Math.avg(msg.points_y);\n\nmsg.max=max;\nmsg.min=min;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1540,
        "wires": [
            [
                "d3cd0594.4a1ef8",
                "3bd1579a.e7c338"
            ]
        ]
    },
    {
        "id": "e61a9850.6b5ed8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 4 ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 4 ",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":6724,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[2906,125796],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36324,156,36310,162,36299,151,36285,156,36272,156,36259,155,36246,156,36233,158,36221,152,36207,157,36195,154,36181,157,36170,146,36156,151,36145,144,36130,153,36118,151,36105,148,36092,147,36081,140,36067,142,36055,139,36040,148,36024,167,36013,155,36000,157,35987,155,35974,154,35963,148,35950,146,35938,142,35926,137,35913,134,35896,159,35884,154,35872,149,35859,147,35847,144,35834,141,35820,146,35810,133,35795,145,35783,136,35768,150,35756,146,35742,148,35730,147,35718,139,35702,154,35691,146,35676,158,35663,157,35651,155,35640,142,35626,149,35613,148,35603,129,35590,133,35577,135,35563,141,35549,152,35538,140,35527,129,35512,141,35499,147,35487,142,35473,151,35461,143,35449,144,35437,140,35424,137,35411,142,35397,147,35386,141,35374,135,35359,151,35348,139,35335,138,35324,133,35310,138,35297,143,35284,144,35271,146,35258,149,35247,135,35235,131,35223,125,35209,139,35196,136,35184,137,35172,132,35159,128,35147,130,35134,132,35119,144,35106,147,35094,144,35082,139,35070,137,35057,139,35044,137,35031,140,35018,146,35006,140,34992,151,34981,138,34968,139,34955,140,34942,143,34930,140,34918,135,34905,134,34892,140,34880,133,34868,131,34855,132,34842,138,34830,138,34817,136,34804,140,34792,141,34780,138,34766,148,34755,134,34743,133,34729,145,34718,133,34706,131,34693,138,34681,131,34668,133,34655,140,34643,139,34630,144,34617,146,34604,147,34592,145,34581,139,34567,144,34555,141,34544,132,34531,133,34518,142,34505,148,34493,138,34481,135,34468,139,34457,129,34443,141,34431,140,34419,137,34405,147,34395,130,34382,128,34369,135,34357,130,34344,137,34332,134,34320,133,34308,124,34295,126,34283,130,34270,132,34258,130,34244,147,34232,143,34168,728,34155,742,34142,747,34128,782,34108,881,34087,983,34068,1077,34051,1144,34035,1204,34018,1272,33995,1410,33977,1493,33962,1550,33939,1694,33921,1793,33907,1832,33896,1823,33886,1815,33875,1818,33863,1824,33852,1824,33841,1817,33831,1808,33819,1813,33808,1812,33797,1815,33785,1832,33774,1828,33763,1822,33752,1825,33742,1817,33730,1828,33718,1837,33708,1828,33697,1823,33686,1818,33675,1821,33664,1818,33653,1823,33641,1828,33630,1832,33619,1835,33608,1822,33597,1821,33586,1831,33575,1822,33564,1823,33554,1813,33543,1805,33531,1818,33520,1822,33509,1818,33498,1821,33487,1826,33475,1829,33464,1831,33453,1840,33442,1828,33431,1827,33420,1833,33409,1826,33398,1835,33387,1826,33376,1830,33365,1840,33354,1835,33343,1831,33332,1834,33321,1829,33310,1828,33300,1823,33289,1821,33277,1830,33267,1826,33256,1817,33245,1819,33234,1828,33223,1826,33211,1832,33200,1835,33189,1839,33178,1831,33168,1830,33157,1830,33145,1835,33135,1830,33123,1835,33112,1840,33101,1836,33091,1831,33080,1828,33069,1828,33058,1836,33047,1831,33036,1836,33025,1840,33013,1842,33002,1844,32992,1838,32981,1837,32970,1833,32959,1833,32948,1826,32937,1822,32926,1837,32915,1847,32904,1845,32893,1845,32882,1850,32871,1849,32860,1842,32849,1842,32838,1840,32827,1844,32816,1840,32805,1841,32794,1837,32783,1841,32772,1839,32761,1851,32750,1839,32739,1840,32728,1844,32717,1849,32706,1841,32695,1847,32684,1838,32673,1843,32662,1839,32651,1839,32640,1829,32629,1846,32618,1849,32607,1849,32596,1841,32585,1844,32574,1841,32563,1843,32552,1847,32541,1840,32530,1844,32519,1842,32509,1851,32497,1841,32487,1847,32476,1855,32465,1859,32454,1850,32443,1860,32432,1858,32421,1855,32410,1856,32399,1854,32388,1846,32377,1849,32366,1848,32355,1843,32344,1844,32333,1841,32322,1845,32311,1855,32300,1855,32289,1854,32278,1859,32268,1863,32256,1858,32245,1849,32234,1845,32223,1848,32212,1845,32201,1838,32190,1842,32179,1843,32168,1849,32158,1858,32147,1861,32136,1854,32125,1863,32114,1859,32102,1850,32092,1855,32081,1854,32070,1856,32059,1850,32048,1855,32037,1853,32025,1851,32015,1855,32004,1857,31993,1862,31982,1864,31971,1865,31960,1859,31948,1857,31937,1848,31926,1855,31915,1855,31904,1855,31893,1858,31882,1851,31871,1856,31860,1859,31849,1866,31839,1872,31827,1867,31816,1860,31805,1861,31793,1855,31782,1855,31771,1855,31760,1858,31749,1851,31738,1856,31728,1864,31717,1866,31706,1872,31695,1869,31684,1876,31673,1874,31661,1865,31650,1865,31639,1866,31628,1864,31617,1859,31606,1863,31595,1861,31584,1865,31574,1874,31563,1883,31551,1870,31541,1878,31529,1868,31518,1871,31507,1866,31496,1867,31483,1852,31473,1860,31462,1865,31451,1862,31439,1855,31430,1869,31419,1874,31408,1873,31397,1875,31386,1873,31375,1875,31364,1876,31352,1865,31339,1851,31323,1794,31300,1680,31274,1529,31255,1446,31236,1375,31218,1305,31199,1231,31178,1139,31158,1057,31136,960,31115,868,31099,832,31084,798,31063,718,31015,380,30994,296,30978,260,30964,247,30950,228,30937,227,30925,226,30912,225,30900,223,30887,222,30875,226,30863,230,30851,233,30839,235,30827,238,30813,225,30802,234,30789,229,30776,228,30764,229,30752,229,30740,234,30727,233,30715,235,30702,230,30690,230,30679,240,30667,243,30653,238,30640,233,30628,233,30616,236,30603,236,30591,240,30578,235,30565,234,30553,238,30541,243,30528,242,30516,245,30503,243,30490,238,30479,253,30467,253,30453,245,30440,245,30428,248,30415,242,30403,246,30390,244,30379,254,30365,245,30354,257,30340,249,30328,252,30316,255,30303,251,30291,255,30278,256,30266,257,30253,256,30240,252,30228,256,30214,251,30202,254,30190,255,30179,265,30164,251,30151,250,30139,256,30127,255,30114,255,30103,262,30091,268,30077,258,30065,262,30053,265,30039,257,30026,260,30014,260,30002,267,29990,271,29977,263,29964,266,29952,265,29938,262,29927,266,29914,266,29902,273,29888,267,29876,268,29863,268,29850,269,29837,271,29826,280,29813,278,29800,279,29787,277,29774,280,29763,290,29748,276,29737,286,29723,280,29709,276,29696,276,29685,284,29671,281,29660,289,29647,290,29635,291,29620,284,29609,291,29596,293,29581,281,29569,284,29557,288,29543,287,29532,295,29521,305,29507,296,29493,295,29478,284,29468,295,29455,294,29443,300,29430,299,29415,291,29404,298,29389,292,29376,290,29365,298,29352,299,29340,304,29326,298,29314,300,29302,308,29289,305,29275,301,29263,304,29249,302]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.898658,-87.10134,-0.0506,9.26],\"visualizationValues\":{\"Max\":{\"x\":35.58,\"z\":7.459},\"Min\":{\"x\":-35.17,\"z\":11.04},\"values\":[-2.899,-87.1,-0.05063,9.261]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.898658,-87.10134,-0.0506,9.26],\"visualizationValues\":{\"Max\":{\"x\":35.58,\"z\":7.459},\"Min\":{\"x\":-35.17,\"z\":11.04},\"values\":[-2.899,-87.1,-0.05063,9.261]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1800,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "91525459.0f5c78",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":9668,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3254,632331],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,183,36306,178,36295,172,36281,178,36269,174,36255,178,36243,173,36231,167,36218,168,36204,173,36191,173,36178,171,36167,166,36154,165,36141,161,36126,173,36117,156,36102,162,36086,180,36075,168,36065,155,36049,173,36036,170,36025,160,36013,154,36000,155,35984,170,35973,164,35961,159,35947,162,35936,154,35923,153,35909,156,35896,155,35886,144,35871,154,35860,141,35845,156,35832,153,35818,157,35806,153,35795,146,35781,151,35769,145,35756,147,35744,139,35730,144,35716,150,35703,151,35690,151,35678,148,35664,154,35650,157,35638,150,35628,136,35616,132,35602,136,35588,145,35577,134,35564,134,35551,136,35539,132,35525,142,35510,154,35500,140,35485,152,35474,143,35464,126,35451,130,35437,139,35425,131,35414,123,35399,138,35386,137,35373,138,35360,146,35348,137,35336,132,35323,138,35311,130,35298,135,35284,144,35271,146,35259,143,35246,140,35234,137,35223,129,35210,130,35197,131,35184,132,35171,137,35157,145,35145,139,35132,141,35120,139,35107,140,35095,136,35082,142,35070,136,35057,139,35044,139,35031,143,35021,124,35007,128,34994,134,34981,138,34968,138,34956,137,34943,133,34929,143,34917,140,34905,134,34893,135,34881,124,34868,133,34855,131,34843,128,34829,142,34819,126,34805,138,34792,142,34780,140,34768,134,34755,141,34743,137,34730,137,34718,134,34705,140,34693,134,34681,134,34668,135,34653,153,34642,146,34629,146,34617,145,34605,145,34592,146,34580,144,34569,134,34556,139,34542,145,34530,145,34518,144,34505,145,34493,146,34480,147,34468,142,34456,136,34444,131,34431,143,34419,140,34406,142,34394,140,34382,133,34369,139,34357,133,34342,154,34275,735,34262,746,34251,731,34239,737,34223,785,34202,881,34181,984,34162,1066,34142,1157,34123,1251,34105,1323,34087,1396,34069,1484,34048,1594,34029,1685,34014,1734,34001,1755,33990,1756,33980,1743,33969,1740,33957,1748,33946,1754,33934,1762,33923,1768,33912,1766,33900,1778,33889,1773,33878,1767,33867,1775,33855,1775,33844,1778,33834,1763,33823,1767,33813,1752,33801,1760,33790,1753,33777,1779,33766,1783,33755,1779,33745,1772,33733,1771,33722,1779,33711,1769,33699,1788,33689,1776,33678,1763,33667,1768,33656,1770,33644,1784,33633,1787,33621,1797,33610,1788,33599,1790,33588,1787,33578,1769,33567,1773,33555,1785,33544,1778,33534,1769,33522,1784,33511,1777,33500,1781,33488,1785,33478,1782,33466,1784,33455,1784,33444,1784,33434,1771,33422,1782,33411,1784,33400,1786,33389,1778,33378,1776,33367,1780,33356,1784,33345,1783,33334,1794,33323,1794,33312,1785,33301,1794,33290,1785,33279,1780,33268,1782,33257,1785,33246,1779,33235,1781,33224,1785,33213,1792,33202,1793,33190,1797,33179,1800,33168,1794,33158,1792,33146,1792,33136,1788,33125,1787,33114,1785,33103,1788,33091,1790,33080,1792,33069,1802,33058,1794,33047,1803,33036,1801,33025,1802,33014,1799,33003,1800,32992,1787,32981,1787,32970,1797,32959,1791,32948,1794,32937,1804,32926,1814,32915,1812,32904,1824,32893,1822,32882,1810,32871,1810,32860,1807,32849,1800,32838,1800,32827,1802,32816,1797,32805,1802,32794,1806,32783,1815,32772,1823,32761,1814,32750,1818,32739,1807,32728,1805,32717,1811,32706,1806,32695,1816,32684,1810,32673,1807,32662,1804,32651,1820,32640,1819,32629,1824,32618,1820,32607,1823,32596,1820,32585,1811,32574,1814,32563,1817,32552,1809,32541,1812,32530,1804,32519,1809,32508,1813,32497,1818,32486,1829,32475,1836,32464,1834,32453,1835,32442,1825,32431,1814,32420,1816,32409,1810,32398,1810,32387,1813,32376,1816,32365,1827,32354,1828,32343,1830,32333,1837,32322,1835,32311,1834,32300,1833,32289,1837,32277,1829,32266,1823,32255,1823,32244,1829,32234,1832,32223,1837,32212,1835,32201,1843,32190,1841,32179,1833,32168,1833,32157,1832,32145,1828,32135,1829,32124,1833,32112,1826,32102,1829,32091,1837,32080,1840,32069,1843,32058,1846,32047,1842,32036,1843,32025,1842,32013,1832,32003,1836,31991,1830,31980,1828,31969,1834,31959,1845,31948,1843,31937,1847,31925,1841,31915,1850,31903,1846,31893,1851,31882,1852,31870,1848,31859,1848,31848,1842,31836,1832,31825,1834,31815,1842,31804,1847,31794,1856,31782,1851,31771,1854,31760,1856,31749,1859,31739,1862,31727,1853,31716,1850,31704,1841,31692,1833,31682,1841,31671,1850,31660,1851,31650,1858,31639,1858,31628,1856,31617,1856,31606,1859,31594,1855,31583,1853,31572,1853,31561,1854,31549,1845,31539,1851,31528,1857,31517,1856,31507,1864,31495,1863,31484,1864,31474,1866,31463,1868,31452,1868,31438,1843,31419,1751,31400,1660,31381,1568,31361,1480,31344,1413,31326,1345,31306,1254,31288,1188,31268,1102,31248,1011,31227,918,31209,855,31193,815,31179,794,31165,769,31113,375,31094,305,31075,238,31061,223,31048,218,31035,217,31022,212,31011,221,30999,224,30986,224,30974,219,30961,221,30949,222,30937,223,30924,223,30913,229,30900,226,30887,224,30875,223,30863,229,30851,235,30838,227,30825,223,30812,220,30801,232,30789,235,30776,226,30764,229,30753,240,30741,246,30728,238,30716,241,30703,235,30691,239,30679,246,30666,236,30652,228,30641,235,30629,244,30616,240,30604,240,30591,241,30580,252,30566,241,30555,252,30542,252,30530,252,30517,251,30503,242,30490,242,30478,247,30465,244,30453,247,30440,245,30429,256,30417,258,30405,264,30392,261,30380,263,30368,266,30355,268,30341,259,30330,267,30318,269,30305,267,30292,264,30278,258,30268,272,30255,271,30243,272,30230,271,30218,272,30204,265,30193,277,30180,277,30168,279,30156,278,30142,274,30129,271,30116,267,30105,280,30094,289,30080,282,30068,280,30056,284,30043,284,30031,286,30018,282,30005,282,29992,278,29980,282,29967,279,29954,278,29944,292,29930,285,29919,297,29905,290,29893,294,29880,291,29868,297,29855,296,29843,303,29828,293,29816,295,29803,297,29791,299,29778,302,29765,301,29752,300,29739,299,29728,307,29714,304,29702,309,29690,309,29676,304,29664,309,29650,307,29637,306,29625,309,29613,311,29601,318,29588,318,29574,313,29563,321,29550,319,29535,311,29524,317,29511,321,29499,324,29486,321,29473,324,29460,324,29447,323,29436,329,29422,326,29408,321,29398,335,29384,327,29371,330,29359,334,29345,326,29332,327,29320,329,29307,328,29294,330,29282,333,29269,335,29257,338]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.052334,-87.94767,-0.0358,9.18],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":7.906},\"Min\":{\"x\":-35.1,\"z\":10.44},\"values\":[-2.052,-87.95,-0.03584,9.179]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.052334,-87.94767,-0.0358,9.18],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":7.906},\"Min\":{\"x\":-35.1,\"z\":10.44},\"values\":[-2.052,-87.95,-0.03584,9.179]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1840,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "1da1fb9b.aaade4",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":22123,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3878,687719],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36326,146,36311,156,36297,160,36283,167,36271,160,36259,156,36245,161,36235,145,36221,151,36209,148,36194,155,36181,158,36169,155,36155,156,36142,159,36128,162,36117,151,36103,160,36094,140,36080,142,36067,145,36054,145,36042,139,36027,150,36015,146,36001,151,35989,143,35977,142,35964,142,35950,147,35937,146,35925,142,35912,141,35897,151,35885,149,35870,159,35857,157,35847,142,35834,144,35820,148,35808,144,35794,148,35783,136,35771,136,35760,123,35744,138,35731,141,35716,149,35706,134,35694,130,35680,136,35666,138,35654,137,35641,133,35627,139,35614,143,35602,134,35589,137,35577,137,35563,141,35551,141,35538,137,35526,135,35511,148,35500,141,35487,145,35475,136,35462,142,35449,142,35435,147,35425,130,35412,137,35399,139,35384,149,35373,142,35361,138,35348,140,35335,139,35321,147,35311,130,35297,140,35283,151,35270,150,35259,141,35246,143,35234,135,35223,127,35209,133,35197,131,35183,142,35170,140,35160,127,35145,138,35133,139,35120,140,35107,138,35094,141,35082,141,35069,140,35057,136,35044,141,35032,133,35018,140,35004,152,34993,139,34980,143,34968,141,34955,140,34942,144,34930,138,34917,142,34903,148,34888,167,34876,168,34788,768,34773,787,34755,842,34730,942,34704,1063,34679,1174,34651,1304,34623,1445,34591,1613,34561,1776,34544,1822,34533,1821,34522,1819,34512,1811,34501,1801,34489,1809,34478,1810,34466,1813,34455,1815,34442,1826,34432,1816,34423,1803,34411,1807,34400,1808,34387,1824,34377,1810,34365,1810,34354,1809,34343,1813,34331,1815,34320,1811,34309,1813,34297,1825,34286,1816,34274,1824,34264,1809,34253,1816,34241,1816,34230,1818,34219,1812,34208,1808,34197,1811,34186,1809,34173,1824,34162,1824,34150,1834,34139,1829,34129,1820,34118,1826,34107,1819,34097,1813,34086,1808,34076,1795,34065,1795,34053,1802,34042,1804,34030,1816,34018,1824,34007,1827,33996,1818,33985,1819,33974,1826,33963,1820,33952,1822,33941,1823,33930,1823,33919,1813,33907,1822,33896,1824,33886,1819,33875,1810,33862,1837,33852,1824,33841,1827,33830,1827,33818,1828,33808,1816,33797,1824,33785,1828,33774,1834,33764,1818,33753,1816,33741,1820,33729,1841,33718,1834,33706,1850,33696,1846,33685,1832,33674,1831,33664,1827,33653,1814,33642,1808,33631,1816,33620,1817,33609,1821,33597,1831,33586,1835,33575,1828,33563,1838,33553,1834,33541,1841,33531,1824,33520,1819,33509,1822,33498,1820,33486,1830,33475,1830,33464,1839,33453,1833,33442,1835,33431,1847,33420,1841,33409,1845,33398,1846,33387,1832,33377,1823,33366,1818,33355,1818,33343,1840,33332,1839,33321,1832,33310,1841,33299,1843,33288,1853,33277,1846,33266,1847,33255,1847,33244,1845,33233,1849,33222,1835,33211,1834,33200,1832,33189,1842,33178,1833,33167,1833,33156,1836,33145,1844,33134,1848,33123,1846,33112,1852,33101,1849,33090,1853,33079,1848,33068,1846,33057,1842,33046,1843,33036,1839,33024,1849,33013,1850,33002,1849,32991,1859,32980,1858,32969,1856,32958,1852,32948,1851,32937,1846,32926,1847,32915,1846,32904,1855,32893,1854,32882,1860,32871,1853,32860,1857,32849,1862,32838,1858,32827,1860,32816,1857,32805,1857,32794,1856,32783,1859,32772,1848,32761,1850,32750,1846,32739,1863,32728,1861,32717,1859,32706,1860,32695,1857,32684,1860,32673,1861,32662,1869,32651,1861,32640,1846,32629,1854,32618,1853,32607,1853,32597,1858,32586,1870,32575,1866,32564,1869,32553,1868,32542,1864,32531,1865,32520,1875,32509,1865,32498,1859,32487,1860,32476,1859,32465,1853,32454,1848,32443,1864,32432,1867,32421,1867,32410,1861,32399,1865,32388,1868,32378,1875,32367,1877,32355,1853,32344,1853,32333,1860,32322,1864,32312,1869,32301,1876,32290,1867,32279,1875,32268,1877,32257,1876,32246,1884,32235,1881,32224,1868,32213,1865,32202,1862,32191,1871,32180,1861,32169,1875,32158,1873,32148,1888,32137,1885,32125,1869,32115,1878,32104,1882,32093,1877,32081,1869,32070,1864,32059,1857,32048,1860,32037,1872,32026,1871,32016,1877,32005,1884,31994,1887,31983,1878,31970,1856,31952,1721,31935,1612,31921,1562,31905,1480,31891,1425,31877,1384,31863,1329,31847,1257,31833,1212,31818,1155,31803,1105,31787,1033,31773,982,31757,916,31742,866,31729,842,31715,809,31700,761,31662,388,31644,292,31629,253,31615,232,31603,234,31591,236,31578,228,31566,227,31555,240,31543,243,31530,233,31518,240,31506,245,31494,244,31482,242,31469,242,31458,247,31445,242,31433,241,31421,251,31409,246,31397,255,31384,249,31372,246,31360,244,31347,244,31335,244,31323,251,31311,252,31299,257,31286,247,31274,254,31261,252,31249,248,31236,250,31225,254,31212,255,31200,255,31188,259,31175,258,31163,255,31150,251,31138,258,31126,255,31114,259,31102,262,31090,265,31077,260,31064,260,31052,263,31040,264,31028,264,31015,264,31003,263,30991,265,30977,255,30966,267,30954,267,30941,264,30929,267,30917,270,30905,269,30893,275,30880,270,30867,264,30855,264,30842,264,30830,264,30818,268,30805,261,30794,270,30782,273,30769,270,30757,270,30745,273,30732,274,30720,271,30708,277,30696,277,30683,273,30670,273,30659,281,30646,274,30634,277,30621,278,30608,275,30595,270,30583,273,30570,272,30557,270,30545,271,30532,272,30519,269,30507,272,30495,272,30483,279,30469,271,30456,267,30445,277,30432,272,30420,276,30407,274,30393,269,30381,271,30369,275,30357,277,30344,277,30332,281,30320,285,30308,288,30294,281,30282,281,30269,279,30257,283,30244,278,30231,275,30218,277,30207,285,30194,282,30181,279,30168,275,30156,281,30142,274,30131,283,30118,280,30104,272,30093,281,30081,282,30067,276,30056,286,30042,276,30029,273,30017,279,30004,275,29992,277,29979,279,29967,280,29955,284,29941,278,29929,281,29917,282,29904,281,29890,276,29878,284,29866,288,29854,290,29840,288,29827,285,29815,291,29802,288,29789,287,29775,282,29763,287,29752,298,29738,294,29723,283,29712,292,29701,299,29686,288,29674,295,29661,292,29648,296,29635,292,29622,292,29610,295,29596,292,29585,300,29573,305,29560,304,29545,295,29533,300,29520,298,29506,295,29495,301,29483,308,29470,306,29457,307,29444,308,29430,300,29415,293,29404,299,29392,303,29379,305,29366,303,29354,309,29340,303,29330,317,29316,311,29302,306,29289,308,29275,302,29265,315,29252,312]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.398907,86.60109,0.0594,9.38],\"visualizationValues\":{\"Max\":{\"x\":35.6,\"z\":11.5},\"Min\":{\"x\":-35.15,\"z\":7.297},\"values\":[3.399,86.6,0.05939,9.384]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[3.398907,86.60109,0.0594,9.38],\"visualizationValues\":{\"Max\":{\"x\":35.6,\"z\":11.5},\"Min\":{\"x\":-35.15,\"z\":7.297},\"values\":[3.399,86.6,0.05939,9.384]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1880,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "2f7c2c1b.8d2474",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":22874,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3917,11761],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,131,36314,143,36302,136,36289,137,36277,132,36263,138,36252,129,36237,138,36222,149,36211,139,36198,140,36185,137,36172,138,36161,129,36146,137,36136,124,36122,128,36108,136,36096,127,36084,121,36070,128,36056,134,36043,133,36031,131,36018,128,36006,124,35994,121,35980,123,35968,120,35954,125,35940,130,35929,122,35916,122,35903,119,35890,121,35877,123,35861,136,35850,128,35838,123,35825,120,35813,115,35800,115,35785,126,35772,125,35758,134,35746,128,35734,123,35721,120,35708,121,35696,118,35684,111,35671,110,35657,115,35643,121,35631,118,35619,113,35608,102,35595,103,35581,112,35566,123,35554,123,35540,125,35527,132,35515,125,35503,121,35492,109,35479,112,35466,117,35453,116,35441,109,35426,125,35415,114,35404,104,35389,120,35377,118,35267,739,35256,734,35241,752,35228,753,35192,909,35153,1087,35131,1152,35025,1782,35009,1809,34998,1806,34988,1796,34977,1792,34968,1778,34957,1777,34948,1759,34936,1761,34923,1773,34911,1775,34899,1782,34885,1796,34874,1798,34863,1796,34851,1798,34839,1806,34829,1798,34817,1800,34806,1799,34795,1797,34784,1790,34774,1781,34762,1792,34749,1805,34739,1793,34729,1781,34717,1792,34704,1798,34693,1800,34681,1802,34671,1794,34660,1793,34649,1793,34638,1787,34628,1782,34617,1780,34604,1793,34592,1795,34580,1799,34569,1801,34558,1802,34546,1808,34534,1812,34523,1807,34513,1795,34504,1781,34491,1792,34479,1798,34468,1800,34456,1803,34446,1796,34434,1797,34423,1798,34410,1810,34399,1815,34389,1800,34377,1807,34366,1802,34356,1793,34344,1806,34332,1810,34322,1801,34310,1801,34300,1795,34287,1804,34276,1805,34265,1807,34253,1810,34242,1811,34232,1798,34220,1807,34209,1803,34197,1811,34186,1812,34175,1808,34163,1817,34152,1812,34142,1804,34130,1808,34118,1817,34107,1821,34096,1823,34086,1813,34076,1800,34064,1806,34053,1804,34043,1793,34032,1794,34021,1791,34010,1787,33998,1802,33986,1811,33975,1808,33963,1819,33952,1815,33941,1817,33930,1812,33919,1812,33908,1815,33898,1796,33887,1803,33875,1814,33864,1813,33852,1817,33842,1809,33831,1811,33819,1816,33808,1815,33797,1814,33787,1804,33776,1805,33764,1810,33753,1811,33742,1811,33730,1819,33719,1818,33708,1825,33697,1821,33686,1816,33676,1810,33665,1806,33653,1815,33642,1825,33631,1817,33620,1816,33608,1825,33597,1828,33586,1824,33575,1823,33564,1825,33553,1817,33542,1824,33531,1819,33520,1818,33509,1819,33498,1820,33487,1821,33476,1821,33465,1819,33453,1828,33442,1828,33431,1840,33420,1835,33409,1829,33398,1827,33387,1830,33377,1818,33366,1809,33355,1813,33344,1820,33332,1828,33321,1827,33311,1827,33299,1831,33288,1836,33278,1821,33266,1833,33255,1832,33245,1822,33234,1824,33223,1818,33212,1807,33201,1822,33190,1828,33179,1830,33167,1831,33156,1840,33145,1834,33134,1837,33123,1836,33112,1844,33101,1837,33091,1823,33080,1817,33069,1823,33058,1825,33047,1833,33036,1833,33025,1837,33014,1832,33003,1843,32992,1843,32981,1829,32970,1836,32959,1841,32948,1834,32937,1832,32926,1833,32915,1823,32904,1833,32893,1837,32882,1841,32871,1837,32860,1839,32849,1846,32838,1848,32827,1844,32816,1837,32805,1834,32794,1829,32783,1835,32772,1824,32761,1830,32750,1836,32739,1841,32728,1838,32717,1842,32706,1852,32695,1858,32684,1852,32673,1838,32662,1843,32651,1842,32640,1844,32629,1846,32618,1850,32607,1853,32596,1848,32585,1846,32574,1849,32564,1856,32553,1849,32542,1852,32531,1850,32520,1845,32509,1849,32497,1840,32487,1841,32476,1848,32465,1853,32454,1855,32443,1848,32431,1809,32418,1703,32405,1644,32392,1580,32380,1521,32367,1463,32355,1424,32342,1373,32329,1323,32317,1269,32304,1229,32291,1179,32278,1120,32265,1080,32252,1024,32239,977,32225,913,32211,856,32199,828,32186,800,32173,759,32158,692,32135,401,32118,276,32104,242,32091,217,32079,214,32067,211,32055,215,32042,211,32029,196,32018,207,32005,203,31993,207,31981,210,31969,214,31956,204,31944,206,31932,211,31920,217,31908,217,31896,215,31883,213,31871,212,31859,218,31847,214,31835,218,31822,217,31810,218,31798,218,31786,215,31773,215,31761,220,31750,227,31737,229,31725,222,31713,222,31701,229,31688,224,31676,230,31664,232,31653,242,31640,236,31628,235,31615,224,31603,236,31591,229,31579,231,31567,234,31555,241,31543,243,31530,240,31519,246,31506,247,31494,243,31481,240,31470,243,31457,244,31446,251,31433,252,31421,245,31408,244,31396,244,31384,244,31371,236,31360,249,31348,256,31336,258,31324,256,31311,254,31299,256,31287,259,31275,262,31262,257,31249,248,31237,252,31225,257,31213,260,31200,257,31188,264,31176,264,31164,268,31151,257,31139,268,31127,266,31114,266,31103,272,31091,273,31078,274,31066,277,31054,276,31041,275,31029,275,31017,277,31004,270,30991,265,30978,262,30967,272,30955,275,30942,272,30930,272,30917,271,30906,278,30893,275,30881,277,30869,278,30856,277,30844,277,30832,278,30820,280,30807,278,30794,277,30782,279,30770,280,30758,279,30745,279,30733,281,30721,283,30708,282,30696,282,30684,283,30671,280,30659,279,30647,282,30634,280,30622,282,30609,283,30596,279,30584,283,30571,283,30559,283,30546,282,30534,281,30521,283,30509,288,30496,284,30484,289,30471,285,30458,283,30447,290,30434,286,30421,288,30408,286,30396,289,30383,286,30370,283,30359,290,30346,288,30333,289,30321,288,30308,290,30295,286,30283,292,30271,294,30259,297,30244,282,30234,294,30221,295,30209,296,30195,291,30182,287,30170,288,30158,292,30145,294,30133,293,30120,294,30108,298,30096,301,30082,294,30070,295,30058,298,30046,304,30034,303,30019,293,30007,297,29994,294,29982,297,29971,302,29958,301,29943,291,29932,296,29917,284,29906,295,29894,303,29880,294,29867,293,29854,293,29841,293,29828,293,29815,290,29804,303,29792,303,29778,302,29767,308,29753,304,29740,302,29727,304,29714,304,29700,295,29688,298,29675,299,29662,302,29650,306,29636,299,29622,295,29609,293,29599,306,29586,307,29570,293,29561,310,29548,309,29535,308,29521,301,29509,308,29494,298,29484,313,29467,293,29456,300,29444,306,29431,308,29419,310,29406,310,29393,308,29381,314,29368,312,29354,306,29340,302,29327,302,29314,303,29303,309,29289,307,29277,312,29266,317,29252,313]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[7.941637,82.05836,0.14,9.33],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":14.3},\"Min\":{\"x\":-35.15,\"z\":4.429},\"values\":[7.942,82.06,0.1395,9.332]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[7.941637,82.05836,0.14,9.33],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":14.3},\"Min\":{\"x\":-35.15,\"z\":4.429},\"values\":[7.942,82.06,0.1395,9.332]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1920,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "5d1b5fd.df186a",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 8",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":23285,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3937,404744],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36320,177,36307,176,36296,168,36283,167,36270,165,36259,159,36244,168,36231,165,36218,168,36204,174,36192,168,36178,175,36166,168,36153,171,36141,166,36128,163,36114,168,36102,162,36089,165,36077,161,36061,175,36049,173,36035,173,36024,163,36010,169,35996,175,35982,181,35970,179,35958,170,35946,166,35933,168,35919,172,35907,166,35893,172,35880,173,35867,176,35855,170,35841,175,35828,176,35814,184,35801,180,35787,187,35776,175,35765,168,35751,175,35740,163,35725,173,35713,167,35699,171,35687,166,35675,164,35660,175,35648,172,35636,162,35623,167,35608,174,35597,167,35584,168,35571,169,35559,168,35546,169,35533,171,35520,173,35509,165,35494,178,35481,179,35470,171,35457,168,35445,168,35432,171,35419,170,35406,174,35392,180,35379,182,35367,182,35354,179,35342,180,35328,185,35315,186,35305,174,35292,176,35279,174,35267,172,35254,176,35243,165,35230,166,35217,171,35203,178,35191,169,35177,179,35167,166,35153,176,35139,179,35127,180,35114,181,35104,165,35090,174,35078,170,35066,163,35054,157,35040,170,35026,179,35014,170,35000,182,34988,178,34975,179,34963,177,34951,173,34938,175,34926,165,34914,166,34901,170,34888,170,34875,169,34863,169,34852,159,34839,164,34826,165,34813,170,34801,171,34788,169,34776,168,34764,167,34751,166,34739,169,34724,183,34713,174,34701,171,34688,180,34675,178,34664,167,34653,158,34640,158,34626,176,34614,169,34603,160,34590,166,34577,173,34564,173,34552,168,34540,164,34527,170,34514,173,34503,167,34491,160,34477,170,34465,172,34453,170,34441,162,34428,168,34415,171,34404,164,34391,168,34379,161,34368,149,34354,167,34341,164,34329,161,34318,154,34303,171,34292,165,34280,157,34268,155,34255,158,34242,165,34229,167,34217,161,34206,150,34192,164,34180,158,34168,157,34155,162,34143,158,34131,158,34119,154,34106,163,34094,165,34082,160,34070,158,34058,155,34045,163,34033,161,34021,155,34008,162,33996,162,33984,157,33972,157,33959,161,33946,165,33934,160,33922,162,33910,156,33898,159,33885,159,33874,153,33861,159,33849,148,33837,151,33825,148,33813,144,33800,152,33788,150,33775,151,33763,157,33750,158,33738,156,33726,155,33714,150,33701,156,33689,150,33677,153,33665,153,33653,151,33640,158,33628,155,33615,156,33603,151,33591,153,33579,151,33567,138,33554,156,33542,150,33530,154,33517,154,33505,152,33493,152,33480,153,33468,150,33456,154,33444,153,33431,156,33419,151,33407,150,33395,143,33383,149,33371,150,33358,152,33346,152,33334,152,33322,152,33309,151,33297,155,33285,164,33273,157,33261,152,33248,162,33236,161,33221,261,33212,157,33185,715,33173,717,33161,727,33150,733,33137,749,33125,766,33113,809,33100,868,33087,933,33074,982,33061,1042,33049,1092,33036,1158,33024,1205,33012,1263,33000,1301,32988,1347,32976,1395,32963,1466,32952,1511,32940,1563,32928,1618,32916,1715,32904,1813,32893,1830,32882,1827,32871,1826,32860,1828,32849,1831,32838,1820,32827,1821,32816,1823,32805,1824,32794,1809,32783,1815,32772,1816,32761,1816,32750,1824,32739,1823,32728,1836,32717,1830,32706,1832,32695,1828,32684,1832,32673,1831,32662,1838,32651,1836,32640,1822,32629,1829,32618,1828,32607,1835,32596,1835,32585,1840,32574,1841,32563,1833,32552,1828,32541,1830,32530,1833,32519,1835,32508,1832,32497,1831,32486,1829,32475,1829,32464,1832,32453,1832,32443,1838,32431,1836,32421,1849,32410,1845,32399,1840,32388,1840,32376,1833,32366,1835,32354,1833,32343,1832,32332,1832,32322,1833,32311,1835,32300,1838,32289,1836,32278,1835,32267,1841,32256,1843,32245,1841,32234,1844,32223,1842,32211,1823,32200,1825,32190,1832,32179,1842,32168,1846,32157,1840,32146,1840,32135,1844,32124,1847,32113,1844,32102,1839,32091,1830,32080,1834,32069,1832,32058,1832,32047,1838,32036,1846,32025,1845,32014,1847,32003,1847,31992,1847,31981,1847,31969,1839,31959,1843,31947,1839,31936,1836,31925,1837,31914,1842,31903,1841,31893,1861,31882,1859,31871,1865,31860,1865,31849,1857,31838,1853,31827,1854,31815,1850,31804,1851,31793,1853,31782,1848,31770,1838,31760,1849,31749,1855,31738,1852,31727,1856,31716,1860,31705,1855,31694,1858,31683,1854,31671,1848,31660,1849,31649,1845,31638,1848,31627,1848,31616,1849,31606,1858,31595,1863,31584,1869,31573,1863,31562,1861,31550,1851,31539,1860,31528,1855,31517,1852,31505,1847,31494,1849,31484,1857,31474,1867,31463,1870,31452,1876,31441,1875,31430,1872,31419,1873,31407,1868,31396,1861,31385,1865,31373,1859,31362,1852,31350,1843,31340,1860,31330,1867,31318,1867,31307,1861,31297,1877,31286,1879,31274,1870,31263,1873,31251,1867,31239,1863,31228,1862,31217,1859,31205,1854,31194,1855,31183,1861,31173,1871,31163,1881,31151,1877,31140,1881,31129,1875,31117,1872,31106,1871,31094,1866,31082,1862,31071,1865,31060,1867,31050,1874,31039,1878,31029,1887,31019,1894,31006,1883,30995,1888,30984,1888,30972,1880,30961,1879,30948,1869,30935,1849,30924,1856,30915,1871,30904,1878,30894,1885,30883,1885,30872,1888,30860,1882,30849,1880,30837,1879,30827,1885,30815,1882,30804,1878,30792,1874,30781,1876,30771,1884,30760,1888,30749,1892,30737,1886,30727,1891,30714,1882,30704,1889,30693,1890,30681,1882,30667,1866,30655,1863,30644,1863,30634,1871,30623,1877,30613,1888,30603,1895,30592,1896,30579,1884,30568,1891,30557,1892,30544,1884,30533,1887,30521,1883,30511,1889,30498,1885,30487,1886,30479,1906,30467,1901,30454,1894,30443,1894,30433,1907,30420,1898,30409,1899,30397,1894,30386,1897,30373,1888,30360,1877,30349,1879,30337,1878,30324,1866,30301,1796,30206,1288,30180,1200,30145,1061,30112,935,30088,866,30075,859,30061,848,29948,246,29937,252,29925,256,29911,251,29898,251,29886,257,29874,258,29861,262,29847,254,29834,254,29822,257,29810,260,29796,255,29782,253,29771,259,29758,262,29745,259,29733,264,29719,261,29708,271,29695,267,29682,268,29670,272,29657,274,29643,268,29631,272,29619,275,29606,276,29592,274,29579,270,29567,273,29555,279,29542,278,29529,280,29515,273,29505,289,29492,288,29478,281,29465,282,29453,287,29441,289,29428,289,29414,284,29400,282,29387,282,29374,281,29362,284,29349,282,29336,282,29323,285,29311,285,29300,294,29286,293,29273,291,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-12.92714,-77.07286,-0.23,9.35],\"visualizationValues\":{\"Max\":{\"x\":35.54,\"z\":1.192},\"Min\":{\"x\":-35.18,\"z\":17.42},\"values\":[-12.93,-77.07,-0.2295,9.35]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-12.92714,-77.07286,-0.23,9.35],\"visualizationValues\":{\"Max\":{\"x\":35.54,\"z\":1.192},\"Min\":{\"x\":-35.18,\"z\":17.42},\"values\":[-12.93,-77.07,-0.2295,9.35]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 1960,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "ab1f2a3.1986fd8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grande 9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grande 9",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":24430,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3994,594651],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36329,130,36317,125,36303,129,36292,122,36280,118,36265,129,36249,141,36236,143,36225,131,36212,130,36201,123,36187,128,36173,133,36161,127,36148,127,36134,135,36122,127,36111,117,36097,122,36083,127,36069,136,36056,131,36042,139,36030,136,36018,129,36007,121,35992,129,35979,130,35966,131,35951,139,35940,129,35926,133,35914,129,35902,126,35886,139,35876,128,35864,122,35852,114,35837,124,35822,139,35811,129,35799,122,35784,130,35773,120,35760,120,35745,134,35734,121,35719,132,35706,134,35694,128,35682,124,35669,123,35655,128,35641,134,35629,131,35615,137,35603,128,35591,127,35578,130,35564,135,35552,132,35539,134,35526,135,35513,137,35503,118,35490,125,35477,127,35465,121,35452,122,35438,132,35423,147,35412,137,35400,129,35388,125,35375,127,35361,134,35349,131,35335,139,35324,131,35310,136,35298,136,35288,116,35273,134,35260,132,35247,134,35235,133,35223,128,35212,115,35197,129,35186,123,35173,126,35159,131,35147,129,35133,139,35121,133,35109,129,35096,126,35083,130,35071,127,35058,126,35045,130,35032,132,35019,135,35007,134,34994,134,34981,137,34969,131,34955,138,34943,138,34930,142,34916,148,34904,141,34892,141,34879,143,34866,145,34854,139,34842,138,34831,128,34817,136,34804,144,34792,138,34781,127,34767,138,34755,141,34742,140,34730,141,34718,135,34704,144,34692,142,34681,128,34668,133,34656,136,34642,142,34630,144,34617,142,34605,145,34592,145,34579,151,34568,136,34555,142,34544,134,34530,142,34519,135,34507,132,34494,131,34480,143,34468,144,34455,145,34443,142,34430,146,34418,144,34405,147,34394,140,34381,138,34368,146,34356,141,34344,138,34331,142,34319,140,34306,149,34294,146,34282,141,34268,151,34256,146,34247,117,34177,757,34164,766,34151,781,34139,787,34124,819,34104,920,34083,1034,34067,1086,34049,1173,34032,1239,34014,1322,33997,1393,33978,1483,33957,1609,33937,1720,33920,1799,33908,1813,33897,1810,33886,1807,33875,1813,33864,1808,33853,1812,33842,1813,33831,1809,33819,1825,33808,1823,33797,1818,33786,1823,33775,1822,33763,1827,33752,1832,33742,1819,33731,1815,33720,1810,33709,1815,33697,1821,33686,1822,33675,1820,33665,1810,33653,1824,33642,1813,33630,1832,33619,1832,33608,1831,33597,1822,33587,1811,33575,1819,33564,1820,33553,1822,33542,1821,33531,1825,33520,1817,33509,1811,33498,1825,33487,1825,33476,1811,33465,1824,33454,1825,33443,1821,33432,1822,33421,1816,33410,1814,33399,1813,33388,1815,33376,1830,33365,1840,33354,1836,33343,1833,33332,1834,33321,1836,33311,1825,33300,1819,33289,1812,33278,1816,33267,1825,33255,1829,33245,1828,33233,1830,33222,1830,33212,1827,33201,1827,33190,1827,33178,1831,33168,1826,33156,1833,33145,1838,33135,1828,33124,1824,33113,1829,33101,1837,33090,1837,33080,1826,33069,1836,33058,1836,33047,1835,33036,1822,33025,1835,33014,1836,33003,1839,32992,1832,32981,1832,32970,1840,32959,1837,32948,1834,32937,1831,32926,1841,32915,1845,32904,1836,32893,1842,32882,1831,32871,1832,32860,1834,32849,1830,32838,1831,32827,1836,32816,1845,32805,1842,32794,1848,32783,1846,32772,1845,32761,1846,32750,1842,32739,1839,32728,1839,32717,1834,32706,1831,32695,1831,32684,1838,32673,1850,32662,1845,32651,1846,32640,1847,32629,1841,32618,1839,32607,1838,32596,1840,32585,1841,32574,1842,32563,1844,32552,1845,32542,1847,32530,1844,32520,1848,32509,1847,32498,1849,32487,1848,32476,1849,32465,1843,32454,1846,32443,1839,32432,1840,32421,1836,32409,1833,32399,1846,32388,1846,32377,1851,32366,1857,32355,1852,32344,1843,32333,1851,32322,1845,32311,1840,32300,1843,32289,1842,32278,1841,32267,1838,32256,1840,32246,1861,32235,1859,32224,1866,32213,1864,32202,1859,32191,1857,32179,1854,32168,1846,32157,1842,32146,1843,32135,1847,32124,1840,32114,1854,32103,1856,32092,1862,32081,1865,32070,1869,32059,1861,32048,1859,32036,1851,32025,1845,32014,1843,32003,1837,31992,1843,31981,1846,31970,1853,31959,1853,31948,1854,31937,1853,31926,1858,31915,1857,31904,1854,31893,1853,31882,1857,31870,1848,31859,1847,31848,1849,31837,1850,31827,1854,31816,1865,31805,1865,31795,1874,31784,1880,31772,1869,31761,1871,31750,1860,31739,1872,31729,1877,31717,1873,31706,1868,31695,1864,31683,1856,31672,1864,31661,1866,31651,1873,31640,1870,31628,1866,31618,1870,31607,1873,31595,1861,31583,1858,31573,1863,31562,1865,31551,1872,31540,1866,31529,1873,31518,1873,31507,1874,31497,1881,31486,1877,31474,1875,31463,1872,31452,1869,31441,1877,31430,1870,31418,1869,31408,1871,31397,1876,31386,1874,31375,1874,31365,1885,31354,1887,31342,1880,31331,1879,31318,1867,31272,1504,31253,1427,31235,1357,31215,1271,31196,1204,31178,1142,31158,1063,31137,964,31116,874,31100,839,31086,819,31073,810,30999,228,30987,231,30974,224,30962,224,30949,222,30937,223,30925,226,30912,227,30900,228,30887,226,30875,224,30863,228,30851,229,30838,229,30826,227,30813,225,30801,227,30790,237,30777,236,30765,235,30752,232,30738,222,30727,232,30714,229,30703,237,30690,230,30677,227,30664,224,30653,231,30640,230,30627,223,30615,231,30603,239,30590,231,30578,238,30565,236,30554,246,30540,239,30528,240,30515,240,30503,241,30490,242,30478,245,30466,247,30453,242,30440,239,30427,239,30415,243,30403,251,30390,246,30377,244,30365,249,30353,250,30340,249,30327,245,30315,249,30302,249,30290,248,30277,249,30265,254,30252,251,30240,255,30228,260,30215,258,30204,263,30190,254,30178,263,30164,251,30152,254,30139,252,30126,253,30114,257,30101,252,30089,259,30078,264,30063,254,30052,264,30041,271,30028,268,30015,269,30002,266,29989,261,29977,263,29964,264,29952,266,29939,263,29926,261,29913,264,29901,264,29887,262,29875,265,29862,266,29852,278,29838,278,29824,270,29810,264,29796,259,29786,275,29773,270,29761,277,29746,266,29734,271,29722,278,29710,282,29696,274,29684,280,29670,274,29657,273,29644,273,29631,270,29619,279,29606,277,29594,282,29580,278,29568,282,29558,294,29545,294,29531,290,29516,280,29504,286,29493,293,29481,297,29464,278,29454,292,29441,290,29428,291,29416,296,29404,300,29392,304,29379,305,29365,298,29350,286,29339,297,29324,289,29312,291,29301,300,29286,292,29274,296,29263,304,29249,300]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.949321,-87.05068,-0.0515,9.24],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":7.402},\"Min\":{\"x\":-35.18,\"z\":11.05},\"values\":[-2.949,-87.05,-0.05152,9.237]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.949321,-87.05068,-0.0515,9.24],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":7.402},\"Min\":{\"x\":-35.18,\"z\":11.05},\"values\":[-2.949,-87.05,-0.05152,9.237]}}]}]}",
        "payloadType": "json",
        "x": 440,
        "y": 2000,
        "wires": [
            [
                "a6fa2047.af003"
            ]
        ]
    },
    {
        "id": "e731f9de.515098",
        "type": "link in",
        "z": "50e3bf45.5484a",
        "name": "DATI RAW",
        "links": [
            "6851b311.70a7ec",
            "a6fa2047.af003",
            "4b46381a.ab2708",
            "d8c21e15.50b55"
        ],
        "x": 275,
        "y": 1540,
        "wires": [
            [
                "6e3509cd.285a28"
            ]
        ]
    },
    {
        "id": "6851b311.70a7ec",
        "type": "link out",
        "z": "50e3bf45.5484a",
        "name": "",
        "links": [
            "e731f9de.515098"
        ],
        "x": 855,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5449588d.017498",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":11857,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3360,121352],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36322,167,36307,173,36295,170,36281,178,36267,179,36256,171,36241,181,36229,176,36217,174,36202,185,36190,176,36175,189,36165,172,36151,180,36138,181,36126,175,36113,174,36101,171,36087,173,36074,177,36061,175,36049,172,36035,177,36020,185,36009,178,35997,172,35982,184,35968,186,35957,180,35943,185,35929,188,35916,187,35906,174,35890,188,35877,188,35866,180,35852,183,35841,175,35827,179,35813,187,35800,189,35787,188,35775,185,35761,188,35748,188,35736,186,35723,182,35712,176,35697,185,35684,183,35671,186,35658,184,35644,191,35631,192,35619,189,35606,188,35595,177,35581,186,35569,181,35555,192,35543,188,35528,199,35518,183,35504,190,35493,182,35478,195,35466,194,35452,199,35441,194,35428,192,35417,186,35403,189,35392,183,35377,197,35363,204,35352,192,35342,176,35328,190,35314,194,35301,195,35290,187,35278,180,35264,190,35252,185,35239,191,35225,198,35212,200,35199,202,35188,193,35175,193,35163,194,35150,196,35136,205,35125,195,35111,203,35100,192,35088,188,35075,191,35062,188,35049,191,35036,192,35023,195,35011,193,34999,191,34985,201,34973,192,34960,198,34946,207,34934,204,34921,204,34909,205,34896,204,34884,200,34871,201,34859,203,34846,208,34833,208,34820,212,34809,205,34797,199,34785,193,34772,202,34758,212,34746,211,34735,203,34723,197,34710,205,34697,204,34685,199,34672,207,34659,209,34647,206,34634,214,34622,215,34611,198,34598,205,34586,199,34573,201,34560,207,34549,198,34537,196,34524,204,34510,212,34499,201,34487,201,34474,199,34462,198,34449,206,34436,213,34424,203,34412,207,34400,198,34387,204,34375,203,34363,202,34349,213,34336,217,34325,207,34312,214,34300,204,34287,213,34276,203,34264,200,34251,201,34238,207,34226,209,34213,214,34201,210,34188,214,34176,215,34163,213,34151,210,34140,203,34127,212,34115,208,34102,214,34091,201,34078,205,34066,202,34054,202,34041,205,34028,215,34016,218,34004,212,33992,209,33980,205,33968,206,33955,213,33943,214,33931,214,33918,215,33906,215,33894,217,33882,208,33869,215,33857,217,33845,216,33833,216,33820,213,33808,209,33796,211,33784,215,33771,216,33759,223,33747,221,33734,218,33722,224,33710,223,33698,218,33686,215,33673,219,33661,223,33649,217,33637,217,33624,222,33612,219,33600,216,33588,221,33575,226,33563,226,33551,220,33538,226,33526,222,33514,218,33502,217,33490,220,33477,226,33465,221,33453,218,33441,228,33428,230,33416,224,33404,226,33392,232,33380,235,33368,225,33356,217,33343,226,33331,230,33319,225,33307,229,33295,235,33283,228,33270,240,33258,233,33246,244,33234,242,33221,240,33209,236,33197,228,33185,237,33173,234,33161,224,33149,229,33136,240,33125,227,33112,228,33100,227,33088,231,33076,237,33064,239,33052,227,33039,228,33027,247,33015,266,33003,256,32991,249,32974,646,32962,689,32949,725,32937,756,32925,798,32913,834,32901,868,32889,901,32877,952,32865,974,32853,1016,32842,1037,32830,1072,32818,1107,32807,1147,32795,1185,32784,1213,32772,1241,32761,1281,32750,1319,32738,1354,32727,1380,32716,1381,32704,1383,32693,1382,32682,1386,32671,1388,32659,1391,32648,1394,32637,1393,32625,1383,32614,1391,32603,1391,32591,1395,32580,1384,32569,1374,32557,1371,32546,1385,32535,1385,32523,1380,32512,1383,32501,1388,32489,1380,32478,1380,32467,1385,32456,1385,32444,1389,32433,1396,32422,1393,32411,1398,32399,1400,32388,1397,32377,1395,32365,1390,32354,1383,32343,1391,32331,1390,32320,1390,32309,1387,32297,1389,32286,1388,32275,1397,32264,1400,32252,1391,32241,1389,32230,1395,32219,1399,32207,1398,32196,1394,32185,1399,32173,1400,32162,1399,32150,1393,32139,1401,32128,1402,32117,1398,32105,1395,32094,1398,32083,1402,32071,1397,32060,1400,32049,1397,32038,1402,32026,1404,32015,1398,32003,1401,31992,1394,31980,1388,31969,1397,31958,1400,31946,1397,31935,1402,31924,1398,31913,1409,31902,1410,31890,1403,31878,1403,31867,1408,31856,1411,31845,1410,31834,1415,31822,1408,31810,1402,31799,1405,31788,1406,31776,1404,31764,1403,31753,1407,31742,1407,31731,1405,31720,1414,31707,1398,31696,1406,31685,1409,31674,1408,31663,1412,31652,1424,31641,1427,31629,1420,31617,1412,31606,1420,31595,1423,31583,1409,31571,1403,31558,1381,31544,1348,31529,1307,31514,1261,31499,1220,31484,1176,31468,1121,31454,1086,31438,1038,31424,1004,31408,957,31392,909,31377,869,31362,830,31344,762,31330,732,31315,706,31299,662,31284,625,31245,340,31229,306,31215,288,31202,280,31190,277,31178,284,31166,284,31153,276,31141,283,31128,281,31116,277,31104,281,31092,284,31080,288,31067,285,31055,284,31041,275,31030,283,31018,286,31005,281,30993,281,30980,283,30968,285,30956,282,30943,280,30931,280,30918,277,30906,282,30894,283,30883,292,30870,286,30858,289,30846,292,30833,291,30821,294,30808,288,30796,287,30783,287,30771,285,30759,287,30746,287,30734,284,30721,281,30710,293,30698,295,30685,291,30673,291,30660,290,30648,294,30635,289,30623,290,30611,293,30598,292,30586,299,30573,295,30560,288,30547,291,30536,301,30523,294,30510,297,30497,293,30485,291,30472,293,30460,298,30447,291,30434,291,30422,296,30410,297,30397,293,30385,298,30373,302,30361,306,30347,293,30336,308,30323,305,30310,298,30297,298,30285,299,30273,302,30259,299,30247,297,30234,297,30222,298,30209,297,30197,300,30184,299,30171,294,30159,300,30147,304,30135,306,30122,304,30109,304,30096,302,30084,301,30071,302,30059,303,30046,304,30034,303,30021,303,30008,302,29996,301,29983,300,29971,305,29959,307,29945,301,29934,307,29921,306,29909,309,29896,309,29883,309,29869,304,29857,310,29844,305,29831,309,29819,310,29805,309,29791,302,29779,304,29766,305,29754,308,29741,308,29729,311,29716,314,29703,311,29689,308,29676,304,29663,306,29651,308,29637,305,29624,301,29610,300,29599,307,29586,305,29572,303,29559,301,29547,304,29534,305,29523,316,29508,303,29496,307,29483,307,29469,302,29457,304,29444,304,29432,310,29419,309,29406,309,29394,312,29380,307,29366,304,29353,303,29343,315,29328,308,29317,318,29304,318,29291,317,29278,315,29263,307,29253,321]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.487558,-86.51244,-0.0609,5.04],\"visualizationValues\":{\"Max\":{\"x\":35.55,\"z\":2.874},\"Min\":{\"x\":-35.13,\"z\":7.182},\"values\":[-3.488,-86.51,-0.06094,5.041]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1680,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "f2d966d7.66ca58",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":13114,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3423,534090],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36325,150,36311,154,36297,163,36283,166,36272,159,36258,164,36244,167,36234,152,36221,151,36206,161,36195,155,36180,163,36166,167,36153,168,36142,159,36129,158,36116,157,36102,163,36089,165,36076,162,36065,153,36050,167,36037,165,36024,165,36010,174,35997,169,35988,153,35973,161,35961,154,35947,162,35935,158,35920,170,35908,160,35895,163,35882,163,35869,161,35856,165,35845,156,35831,161,35818,162,35805,162,35790,169,35778,163,35765,168,35755,151,35741,156,35726,165,35714,165,35700,166,35687,170,35674,170,35662,165,35649,165,35638,151,35625,155,35611,157,35599,157,35585,165,35571,169,35558,173,35546,166,35533,169,35519,179,35508,171,35495,170,35483,165,35470,167,35457,169,35446,160,35433,162,35420,163,35408,160,35394,171,35382,163,35370,160,35357,165,35342,175,35330,171,35317,175,35306,164,35294,162,35281,160,35268,167,35257,153,35245,153,35231,160,35218,164,35205,164,35191,174,35178,173,35167,164,35152,178,35141,167,35127,180,35113,184,35102,175,35090,172,35079,160,35066,161,35053,167,35040,169,35028,161,35015,163,35001,173,34990,164,34976,174,34963,175,34951,172,34938,174,34925,175,34912,177,34900,174,34887,176,34875,176,34862,177,34849,179,34839,165,34825,178,34812,179,34800,172,34787,183,34774,182,34763,174,34750,177,34737,184,34726,173,34714,163,34701,175,34688,178,34676,175,34663,175,34650,181,34638,179,34625,180,34614,176,34601,180,34589,171,34577,171,34564,173,34552,171,34538,185,34526,182,34513,184,34501,184,34488,183,34477,171,34465,172,34451,182,34438,187,34427,182,34414,182,34401,184,34389,184,34378,175,34364,183,34352,179,34340,177,34328,178,34316,173,34303,180,34290,180,34278,174,34266,178,34253,178,34241,173,34228,179,34216,179,34204,175,34191,179,34179,176,34166,178,34153,192,34141,183,34129,189,34116,188,34104,189,34092,191,34080,187,34066,200,34055,193,34043,189,34030,197,34018,191,34006,187,33993,196,33981,190,33969,195,33957,186,33945,180,33933,186,33920,196,33908,189,33895,195,33883,194,33871,189,33858,193,33846,190,33834,191,33822,190,33809,197,33797,194,33785,198,33773,193,33760,200,33748,204,33736,192,33724,196,33711,194,33699,197,33687,198,33674,205,33662,210,33649,210,33637,214,33625,213,33613,205,33601,198,33589,195,33576,199,33564,201,33552,203,33539,205,33527,205,33515,199,33503,202,33491,198,33478,200,33466,196,33454,204,33442,202,33429,203,33417,203,33405,203,33393,208,33381,204,33369,200,33357,197,33344,196,33332,205,33320,206,33307,217,33295,220,33283,227,33270,244,33259,217,33246,228,33233,268,33211,635,33198,698,33185,745,33172,790,33159,827,33147,861,33134,906,33121,948,33109,971,33097,1012,33084,1041,33072,1072,33060,1126,33048,1157,33036,1185,33023,1235,33012,1268,33000,1302,32988,1296,32977,1295,32966,1289,32954,1299,32943,1295,32932,1289,32920,1296,32909,1295,32897,1300,32886,1296,32875,1284,32863,1292,32852,1290,32841,1300,32829,1297,32818,1298,32806,1297,32795,1293,32784,1294,32772,1300,32761,1298,32750,1302,32738,1297,32727,1301,32715,1297,32704,1308,32693,1305,32681,1298,32670,1299,32659,1301,32647,1287,32636,1298,32624,1299,32613,1304,32602,1301,32590,1294,32579,1295,32568,1297,32556,1307,32545,1312,32534,1299,32522,1302,32511,1307,32500,1317,32488,1316,32477,1307,32465,1308,32454,1305,32443,1311,32432,1319,32420,1313,32409,1310,32398,1322,32386,1313,32375,1313,32363,1307,32352,1318,32341,1315,32329,1309,32318,1323,32307,1316,32295,1320,32284,1321,32273,1328,32261,1321,32250,1317,32238,1309,32227,1313,32216,1314,32204,1314,32193,1321,32182,1315,32170,1308,32159,1325,32147,1307,32136,1318,32125,1327,32114,1330,32103,1331,32091,1327,32080,1329,32069,1333,32057,1329,32046,1328,32034,1317,32022,1322,32012,1332,32000,1331,31988,1326,31976,1313,31966,1328,31954,1327,31943,1333,31931,1330,31920,1326,31909,1339,31897,1330,31886,1334,31874,1329,31862,1313,31851,1328,31839,1311,31826,1280,31813,1262,31800,1231,31785,1176,31772,1159,31758,1118,31743,1074,31729,1025,31716,1008,31701,957,31687,923,31672,874,31657,827,31643,797,31629,765,31613,713,31598,664,31562,340,31549,323,31537,335,31523,302,31509,286,31497,283,31485,285,31472,281,31460,275,31448,281,31435,266,31423,271,31411,277,31400,288,31387,281,31375,286,31364,291,31350,279,31338,280,31326,285,31314,290,31302,290,31289,286,31277,289,31264,281,31251,278,31240,286,31228,294,31215,282,31202,280,31191,289,31178,285,31166,285,31153,282,31141,287,31128,280,31117,292,31104,288,31092,291,31080,289,31067,281,31055,291,31042,281,31030,287,31019,299,31007,301,30994,298,30981,290,30969,290,30956,289,30945,298,30932,295,30920,298,30907,293,30895,296,30883,299,30871,295,30859,300,30846,297,30834,300,30822,297,30809,295,30796,289,30785,299,30772,294,30759,289,30747,296,30735,293,30722,294,30710,292,30698,294,30685,291,30673,291,30662,301,30649,296,30636,295,30623,292,30611,299,30598,295,30587,303,30573,296,30561,297,30549,306,30536,300,30524,304,30511,301,30498,298,30487,308,30474,305,30461,302,30448,299,30436,301,30423,302,30412,309,30399,308,30385,301,30373,303,30359,294,30347,298,30335,300,30323,307,30310,301,30297,301,30285,301,30273,303,30260,304,30247,302,30236,311,30223,310,30211,309,30197,302,30185,304,30174,313,30161,310,30149,314,30134,302,30122,305,30110,306,30097,307,30084,306,30072,308,30060,308,30048,312,30036,315,30023,315,30009,304,29996,306,29984,308,29972,310,29960,312,29946,308,29934,307,29920,300,29908,303,29895,306,29882,306,29870,312,29858,312,29845,312,29833,316,29819,314,29806,309,29794,315,29781,318,29769,321,29756,322,29744,322,29731,322,29717,316,29704,317,29691,317,29678,318,29665,317,29653,319,29639,313,29627,318,29614,317,29602,324,29588,319,29576,323,29563,320,29550,322,29538,327,29525,325,29513,327,29500,328,29486,322,29473,323,29462,330,29448,324,29435,327,29421,320,29410,327,29396,324,29383,324,29371,327,29359,331,29345,325,29332,324,29319,325,29307,328,29293,326,29282,332,29270,336,29255,328]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.769099,-87.2309,-0.0484,4.73],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":3.01},\"Min\":{\"x\":-35.12,\"z\":6.43},\"values\":[-2.769,-87.23,-0.04837,4.731]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.769099,-87.2309,-0.0484,4.73],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":3.01},\"Min\":{\"x\":-35.12,\"z\":6.43},\"values\":[-2.769,-87.23,-0.04837,4.731]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1720,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "9f914766.4a0e08",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":13455,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3441,43885],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36324,157,36311,155,36300,146,36284,162,36270,166,36258,160,36246,155,36233,159,36218,166,36206,165,36192,169,36181,160,36170,149,36158,145,36143,151,36131,147,36117,153,36102,162,36089,165,36076,164,36063,163,36050,165,36037,165,36026,154,36011,164,36000,156,35989,146,35973,162,35962,153,35949,151,35936,150,35922,155,35911,144,35897,153,35883,155,35871,150,35857,157,35846,146,35833,150,35817,166,35804,164,35790,171,35778,168,35765,165,35752,166,35741,158,35727,159,35713,166,35701,163,35688,160,35675,163,35662,161,35649,165,35635,168,35623,167,35610,163,35598,160,35586,159,35572,163,35560,159,35548,158,35533,170,35520,170,35510,159,35496,163,35483,169,35471,159,35457,172,35446,161,35432,166,35420,167,35407,165,35394,169,35383,156,35370,161,35355,174,35344,165,35331,164,35319,161,35306,165,35295,157,35282,154,35268,162,35256,163,35242,169,35230,164,35217,165,35205,165,35191,170,35180,158,35168,155,35153,172,35142,164,35130,156,35116,169,35103,165,35093,153,35079,162,35067,152,35054,160,35040,166,35027,170,35014,170,35002,166,34991,153,34978,157,34964,165,34951,168,34938,171,34926,172,34914,164,34900,176,34887,174,34875,170,34863,170,34850,171,34838,169,34825,171,34813,173,34800,176,34787,177,34776,171,34764,162,34751,169,34738,175,34726,171,34713,174,34701,168,34688,178,34675,180,34663,178,34651,178,34638,178,34625,181,34614,174,34601,176,34588,179,34576,175,34564,176,34551,179,34539,176,34526,178,34513,183,34502,177,34490,170,34477,175,34464,179,34451,188,34439,182,34427,174,34414,179,34402,183,34389,183,34377,180,34364,186,34352,184,34340,175,34327,180,34315,179,34302,183,34291,172,34278,182,34265,181,34253,183,34241,177,34228,176,34216,181,34203,185,34190,195,34178,184,34166,181,34154,184,34141,186,34129,180,34118,169,34105,182,34093,178,34080,184,34068,181,34055,192,34043,190,34031,182,34018,185,34006,185,33994,184,33981,190,33969,192,33957,192,33944,198,33932,200,33919,203,33907,197,33894,207,33882,203,33870,204,33858,203,33846,194,33834,196,33822,191,33809,194,33797,194,33785,192,33772,199,33760,207,33748,201,33736,199,33724,194,33711,199,33698,211,33686,209,33674,204,33662,202,33649,207,33637,205,33625,202,33612,215,33599,243,33587,235,33573,270,33560,280,33532,634,33517,695,33503,727,33489,778,33476,818,33462,859,33449,904,33435,940,33422,979,33409,1025,33396,1059,33382,1107,33370,1142,33356,1191,33344,1222,33331,1259,33319,1287,33307,1285,33296,1286,33284,1294,33273,1277,33262,1281,33251,1276,33239,1271,33228,1275,33217,1266,33205,1285,33193,1283,33182,1286,33171,1279,33159,1282,33148,1286,33137,1280,33125,1277,33114,1281,33103,1275,33091,1296,33080,1279,33068,1282,33057,1292,33045,1293,33034,1293,33022,1301,33011,1300,33000,1296,32988,1302,32977,1298,32966,1300,32954,1298,32943,1291,32931,1298,32920,1300,32909,1294,32897,1300,32886,1291,32875,1293,32863,1303,32852,1301,32841,1286,32829,1291,32818,1291,32806,1277,32795,1292,32784,1295,32772,1288,32761,1283,32750,1299,32738,1294,32727,1297,32715,1298,32704,1288,32693,1296,32681,1298,32670,1299,32659,1297,32647,1295,32636,1298,32624,1295,32613,1305,32602,1305,32590,1310,32579,1305,32568,1301,32556,1304,32545,1313,32534,1319,32522,1316,32511,1310,32499,1301,32488,1308,32477,1312,32466,1314,32454,1312,32443,1319,32431,1311,32420,1303,32409,1319,32397,1312,32386,1304,32375,1313,32363,1317,32352,1320,32341,1318,32329,1317,32318,1321,32307,1318,32295,1319,32284,1323,32273,1319,32261,1313,32250,1316,32239,1326,32227,1316,32215,1312,32204,1312,32193,1314,32182,1321,32170,1315,32158,1295,32146,1267,32133,1241,32120,1204,32107,1169,32094,1134,32081,1094,32069,1071,32055,1036,32042,992,32029,958,32015,917,32002,882,31988,854,31975,820,31960,761,31947,726,31933,694,31919,640,31905,601,31881,397,31863,285,31854,352,31840,307,31825,263,31812,256,31800,255,31788,251,31776,256,31763,250,31751,250,31740,264,31727,261,31715,265,31703,263,31690,260,31678,262,31666,262,31654,258,31642,261,31630,261,31617,256,31605,261,31593,266,31581,268,31569,266,31557,264,31545,266,31533,271,31520,271,31508,271,31496,269,31483,263,31471,267,31459,265,31447,269,31435,270,31422,265,31410,261,31398,269,31386,271,31374,265,31362,272,31349,266,31336,263,31324,265,31312,270,31299,263,31287,259,31275,263,31263,268,31250,263,31238,264,31226,273,31214,270,31201,271,31189,272,31177,275,31165,281,31152,274,31140,275,31128,273,31115,268,31103,272,31090,272,31079,278,31065,266,31053,268,31041,274,31029,277,31017,277,31005,278,30992,273,30979,273,30968,278,30956,282,30943,283,30931,280,30918,277,30906,280,30895,289,30881,280,30869,280,30856,278,30844,281,30832,279,30819,274,30807,278,30795,283,30783,281,30770,279,30758,282,30746,283,30734,288,30722,289,30709,286,30696,282,30684,285,30672,285,30660,285,30647,287,30636,292,30622,288,30610,287,30597,285,30584,282,30572,288,30559,282,30547,284,30534,283,30521,284,30509,284,30497,291,30485,291,30472,290,30459,291,30447,291,30434,292,30420,282,30410,295,30397,297,30384,290,30371,288,30359,289,30345,285,30334,293,30321,293,30310,298,30297,296,30285,300,30272,302,30260,300,30246,293,30232,286,30222,298,30209,300,30196,296,30183,295,30170,289,30157,290,30146,295,30134,300,30121,297,30109,303,30096,299,30083,298,30071,304,30059,303,30046,304,30034,306,30021,303,30008,298,29996,302,29984,310,29972,311,29958,305,29946,303,29933,302,29920,302,29908,306,29896,309,29883,311,29870,311,29857,310,29845,312,29832,314,29817,302,29806,312,29793,313,29781,318,29767,311,29755,312,29741,310,29729,311,29716,311,29704,315,29691,314,29678,318,29665,315,29651,311,29638,308,29626,313,29614,319,29601,320,29587,314,29574,313,29563,322,29550,319,29537,321,29525,322,29512,322,29500,329,29486,322,29474,327,29461,328,29447,323,29435,327,29423,327,29409,323,29396,324,29382,317,29372,332,29357,320,29344,322,29332,326,29319,326,29309,337,29295,332,29280,323,29270,339,29256,333]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.666251,-88.33375,-0.0291,4.69],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":3.659},\"Min\":{\"x\":-35.1,\"z\":5.714},\"values\":[-1.666,-88.33,-0.02909,4.693]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.666251,-88.33375,-0.0291,4.69],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":3.659},\"Min\":{\"x\":-35.1,\"z\":5.714},\"values\":[-1.666,-88.33,-0.02909,4.693]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1760,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "1e99bdc1.cb9892",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":14245,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3480,741578],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36323,161,36315,138,36299,152,36285,158,36271,161,36255,176,36243,172,36230,172,36217,172,36207,158,36191,174,36180,165,36166,169,36153,171,36141,165,36129,158,36113,173,36104,152,36089,166,36077,161,36061,176,36050,165,36036,173,36023,173,36010,172,35997,173,35983,175,35971,174,35958,174,35945,172,35933,168,35919,171,35907,170,35894,168,35882,164,35867,176,35854,174,35840,181,35827,183,35813,186,35803,171,35788,180,35775,181,35761,190,35751,173,35738,172,35726,169,35712,175,35699,176,35687,170,35675,166,35661,171,35647,174,35634,174,35620,182,35607,184,35596,171,35583,172,35572,166,35558,175,35545,173,35533,170,35518,183,35507,176,35495,171,35480,183,35467,185,35454,186,35444,173,35431,177,35417,182,35406,176,35391,189,35380,177,35368,175,35356,169,35343,171,35330,177,35315,188,35304,181,35290,187,35277,187,35267,173,35253,178,35241,178,35229,173,35216,173,35202,184,35189,183,35177,180,35165,180,35151,188,35138,188,35127,177,35114,180,35100,187,35088,186,35078,170,35063,181,35049,191,35037,186,35025,185,35012,185,35000,184,34987,185,34974,187,34961,190,34949,185,34936,184,34924,183,34911,184,34898,189,34886,181,34874,183,34861,182,34849,185,34835,195,34823,193,34809,202,34798,194,34786,188,34773,190,34761,187,34749,183,34737,184,34724,187,34712,183,34698,193,34686,194,34674,192,34661,197,34649,189,34636,197,34625,187,34612,192,34600,185,34588,185,34576,181,34563,184,34549,194,34537,190,34525,187,34512,192,34501,183,34488,188,34475,190,34463,187,34451,187,34438,189,34425,194,34413,190,34401,190,34389,187,34376,189,34363,198,34351,189,34339,184,34326,190,34314,186,34302,182,34289,193,34276,194,34264,194,34251,200,34239,197,34226,207,34214,196,34202,191,34190,186,34177,195,34165,196,34153,195,34140,198,34128,196,34116,191,34103,200,34092,189,34079,202,34067,195,34055,194,34043,182,34030,194,34019,182,34006,189,33993,199,33981,198,33967,213,33955,220,33943,213,33927,262,33886,683,33872,719,33859,738,33844,784,33828,835,33814,871,33800,909,33786,948,33772,977,33759,1005,33743,1073,33729,1105,33715,1152,33701,1203,33686,1260,33672,1296,33659,1329,33646,1345,33634,1355,33623,1360,33612,1355,33600,1355,33589,1354,33577,1355,33566,1361,33555,1350,33543,1364,33531,1374,33520,1372,33509,1364,33498,1354,33486,1363,33474,1372,33463,1372,33452,1358,33440,1370,33429,1371,33417,1370,33406,1368,33395,1365,33383,1374,33372,1375,33361,1369,33350,1363,33339,1362,33327,1374,33315,1380,33304,1378,33293,1373,33282,1360,33271,1363,33259,1376,33248,1368,33236,1372,33225,1359,33214,1374,33202,1373,33191,1373,33180,1374,33168,1380,33157,1376,33146,1374,33134,1376,33123,1379,33112,1380,33100,1382,33089,1373,33078,1371,33066,1372,33055,1380,33044,1384,33032,1383,33021,1370,33010,1380,32999,1373,32987,1377,32976,1370,32965,1381,32953,1376,32942,1377,32931,1382,32919,1373,32908,1365,32897,1371,32885,1375,32874,1384,32863,1384,32851,1395,32840,1397,32829,1387,32818,1381,32806,1385,32795,1387,32784,1389,32772,1380,32761,1385,32750,1380,32738,1383,32727,1383,32716,1376,32704,1383,32693,1382,32682,1378,32670,1384,32659,1388,32648,1389,32637,1378,32625,1372,32614,1369,32603,1376,32591,1373,32580,1375,32569,1376,32557,1375,32546,1374,32535,1379,32523,1382,32512,1379,32501,1378,32490,1389,32478,1375,32466,1349,32454,1318,32442,1283,32430,1251,32418,1226,32406,1183,32394,1153,32381,1107,32369,1075,32356,1039,32344,1002,32332,991,32319,957,32306,908,32293,851,32280,821,32268,786,32254,716,32241,679,32228,664,32217,662,32204,634,32176,194,32165,225,32152,211,32140,211,32127,209,32115,215,32103,210,32091,218,32079,214,32067,209,32055,214,32042,208,32030,216,32018,210,32006,217,31994,217,31981,210,31969,220,31957,219,31944,211,31932,212,31920,214,31908,222,31896,226,31884,232,31872,231,31860,227,31847,221,31835,218,31823,229,31810,223,31798,225,31786,227,31774,230,31762,227,31750,227,31737,227,31725,232,31713,233,31701,227,31688,223,31676,227,31664,227,31653,240,31640,235,31627,229,31615,231,31604,242,31592,242,31579,242,31567,245,31555,243,31543,240,31531,242,31519,246,31506,243,31493,236,31481,239,31470,250,31457,238,31445,245,31433,246,31421,249,31408,243,31397,247,31383,236,31372,242,31359,243,31348,247,31335,246,31323,247,31310,247,31298,244,31286,247,31274,251,31262,255,31249,247,31236,249,31224,247,31212,250,31200,252,31188,257,31176,262,31163,260,31151,263,31139,262,31126,262,31114,263,31101,257,31090,266,31077,266,31065,266,31053,271,31040,267,31028,265,31015,262,31004,269,30991,264,30978,265,30965,259,30954,263,30941,266,30929,269,30917,272,30905,270,30892,263,30879,261,30867,264,30855,270,30843,268,30830,267,30819,273,30807,276,30794,272,30781,268,30768,263,30756,265,30742,253,30731,266,30720,274,30707,270,30695,275,30684,280,30671,279,30659,279,30646,275,30633,271,30620,270,30608,276,30596,278,30584,280,30570,275,30558,275,30545,272,30534,283,30521,280,30508,279,30496,279,30483,281,30471,280,30458,280,30445,279,30432,278,30421,287,30408,286,30395,283,30384,288,30370,282,30357,280,30345,285,30333,287,30321,288,30309,292,30297,297,30284,296,30271,292,30258,290,30245,284,30233,292,30222,299,30209,298,30196,297,30183,296,30171,299,30159,300,30146,300,30134,302,30122,306,30108,298,30095,293,30084,305,30072,306,30058,301,30047,307,30034,306,30021,301,30008,303,29995,299,29984,305,29971,307,29959,306,29946,306,29935,313,29922,311,29908,308,29896,311,29883,313,29870,307,29858,317,29845,314,29832,313,29819,313,29806,313,29794,317,29782,320,29769,319,29757,323,29744,324,29730,317,29717,319,29704,319,29692,320,29678,316,29666,320,29653,317,29640,320,29628,325,29615,322,29602,322,29590,326,29577,327,29564,326,29552,330,29538,326,29526,327,29514,332,29502,336,29489,336,29476,338,29464,340,29450,334,29437,337,29425,342,29412,339,29399,337,29386,340,29374,343,29360,336,29348,339,29335,341,29321,336,29310,345,29297,346,29285,347,29271,342,29259,347]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.2814167,-89.71858,-0.00491,4.94],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.765},\"Min\":{\"x\":-35.08,\"z\":5.112},\"values\":[-0.2814,-89.72,-0.004937,4.939]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.2828798,-89.71712,-0.00494,4.94],\"visualizationValues\":{\"Max\":{\"x\":35.57,\"z\":4.763},\"Min\":{\"x\":-35.07,\"z\":5.112},\"values\":[-0.2829,-89.72,-0.004937,4.939]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1800,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "2bd2071c.f0efb8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":14834,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3510,481919],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36326,147,36309,164,36298,158,36287,145,36269,172,36257,168,36245,162,36236,142,36221,155,36208,152,36193,161,36180,161,36169,155,36155,159,36141,162,36129,157,36117,152,36105,148,36093,145,36078,155,36063,163,36050,165,36039,156,36025,162,36013,154,36000,156,35988,151,35976,147,35960,163,35947,161,35933,166,35921,162,35908,163,35895,162,35882,162,35869,162,35857,160,35844,161,35830,163,35819,152,35804,165,35791,164,35777,169,35765,168,35752,168,35737,181,35723,184,35712,175,35701,160,35687,168,35673,173,35659,179,35645,185,35632,188,35610,243,35518,703,35497,757,35474,818,35451,885,35429,942,35404,1024,35373,1140,35344,1241,35324,1291,35308,1318,35296,1317,35283,1326,35271,1326,35258,1336,35248,1325,35236,1322,35224,1322,35213,1321,35199,1330,35190,1316,35176,1326,35164,1331,35151,1336,35140,1332,35128,1333,35115,1341,35105,1327,35092,1335,35080,1336,35070,1323,35058,1326,35046,1331,35034,1330,35021,1339,35011,1327,34998,1334,34988,1323,34975,1330,34962,1335,34952,1325,34939,1334,34925,1346,34914,1345,34905,1318,34891,1335,34879,1340,34869,1326,34854,1350,34844,1340,34834,1328,34821,1337,34810,1331,34799,1327,34788,1324,34774,1345,34762,1344,34753,1328,34741,1330,34728,1338,34717,1335,34704,1351,34693,1342,34681,1342,34670,1341,34658,1344,34647,1340,34636,1336,34626,1324,34613,1334,34602,1325,34590,1332,34578,1334,34566,1342,34554,1339,34544,1330,34531,1343,34519,1342,34507,1350,34496,1347,34483,1352,34473,1341,34461,1344,34450,1339,34439,1336,34427,1338,34415,1345,34403,1348,34392,1344,34379,1351,34368,1345,34358,1333,34346,1339,34334,1338,34322,1345,34310,1347,34299,1346,34287,1348,34276,1343,34264,1350,34251,1358,34240,1353,34229,1352,34217,1350,34206,1346,34196,1337,34183,1351,34172,1341,34160,1343,34149,1342,34138,1337,34129,1313,34121,1277,34111,1251,34101,1232,34092,1202,34082,1185,34073,1157,34065,1110,34055,1097,34045,1068,34036,1035,34026,1020,34016,995,34007,970,33998,933,33987,917,33977,892,33968,859,33959,824,33950,790,33939,773,33928,754,33920,705,33911,668,33901,639,33889,633,33879,616,33867,614,33856,593,33873,165,33857,217,33846,200,33833,201,33821,202,33809,203,33797,193,33785,198,33772,200,33760,195,33748,200,33735,203,33723,202,33711,197,33699,200,33687,197,33674,198,33662,194,33650,201,33637,206,33625,202,33613,195,33601,194,33589,198,33576,196,33564,199,33552,196,33540,191,33528,196,33515,192,33503,189,33491,191,33479,193,33466,196,33454,199,33442,199,33430,199,33417,200,33405,201,33393,199,33381,202,33369,192,33357,181,33344,197,33332,194,33320,195,33308,200,33296,195,33284,193,33271,198,33259,203,33247,200,33235,193,33223,201,33211,195,33198,194,33186,198,33174,201,33162,197,33150,201,33137,204,33125,196,33113,200,33101,198,33089,204,33076,204,33064,209,33052,204,33040,191,33028,189,33016,198,33004,194,32991,198,32979,199,32967,193,32955,196,32943,202,32930,202,32918,204,32906,209,32894,200,32882,199,32870,196,32857,198,32845,201,32833,200,32821,201,32809,202,32797,203,32784,205,32772,197,32760,209,32748,210,32736,212,32724,213,32711,210,32699,211,32687,207,32675,203,32663,207,32651,207,32638,202,32626,200,32614,202,32602,207,32590,209,32578,209,32565,213,32553,209,32541,210,32529,208,32517,208,32505,208,32492,208,32480,212,32468,210,32456,214,32444,207,32432,209,32419,208,32407,214,32395,220,32383,211,32371,214,32359,211,32347,214,32334,216,32322,211,32310,221,32298,216,32286,221,32274,219,32261,215,32249,211,32237,215,32225,217,32213,217,32201,218,32189,216,32176,219,32164,210,32152,221,32140,213,32128,214,32116,216,32104,220,32092,227,32079,225,32067,214,32055,222,32042,208,32030,222,32018,221,32006,213,31994,222,31982,221,31969,214,31957,216,31945,214,31933,220,31921,229,31908,225,31896,228,31884,229,31872,222,31860,239,31848,231,31835,233,31823,224,31810,223,31798,223,31786,221,31774,233,31762,230,31750,229,31738,233,31725,232,31714,242,31701,237,31689,239,31677,237,31665,243,31653,244,31640,239,31628,238,31615,233,31603,230,31592,243,31579,238,31567,244,31555,247,31543,244,31530,236,31518,245,31506,239,31494,243,31481,239,31469,239,31457,245,31446,252,31433,252,31421,248,31409,249,31397,251,31385,251,31372,245,31360,251,31347,245,31335,246,31323,250,31311,253,31298,252,31285,241,31273,243,31261,247,31249,256,31237,257,31225,259,31213,258,31200,257,31188,256,31176,264,31163,261,31151,260,31138,258,31127,264,31113,253,31102,264,31089,263,31077,267,31065,262,31053,269,31040,265,31028,263,31016,267,31003,263,30991,268,30979,274,30966,265,30954,266,30942,269,30930,270,30917,264,30905,267,30892,266,30880,270,30868,269,30856,271,30844,275,30831,273,30818,270,30806,273,30795,279,30781,271,30770,279,30757,277,30746,281,30733,282,30720,274,30708,276,30696,281,30684,284,30672,285,30659,279,30647,282,30635,286,30622,285,30609,280,30596,281,30584,285,30571,282,30559,282,30546,281,30534,286,30522,290,30509,286,30497,287,30484,285,30472,290,30459,288,30446,285,30433,285,30421,283,30409,289,30397,293,30384,293,30372,292,30360,297,30346,290,30335,297,30322,299,30309,295,30297,298,30284,296,30272,302,30259,294,30247,299,30234,298,30221,298,30210,304,30197,303,30184,302,30172,304,30160,306,30147,306,30135,306,30121,301,30109,302,30097,308,30085,307,30072,309,30060,311,30048,315,30035,311,30023,314,30009,307,29997,309,29985,313,29972,313,29960,315,29948,315,29935,314,29922,312,29910,316,29896,313,29884,316,29871,318,29859,322,29847,322,29834,325,29820,320,29808,322,29796,328,29783,325,29770,325,29758,329,29744,326,29733,337,29720,334,29706,329,29694,333,29681,331,29667,327,29655,331,29642,331,29630,332,29618,337,29605,336,29592,339,29579,338,29566,339,29553,335,29542,343,29528,342,29516,345,29504,346,29490,341,29478,347,29465,346,29451,341,29438,340,29426,345,29413,346,29400,345,29388,349,29375,347,29361,343,29348,341,29336,346,29324,348,29312,353,29299,353,29286,355,29274,357,29261,355]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[5.540579,84.45942,0.097,4.84],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":8.291},\"Min\":{\"x\":-35.06,\"z\":1.438},\"values\":[5.541,84.46,0.097,4.838]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[5.540579,84.45942,0.097,4.84],\"visualizationValues\":{\"Max\":{\"x\":35.59,\"z\":8.291},\"Min\":{\"x\":-35.06,\"z\":1.438},\"values\":[5.541,84.46,0.097,4.838]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1840,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "e26045ae.756b68",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":15278,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3532,990116],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,184,36308,169,36295,173,36282,173,36267,182,36254,183,36241,184,36226,194,36213,190,36203,179,36190,177,36176,183,36164,178,36149,188,36137,183,36125,180,36114,169,36100,176,36088,168,36073,179,36060,179,36047,180,36038,158,36020,187,36008,182,35996,178,35984,170,35968,186,35955,186,35943,182,35932,175,35919,171,35907,170,35893,174,35879,178,35866,178,35856,166,35842,168,35827,178,35813,185,35803,172,35788,182,35776,178,35764,170,35752,165,35739,169,35726,169,35713,169,35699,172,35685,179,35674,170,35660,173,35646,179,35633,182,35623,163,35608,177,35594,184,35582,181,35570,177,35557,179,35544,183,35530,186,35517,190,35505,186,35493,181,35480,183,35466,191,35456,177,35444,174,35429,188,35417,186,35404,186,35392,181,35379,185,35367,178,35354,181,35342,179,35329,178,35316,183,35304,176,35290,184,35278,184,35264,189,35252,187,35239,188,35226,190,35214,185,35202,182,35189,184,35175,195,35163,191,35152,181,35138,188,35126,186,35111,198,35099,198,35087,195,35074,194,35061,198,35048,197,35037,188,35024,193,35011,197,34999,193,34985,196,34973,198,34959,208,34947,198,34934,203,34921,202,34908,206,34896,206,34883,205,34871,206,34859,202,34845,216,34834,205,34821,207,34809,199,34797,199,34784,202,34771,213,34759,209,34746,209,34734,209,34721,211,34708,219,34695,224,34683,220,34670,222,34658,221,34646,217,34635,210,34623,207,34609,218,34597,216,34586,203,34572,217,34560,216,34547,216,34535,209,34524,204,34511,204,34499,206,34485,216,34474,207,34460,215,34448,214,34437,203,34425,203,34412,207,34398,218,34386,214,34374,211,34361,219,34349,216,34338,204,34325,201,34312,209,34300,208,34288,202,34275,211,34262,215,34250,208,34238,214,34225,215,34212,220,34201,205,34188,212,34176,210,34163,215,34151,215,34139,217,34127,209,34115,210,34102,210,34090,209,34078,206,34066,209,34054,203,34041,210,34029,214,34016,216,34004,214,33992,215,33980,212,33968,209,33956,205,33943,213,33931,206,33919,209,33906,209,33894,211,33882,208,33870,208,33857,211,33845,207,33833,208,33821,198,33809,208,33796,210,33784,207,33772,209,33760,200,33747,210,33735,214,33722,216,33711,206,33698,209,33686,215,33674,209,33662,203,33649,207,33637,209,33625,212,33612,214,33600,213,33588,209,33576,204,33564,209,33551,220,33540,201,33527,211,33514,216,33502,213,33490,202,33478,206,33466,210,33454,205,33442,205,33429,207,33417,211,33405,202,33393,206,33380,211,33369,202,33356,205,33344,211,33332,203,33320,202,33308,206,33295,210,33283,205,33271,210,33259,212,33247,212,33235,208,33222,206,33210,211,33198,210,33186,207,33174,200,33161,209,33149,207,33137,203,33125,203,33113,203,33101,202,33088,211,33076,209,33064,209,33052,205,33040,208,33028,210,33015,210,33003,209,32991,205,32979,207,32967,208,32955,208,32942,212,32930,204,32918,209,32906,214,32894,211,32882,210,32869,213,32857,207,32845,209,32833,209,32821,211,32809,211,32797,209,32784,207,32772,207,32760,213,32748,214,32736,209,32724,211,32711,213,32699,214,32687,213,32675,217,32663,213,32651,217,32638,216,32626,217,32614,213,32602,219,32590,214,32578,211,32565,217,32553,216,32541,218,32529,225,32517,219,32505,228,32493,217,32481,229,32468,229,32456,227,32444,222,32432,223,32419,213,32408,223,32395,219,32383,226,32371,230,32359,225,32347,228,32335,234,32323,233,32311,238,32298,225,32286,230,32274,229,32262,220,32249,216,32237,223,32225,227,32213,233,32201,225,32189,224,32176,217,32165,228,32152,221,32140,227,32128,237,32116,233,32104,239,32092,233,32080,236,32067,228,32056,235,32043,236,32031,235,32019,236,32006,228,31995,240,31983,243,31970,245,31958,234,31945,225,31934,246,31921,241,31909,240,31897,235,31885,243,31873,244,31860,241,31848,243,31836,248,31824,238,31811,235,31799,233,31787,244,31775,242,31762,236,31750,233,31738,233,31726,238,31714,246,31702,245,31690,244,31677,239,31665,246,31653,246,31641,251,31629,254,31617,250,31607,288,31595,291,31583,287,31565,205,31564,367,31577,704,31568,746,31558,764,31546,767,31538,817,31529,859,31520,883,31510,909,31501,946,31490,958,31481,987,31471,1014,31461,1031,31452,1063,31443,1092,31434,1129,31425,1160,31416,1186,31406,1202,31397,1237,31388,1265,31380,1306,31372,1345,31363,1372,31354,1401,31345,1420,31332,1413,31322,1423,31310,1422,31299,1431,31289,1439,31276,1426,31266,1440,31253,1431,31242,1432,31231,1436,31219,1437,31207,1428,31195,1427,31184,1434,31174,1442,31161,1431,31150,1434,31139,1440,31127,1434,31114,1422,31102,1422,31092,1435,31081,1435,31069,1432,31057,1432,31045,1427,31034,1432,31023,1432,31011,1431,31000,1432,30989,1442,30977,1436,30966,1440,30954,1434,30942,1430,30931,1435,30919,1435,30908,1437,30897,1437,30884,1431,30873,1437,30862,1435,30850,1430,30840,1446,30829,1448,30816,1439,30805,1443,30793,1443,30780,1429,30769,1435,30759,1444,30747,1442,30735,1439,30724,1443,30713,1445,30701,1439,30689,1435,30677,1433,30666,1441,30655,1442,30642,1433,30631,1441,30621,1449,30607,1433,30596,1444,30583,1431,30573,1442,30562,1450,30549,1443,30539,1452,30527,1452,30514,1444,30503,1448,30490,1439,30478,1436,30467,1445,30456,1448,30444,1445,30433,1452,30420,1442,30408,1440,30398,1455,30385,1449,30373,1442,30361,1443,30348,1436,30339,1454,30326,1448,30314,1446,30302,1444,30291,1447,30279,1444,30269,1455,30256,1449,30245,1454,30234,1456,30222,1460,30209,1447,30197,1449,30184,1441,30173,1443,30154,1406,30133,1348,30107,1264,30087,1216,30062,1142,30039,1077,30015,1008,29988,923,29960,830,29937,765,29915,713,29851,418,29821,323,29807,320,29793,311,29780,309,29768,317,29755,313,29742,313,29730,318,29716,312,29702,309,29690,310,29678,317,29666,318,29653,322,29640,319,29626,316,29614,320,29603,325,29588,319,29576,324,29564,326,29551,323,29539,328,29525,326,29513,331,29499,325,29487,327,29474,328,29461,327,29448,324,29434,318,29422,325,29410,329,29397,328,29384,327,29371,326,29358,327,29344,322,29331,323,29318,319,29306,326,29294,331,29280,324,29268,327,29256,331]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-8.555232,-81.44477,-0.15,4.98],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":-0.3637},\"Min\":{\"x\":-35.11,\"z\":10.26},\"values\":[-8.555,-81.44,-0.1504,4.98]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-8.561577,-81.43842,-0.151,4.98],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":-0.3672},\"Min\":{\"x\":-35.11,\"z\":10.27},\"values\":[-8.562,-81.44,-0.1505,4.98]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1880,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "5cca7f2b.93e87",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia media 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia media 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":15740,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3556,455000],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36319,182,36307,176,36293,183,36278,193,36268,175,36256,172,36242,177,36228,180,36216,175,36206,161,36189,182,36176,184,36164,177,36151,180,36137,183,36126,174,36112,181,36100,174,36087,177,36074,175,36059,185,36046,186,36035,178,36022,175,36008,181,35996,174,35983,178,35971,174,35956,186,35945,175,35930,184,35919,172,35907,168,35892,179,35880,173,35866,179,35854,176,35842,168,35828,173,35817,166,35805,158,35790,169,35778,166,35764,170,35752,165,35740,161,35727,160,35712,176,35699,173,35686,175,35675,165,35660,175,35647,175,35634,176,35621,175,35608,176,35596,174,35586,155,35570,174,35557,175,35544,181,35533,168,35520,173,35508,169,35497,160,35481,180,35469,177,35458,167,35446,162,35433,163,35420,166,35408,162,35393,172,35381,173,35367,182,35355,176,35342,174,35329,178,35316,183,35304,176,35291,179,35279,177,35266,178,35253,180,35239,187,35226,190,35215,181,35203,176,35192,169,35179,167,35167,166,35151,183,35139,181,35126,184,35114,178,35102,176,35090,174,35077,174,35065,169,35050,182,35037,185,35024,190,35011,192,34999,190,34986,195,34973,197,34961,190,34949,183,34936,190,34923,188,34912,180,34900,174,34886,180,34873,188,34861,188,34848,188,34837,180,34824,185,34812,182,34798,190,34785,192,34773,196,34762,184,34748,193,34735,197,34722,202,34710,201,34697,205,34685,201,34674,193,34661,195,34648,201,34635,204,34624,195,34611,197,34599,195,34587,194,34575,190,34562,196,34549,203,34535,210,34524,201,34512,199,34500,194,34487,196,34475,195,34463,190,34451,190,34439,185,34426,187,34413,191,34399,209,34387,203,34375,199,34363,195,34351,192,34338,203,34326,200,34313,206,34301,199,34288,202,34275,210,34263,204,34251,199,34239,199,34226,202,34214,197,34201,202,34190,189,34177,192,34165,197,34152,201,34140,197,34128,201,34115,202,34104,190,34091,193,34079,199,34066,202,34054,196,34042,195,34030,198,34017,201,34005,203,33993,203,33981,199,33969,197,33955,209,33944,202,33932,200,33919,209,33907,200,33895,195,33883,197,33871,193,33858,203,33846,200,33834,200,33821,204,33809,201,33797,199,33785,197,33772,198,33760,201,33748,201,33736,194,33723,198,33711,202,33698,206,33686,206,33674,211,33661,215,33650,192,33636,222,33604,620,33589,671,33576,706,33562,740,33548,778,33535,814,33521,865,33507,898,33494,929,33481,965,33467,1012,33454,1050,33440,1097,33427,1142,33414,1184,33401,1218,33388,1268,33375,1309,33362,1330,33351,1339,33339,1339,33328,1336,33317,1341,33305,1343,33294,1348,33282,1352,33271,1356,33259,1355,33249,1333,33237,1347,33226,1338,33214,1346,33203,1346,33192,1350,33180,1342,33169,1350,33157,1355,33146,1358,33135,1353,33124,1346,33112,1353,33101,1365,33090,1350,33078,1349,33067,1359,33056,1353,33044,1355,33033,1344,33022,1347,33010,1347,32999,1346,32988,1354,32976,1355,32965,1348,32954,1353,32942,1347,32931,1359,32920,1347,32908,1349,32897,1345,32886,1337,32874,1347,32863,1351,32852,1353,32840,1360,32829,1360,32818,1348,32806,1359,32795,1356,32784,1363,32772,1355,32761,1357,32750,1359,32738,1354,32727,1359,32716,1349,32704,1352,32693,1362,32682,1348,32670,1353,32659,1351,32648,1363,32636,1363,32625,1365,32614,1364,32602,1359,32591,1351,32580,1359,32568,1361,32557,1368,32546,1356,32534,1366,32523,1361,32512,1360,32500,1365,32489,1366,32478,1367,32466,1361,32455,1367,32444,1364,32433,1372,32421,1376,32410,1364,32399,1365,32387,1368,32376,1358,32364,1348,32353,1358,32342,1350,32331,1366,32319,1368,32308,1373,32297,1373,32286,1375,32274,1375,32263,1365,32251,1363,32240,1360,32229,1363,32217,1361,32206,1360,32195,1372,32183,1353,32171,1344,32159,1312,32146,1276,32133,1235,32120,1198,32107,1161,32093,1114,32081,1082,32068,1049,32054,1005,32041,971,32027,932,32013,882,32000,847,31987,812,31972,765,31958,721,31944,668,31931,645,31918,620,31892,371,31876,299,31860,238,31847,227,31835,225,31823,228,31811,231,31798,225,31786,226,31774,234,31762,230,31750,230,31737,229,31725,233,31713,226,31701,231,31689,231,31677,239,31664,229,31652,232,31640,238,31628,236,31616,244,31603,235,31591,240,31579,241,31567,240,31555,247,31543,245,31531,243,31517,228,31506,239,31494,247,31482,244,31469,243,31457,238,31445,239,31433,242,31420,237,31409,247,31396,244,31384,241,31371,240,31359,237,31347,247,31335,245,31322,241,31310,245,31298,242,31285,241,31273,243,31261,246,31249,252,31235,237,31224,251,31212,257,31200,261,31188,261,31175,249,31163,254,31150,252,31139,263,31127,265,31114,258,31099,239,31088,253,31076,257,31065,263,31052,263,31040,262,31027,259,31015,262,31003,263,30991,262,30978,257,30966,263,30953,255,30940,257,30929,264,30917,265,30905,269,30892,263,30879,262,30867,260,30855,264,30842,265,30830,265,30818,265,30805,265,30793,268,30781,264,30769,271,30757,272,30744,270,30732,273,30720,277,30707,273,30695,270,30683,273,30670,267,30657,267,30646,278,30634,281,30621,280,30608,278,30596,278,30582,271,30571,277,30558,274,30545,273,30534,282,30521,284,30508,281,30495,277,30482,273,30470,276,30458,280,30445,278,30433,284,30420,281,30407,278,30395,279,30384,292,30371,289,30358,286,30346,286,30332,277,30321,288,30308,289,30295,286,30283,287,30271,293,30258,287,30246,292,30233,293,30221,291,30207,287,30196,294,30183,290,30171,296,30158,295,30145,291,30131,285,30119,284,30106,286,30096,298,30084,303,30071,302,30058,297,30046,303,30033,300,30020,298,30008,303,29996,306,29984,305,29970,300,29957,296,29945,301,29933,306,29920,303,29908,307,29895,303,29882,303,29870,309,29857,308,29843,304,29831,308,29818,305,29805,307,29792,304,29780,311,29767,312,29755,315,29742,315,29730,318,29716,314,29703,314,29691,317,29678,316,29665,318,29652,317,29641,322,29628,323,29615,322,29603,327,29589,321,29576,320,29564,326,29552,330,29539,328,29525,324,29513,328,29500,326,29487,329,29474,329,29462,332,29449,329,29435,326,29423,327,29409,325,29396,326,29385,331,29373,338,29359,332,29346,330,29334,338,29321,335,29307,332,29296,339,29283,339,29271,342,29258,343]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.282518,-88.71748,-0.0224,4.9],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":4.104},\"Min\":{\"x\":-35.08,\"z\":5.685},\"values\":[-1.283,-88.72,-0.02239,4.899]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.28337,-88.71663,-0.0224,4.9],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":4.103},\"Min\":{\"x\":-35.08,\"z\":5.685},\"values\":[-1.283,-88.72,-0.0224,4.899]}}]}]}",
        "payloadType": "json",
        "x": 720,
        "y": 1920,
        "wires": [
            [
                "6851b311.70a7ec"
            ]
        ]
    },
    {
        "id": "a6fa2047.af003",
        "type": "link out",
        "z": "50e3bf45.5484a",
        "name": "",
        "links": [
            "e731f9de.515098"
        ],
        "x": 575,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4b46381a.ab2708",
        "type": "link out",
        "z": "50e3bf45.5484a",
        "name": "",
        "links": [
            "e731f9de.515098"
        ],
        "x": 1135,
        "y": 1680,
        "wires": []
    },
    {
        "id": "12eae4.0613551d",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":17341,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3637,645152],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36316,193,36301,203,36292,187,36277,198,36263,203,36252,191,36239,193,36226,194,36213,193,36199,196,36186,198,36173,198,36159,204,36145,208,36133,207,36122,194,36106,209,36093,209,36080,211,36069,199,36058,191,36042,209,36029,207,36018,197,36003,210,35991,202,35976,215,35964,208,35952,203,35938,210,35926,207,35913,204,35900,205,35886,210,35872,220,35860,213,35848,206,35834,214,35821,216,35810,203,35798,199,35785,200,35770,210,35760,196,35747,194,35732,207,35718,212,35704,221,35691,219,35679,215,35666,215,35653,213,35640,214,35627,217,35613,220,35601,216,35589,213,35577,212,35563,220,35549,227,35538,215,35525,220,35513,216,35502,208,35488,213,35476,212,35462,218,35449,218,35436,221,35424,219,35412,213,35400,214,35386,218,35375,212,35360,225,35349,216,35336,220,35324,211,35311,218,35298,219,35286,215,35272,223,35261,215,35247,222,35236,210,35223,213,35209,221,35198,213,35185,211,35172,215,35159,219,35147,216,35134,214,35121,223,35107,230,35096,216,35084,214,35071,217,35058,220,35047,209,35033,220,35020,220,35008,219,34995,218,34983,214,34970,216,34958,210,34945,219,34933,210,34919,219,34906,221,34894,219,34882,218,34869,219,34857,219,34844,224,34831,226,34820,212,34807,219,34795,215,34783,211,34771,212,34758,216,34745,223,34734,211,34721,216,34707,227,34695,224,34683,216,34671,217,34658,221,34646,215,34634,218,34621,216,34609,216,34596,222,34585,214,34572,212,34559,220,34547,220,34535,215,34522,224,34509,222,34497,221,34484,224,34472,220,34460,220,34448,218,34436,216,34423,215,34410,222,34398,220,34386,219,34373,223,34361,220,34348,221,34336,222,34324,221,34312,216,34299,221,34287,216,34276,204,34263,211,34250,212,34238,212,34225,214,34212,221,34200,222,34187,221,34175,218,34163,220,34151,218,34139,215,34126,215,34114,214,34102,219,34090,216,34077,222,34065,223,34053,214,34041,211,34029,214,34016,213,34004,211,33992,210,33980,211,33968,211,33955,219,33942,220,33930,220,33918,213,33906,211,33894,216,33882,210,33869,214,33857,213,33845,216,33833,214,33820,215,33808,220,33796,212,33784,209,33771,213,33760,202,33748,203,33735,213,33723,214,33710,210,33699,202,33686,206,33674,204,33662,208,33650,202,33637,213,33624,217,33612,211,33600,208,33588,211,33576,209,33564,205,33552,205,33539,203,33527,208,33515,209,33502,212,33490,208,33478,204,33466,208,33454,207,33441,206,33429,203,33417,205,33405,198,33393,203,33381,207,33368,206,33356,206,33344,208,33332,207,33320,198,33308,205,33296,199,33283,205,33271,203,33259,206,33247,208,33234,212,33222,205,33210,210,33198,208,33186,204,33174,200,33162,197,33150,198,33137,206,33125,202,33113,200,33101,196,33089,205,33077,196,33064,208,33052,204,33040,203,33028,203,33016,203,33003,203,32991,199,32979,197,32967,203,32955,203,32942,209,32930,209,32918,202,32906,189,32894,204,32882,202,32870,206,32857,206,32845,204,32833,201,32821,201,32809,206,32797,207,32784,208,32772,208,32760,212,32748,210,32736,212,32724,213,32711,205,32699,202,32687,204,32675,204,32663,208,32650,203,32638,205,32626,211,32614,203,32602,198,32590,209,32578,206,32565,207,32553,209,32541,206,32529,208,32517,211,32505,209,32492,208,32480,207,32468,207,32456,212,32444,210,32432,212,32419,210,32407,207,32395,206,32383,202,32371,215,32359,211,32346,211,32334,210,32322,210,32310,214,32298,222,32286,218,32274,224,32261,212,32249,217,32237,222,32225,212,32213,218,32201,214,32188,207,32176,213,32164,216,32152,208,32140,208,32127,210,32115,210,32103,211,32091,208,32079,217,32067,213,32055,218,32043,219,32030,218,32018,214,32005,208,31993,209,31981,218,31969,210,31957,209,31945,216,31932,215,31921,223,31908,215,31896,223,31884,223,31872,228,31859,208,31847,213,31834,216,31823,223,31810,217,31798,224,31786,223,31773,218,31761,222,31749,219,31737,223,31724,217,31712,219,31700,224,31688,226,31676,222,31664,224,31651,216,31639,217,31626,213,31614,213,31602,219,31591,228,31578,229,31566,220,31554,227,31542,232,31530,231,31517,228,31505,226,31492,217,31481,228,31469,231,31456,231,31444,234,31432,229,31419,225,31408,233,31395,225,31383,230,31371,235,31358,231,31346,227,31334,229,31321,230,31309,230,31297,232,31284,231,31271,223,31258,218,31246,222,31235,234,31223,235,31210,232,31198,237,31186,235,31173,235,31160,226,31148,234,31136,238,31123,230,31111,227,31099,232,31086,230,31073,227,31061,230,31050,237,31038,240,31024,232,31013,242,31000,239,30988,235,30976,244,30966,263,30961,332,30956,396,30949,446,30938,460,30926,463,30916,479,30907,511,30900,555,30894,607,30885,636,30877,666,30868,692,30859,724,30851,757,30843,789,30834,818,30827,856,30817,873,30808,895,30799,917,30790,947,30780,965,30773,1004,30768,1054,30760,1083,30750,1097,30740,1113,30730,1130,30720,1141,30708,1144,30696,1139,30684,1137,30673,1141,30662,1149,30650,1149,30637,1138,30626,1147,30614,1147,30603,1148,30590,1146,30577,1139,30565,1137,30553,1139,30542,1146,30531,1153,30519,1152,30507,1150,30497,1164,30485,1163,30472,1158,30460,1158,30447,1146,30433,1136,30423,1151,30411,1151,30400,1156,30388,1154,30375,1148,30363,1148,30351,1149,30338,1141,30328,1156,30316,1157,30307,1174,30295,1171,30283,1171,30271,1170,30255,1151,30241,1137,30228,1127,30209,1086,30189,1035,30166,967,30146,919,30121,844,30097,770,30073,699,30048,621,30019,520,29989,413,29966,347,29944,294,29928,277,29915,273,29900,261,29889,271,29876,268,29863,269,29849,266,29837,271,29823,266,29811,269,29798,269,29786,270,29774,277,29760,274,29747,273,29734,271,29721,271,29709,273,29696,275,29683,276,29670,275,29657,274,29644,273,29631,272,29620,282,29607,281,29593,278,29580,275,29568,281,29555,279,29544,288,29530,285,29516,278,29503,276,29493,293,29480,290,29466,285,29453,288,29439,283,29427,286,29414,284,29400,278,29387,279,29374,280,29361,278,29349,284,29337,288,29323,284,29311,287,29299,290,29285,285,29273,289,29259,288,29248,295]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.760913,-86.23909,-0.0657,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9516},\"Min\":{\"x\":-35.19,\"z\":5.599},\"values\":[-3.761,-86.24,-0.06573,3.285]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-3.766063,-86.23394,-0.0658,3.29],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":0.9487},\"Min\":{\"x\":-35.2,\"z\":5.603},\"values\":[-3.766,-86.23,-0.06583,3.285]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1680,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "e552b530.0fb7d8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":18132,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3676,912705],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36315,199,36302,201,36289,201,36275,205,36264,197,36251,195,36237,203,36224,200,36210,206,36200,193,36188,186,36173,200,36158,207,36144,216,36133,206,36121,199,36106,210,36093,212,36082,202,36069,199,36054,210,36043,203,36030,203,36014,218,36001,216,35990,211,35977,207,35966,198,35954,195,35940,199,35926,208,35914,201,35900,205,35887,208,35877,192,35863,198,35849,202,35836,203,35823,202,35809,210,35797,205,35783,209,35771,207,35759,200,35745,204,35733,202,35721,197,35708,194,35694,202,35681,205,35666,212,35654,207,35645,186,35631,193,35616,202,35604,201,35591,201,35578,206,35564,213,35551,213,35538,215,35527,209,35515,202,35502,204,35489,209,35478,196,35464,204,35450,216,35437,214,35425,211,35414,205,35400,213,35388,210,35375,212,35363,208,35350,204,35339,199,35326,197,35311,213,35299,209,35288,203,35276,198,35263,199,35249,204,35237,202,35224,202,35211,206,35198,212,35186,205,35174,202,35161,203,35149,203,35136,199,35124,201,35110,205,35099,195,35086,201,35073,200,35060,207,35047,210,35035,204,35023,202,35009,208,34997,204,34984,205,34972,198,34960,196,34948,191,34934,205,34922,196,34910,197,34898,191,34884,199,34872,197,34859,198,34847,201,34834,205,34822,199,34809,204,34798,195,34785,194,34772,200,34760,201,34747,204,34735,198,34722,202,34710,200,34697,203,34685,203,34673,198,34661,199,34649,193,34635,202,34623,200,34612,194,34599,196,34587,192,34576,182,34563,185,34551,184,34538,188,34524,197,34512,192,34500,194,34488,185,34475,192,34462,198,34450,195,34437,199,34425,197,34413,189,34402,183,34389,188,34377,186,34364,185,34351,192,34339,186,34326,194,34314,192,34302,187,34290,180,34278,177,34265,188,34252,190,34240,183,34227,193,34214,199,34202,199,34190,190,34177,193,34166,183,34154,181,34141,185,34128,194,34116,192,34104,194,34091,195,34080,187,34067,191,34055,188,34043,185,34031,185,34018,188,34006,192,33994,186,33981,191,33970,182,33957,184,33944,198,33932,191,33920,191,33908,189,33895,192,33884,184,33871,187,33859,191,33847,185,33834,193,33822,188,33810,189,33798,181,33786,182,33774,180,33761,191,33749,183,33736,187,33725,177,33712,183,33699,192,33687,190,33675,183,33663,190,33650,188,33638,186,33627,172,33614,177,33602,174,33590,171,33578,172,33565,171,33552,187,33540,183,33528,182,33516,178,33504,173,33492,171,33479,176,33467,175,33455,171,33443,169,33431,171,33418,178,33406,178,33394,182,33382,181,33369,185,33357,176,33345,170,33333,171,33321,180,33309,175,33296,175,33284,181,33272,182,33260,170,33248,170,33236,171,33223,176,33211,173,33199,174,33187,178,33174,186,33162,180,33150,177,33138,167,33126,169,33114,172,33101,168,33089,180,33077,182,33065,178,33052,183,33040,185,33028,175,33016,176,33004,184,32992,183,32979,180,32967,177,32955,165,32943,171,32931,174,32918,182,32906,174,32894,172,32882,173,32870,173,32858,170,32845,180,32833,178,32821,168,32809,174,32797,174,32784,188,32772,190,32760,228,32748,299,32736,358,32724,381,32712,409,32700,443,32689,495,32677,549,32666,619,32654,649,32643,686,32631,730,32620,770,32608,797,32597,829,32586,881,32575,923,32563,953,32552,992,32541,1023,32530,1048,32519,1080,32507,1088,32496,1098,32485,1100,32473,1098,32462,1103,32450,1103,32439,1104,32427,1106,32415,1101,32404,1091,32392,1093,32380,1084,32369,1082,32357,1087,32346,1090,32335,1093,32323,1102,32312,1095,32300,1096,32289,1097,32277,1094,32266,1101,32254,1099,32242,1089,32231,1091,32219,1095,32208,1100,32197,1102,32185,1099,32173,1089,32162,1090,32150,1093,32138,1084,32127,1094,32116,1100,32105,1104,32093,1103,32082,1112,32070,1105,32058,1103,32047,1104,32035,1106,32023,1098,32011,1085,31998,1050,31984,1006,31970,966,31957,933,31943,892,31929,846,31916,809,31902,773,31888,736,31873,680,31859,649,31846,615,31832,577,31814,497,31798,434,31786,424,31771,378,31756,330,31739,262,31725,222,31712,207,31700,210,31687,207,31675,205,31662,205,31650,205,31638,209,31626,209,31614,212,31602,216,31589,208,31577,213,31565,206,31554,224,31541,217,31529,222,31517,222,31505,225,31492,224,31480,220,31467,216,31455,214,31443,213,31431,221,31420,231,31407,223,31395,225,31383,229,31370,223,31358,224,31346,228,31333,228,31321,223,31309,232,31297,240,31285,236,31272,233,31260,237,31248,241,31236,246,31224,245,31212,249,31198,240,31187,254,31173,235,31162,243,31150,248,31137,246,31125,243,31112,246,31100,240,31088,248,31076,254,31064,258,31052,258,31040,259,31028,264,31016,268,31002,259,30990,255,30976,245,30965,253,30953,262,30941,262,30929,264,30916,258,30904,260,30892,262,30879,264,30867,265,30855,269,30843,269,30830,265,30817,260,30806,274,30793,268,30782,273,30769,269,30757,274,30745,276,30732,273,30719,266,30708,275,30696,277,30683,273,30671,275,30659,281,30647,280,30634,280,30620,273,30609,281,30595,271,30583,278,30571,283,30558,278,30547,285,30534,285,30521,282,30509,284,30496,285,30483,277,30471,284,30458,284,30446,288,30434,288,30420,282,30409,288,30397,291,30384,291,30371,288,30359,289,30346,292,30334,292,30320,285,30308,285,30296,293,30283,289,30272,297,30259,295,30246,293,30234,296,30220,288,30209,298,30196,296,30182,283,30171,294,30158,296,30146,299,30134,301,30121,301,30109,304,30096,300,30083,297,30071,299,30059,301,30046,303,30034,303,30021,303,30008,301,29996,301,29983,299,29971,306,29959,308,29947,312,29933,305,29922,312,29909,310,29896,314,29883,309,29869,307,29857,310,29843,303,29832,311,29819,315,29806,313,29793,313,29780,313,29766,302,29755,313,29742,315,29729,314,29716,314,29703,314,29691,316,29677,310,29665,314,29653,317,29640,318,29628,322,29613,312,29601,319,29589,322,29576,323,29563,320,29551,324,29539,328,29526,330,29514,332,29498,320,29485,317,29474,325,29460,323,29448,325,29435,326,29421,322,29409,324,29396,322,29384,329,29371,329,29357,324,29344,322,29333,329,29319,325,29307,330,29293,322,29280,325,29269,331,29253,319]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.75068,-88.24932,-0.0306,3.28],\"visualizationValues\":{\"Max\":{\"x\":35.49,\"z\":2.194},\"Min\":{\"x\":-35.13,\"z\":4.353},\"values\":[-1.751,-88.25,-0.03056,3.279]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-1.75068,-88.24932,-0.0306,3.28],\"visualizationValues\":{\"Max\":{\"x\":35.49,\"z\":2.194},\"Min\":{\"x\":-35.13,\"z\":4.353},\"values\":[-1.751,-88.25,-0.03056,3.279]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1720,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "3b11290.1bde0d8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":18458,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3693,338590],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36322,166,36307,175,36296,168,36281,175,36269,173,36257,165,36243,170,36229,178,36217,171,36204,172,36191,172,36177,178,36166,167,36150,181,36138,177,36129,161,36114,171,36100,175,36088,172,36073,179,36062,169,36049,170,36037,164,36022,175,36010,169,35997,173,35986,163,35973,163,35959,166,35946,168,35931,176,35920,168,35908,161,35894,166,35882,162,35868,167,35856,166,35841,173,35828,178,35816,169,35804,167,35791,164,35779,160,35765,169,35751,170,35740,162,35726,164,35714,164,35700,165,35687,168,35675,164,35663,157,35650,156,35638,155,35625,154,35613,150,35598,161,35586,155,35573,159,35560,163,35547,162,35534,163,35522,158,35509,164,35496,166,35482,171,35470,166,35458,165,35445,168,35433,163,35420,162,35407,169,35396,157,35383,157,35370,159,35357,163,35345,155,35332,163,35320,158,35307,155,35294,161,35280,166,35268,166,35250,200,35230,249,35203,349,35182,405,35157,490,35126,615,35098,725,35074,800,35050,884,35028,955,35006,1024,34993,1035,34976,1067,34962,1078,34952,1069,34938,1082,34925,1088,34915,1072,34904,1068,34892,1070,34879,1072,34868,1066,34856,1073,34844,1076,34831,1080,34819,1084,34807,1081,34797,1070,34784,1079,34772,1084,34760,1085,34749,1077,34738,1069,34725,1080,34714,1077,34701,1083,34691,1074,34677,1085,34669,1061,34656,1066,34642,1083,34631,1078,34619,1078,34609,1070,34596,1081,34584,1076,34571,1088,34562,1068,34549,1081,34537,1078,34525,1083,34513,1079,34501,1082,34491,1072,34481,1054,34471,1036,34463,1005,34454,978,34444,952,34435,931,34425,908,34416,883,34407,855,34398,824,34390,787,34380,765,34370,747,34359,734,34351,699,34342,669,34333,637,34323,613,34312,598,34304,560,34296,517,34288,476,34278,445,34268,426,34259,384,34248,368,34238,344,34229,315,34220,275,34211,231,34202,195,34190,191,34178,184,34166,182,34154,177,34141,187,34130,177,34118,170,34105,173,34093,176,34081,175,34069,169,34057,167,34044,171,34032,171,34020,169,34007,175,33995,177,33983,171,33970,176,33958,167,33946,169,33934,164,33921,174,33909,167,33897,168,33884,174,33872,169,33859,182,33848,169,33835,177,33822,183,33810,177,33798,177,33786,174,33774,166,33762,164,33750,164,33737,171,33725,173,33712,178,33700,183,33688,172,33676,172,33664,166,33652,167,33639,166,33627,167,33615,166,33602,176,33589,183,33577,181,33565,181,33553,178,33540,184,33528,185,33516,180,33503,186,33492,177,33479,176,33467,173,33455,169,33443,172,33430,179,33419,169,33406,171,33394,187,33381,182,33370,176,33358,170,33345,177,33333,170,33321,179,33308,181,33296,179,33284,185,33272,183,33259,190,33247,189,33235,185,33223,184,33211,185,33199,183,33187,178,33175,169,33162,173,33150,182,33138,182,33126,184,33113,192,33101,192,33089,188,33077,185,33064,192,33052,189,33040,188,33028,196,33016,195,33004,193,32991,188,32979,193,32967,190,32955,195,32943,193,32930,200,32918,199,32906,189,32894,189,32882,189,32870,193,32857,194,32845,191,32833,198,32821,190,32809,191,32797,188,32784,197,32772,198,32760,193,32748,198,32736,200,32723,198,32711,192,32699,197,32687,203,32675,206,32663,204,32651,207,32638,201,32626,202,32614,203,32602,204,32590,200,32577,195,32565,201,32553,202,32541,200,32529,205,32517,200,32504,200,32492,204,32480,201,32468,204,32456,204,32444,206,32432,214,32419,207,32407,204,32395,208,32383,203,32371,207,32359,210,32346,209,32334,206,32322,202,32310,206,32298,204,32285,205,32273,210,32261,210,32249,211,32237,213,32225,211,32213,210,32200,210,32189,217,32176,210,32164,208,32152,213,32140,218,32128,214,32115,214,32103,214,32091,214,32079,213,32067,213,32055,226,32043,223,32030,221,32018,224,32006,220,31994,216,31981,220,31969,222,31957,226,31945,221,31933,222,31920,221,31908,217,31896,221,31884,217,31871,221,31860,229,31848,230,31835,226,31823,228,31811,236,31799,238,31787,236,31774,234,31762,231,31750,231,31738,234,31725,230,31713,233,31701,234,31689,237,31677,239,31665,238,31652,237,31640,233,31628,238,31616,248,31604,246,31592,241,31579,235,31566,233,31554,236,31543,242,31531,246,31519,250,31506,246,31494,244,31482,242,31470,251,31458,254,31446,250,31433,249,31420,239,31408,240,31396,243,31383,237,31371,229,31360,251,31348,253,31336,252,31323,250,31311,251,31298,249,31286,256,31274,256,31262,263,31250,257,31237,258,31224,252,31212,252,31200,257,31188,261,31176,264,31163,261,31151,258,31139,260,31126,262,31114,257,31102,266,31090,265,31077,264,31064,257,31052,261,31040,263,31028,267,31015,258,31003,260,30991,266,30978,262,30966,268,30954,269,30942,271,30929,268,30916,259,30905,269,30892,266,30880,269,30868,272,30856,274,30842,263,30830,268,30819,274,30807,275,30794,269,30781,271,30769,271,30757,274,30745,280,30732,272,30719,270,30707,268,30695,274,30683,276,30670,270,30658,275,30645,267,30633,275,30620,267,30608,275,30596,275,30583,276,30570,274,30557,268,30546,280,30534,281,30522,285,30508,280,30496,283,30484,284,30471,283,30458,282,30446,284,30434,288,30420,279,30407,277,30396,288,30383,287,30371,289,30359,291,30346,290,30333,288,30321,291,30309,293,30296,291,30283,285,30272,296,30258,293,30245,290,30233,291,30221,297,30209,299,30196,295,30182,287,30170,291,30158,293,30145,288,30133,292,30120,295,30107,292,30096,300,30083,298,30071,299,30058,300,30046,303,30033,299,30019,289,30007,296,29996,301,29983,299,29970,300,29958,304,29946,306,29934,308,29921,304,29908,304,29895,306,29883,313,29869,303,29856,304,29844,309,29832,311,29818,307,29805,307,29791,301,29779,306,29768,312,29755,312,29741,309,29729,311,29716,311,29703,313,29689,305,29677,310,29665,315,29652,313,29638,309,29626,315,29613,313,29601,320,29589,322,29575,318,29563,322,29551,326,29538,324,29524,319,29512,324,29499,324,29486,325,29473,322,29460,323,29447,323,29436,329,29422,325,29410,327,29397,327,29383,324,29371,327,29357,323,29345,327,29330,315,29320,329,29306,327,29294,331,29281,330,29269,335,29256,333]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[1.37267,88.62733,0.024,3.21],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.058},\"Min\":{\"x\":-35.1,\"z\":2.365},\"values\":[1.373,88.63,0.02396,3.206]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[1.37267,88.62733,0.024,3.21],\"visualizationValues\":{\"Max\":{\"x\":35.56,\"z\":4.058},\"Min\":{\"x\":-35.1,\"z\":2.365},\"values\":[1.373,88.63,0.02396,3.206]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1760,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "f587c026.d2a22",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":19667,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3754,548218],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36317,190,36305,187,36293,182,36276,201,36265,194,36251,196,36239,190,36225,198,36212,197,36199,197,36186,198,36175,188,36162,186,36147,199,36134,199,36122,195,36108,200,36096,196,36083,195,36070,197,36055,204,36042,210,36030,202,36019,192,36006,195,35992,195,35981,187,35969,183,35954,194,35942,190,35927,199,35914,198,35902,198,35888,201,35875,204,35862,202,35850,196,35837,198,35823,205,35810,203,35800,189,35786,194,35774,187,35761,187,35746,198,35734,195,35720,200,35707,200,35697,188,35685,178,35669,196,35657,191,35645,188,35632,186,35617,197,35607,185,35592,197,35579,196,35566,198,35555,188,35541,200,35528,200,35516,200,35504,196,35489,205,35477,203,35465,197,35454,191,35442,185,35428,191,35416,188,35403,190,35390,191,35377,195,35365,190,35354,184,35341,183,35328,188,35313,200,35301,195,35290,186,35277,191,35263,197,35251,193,35239,189,35228,179,35213,192,35201,191,35187,198,35175,196,35162,200,35151,189,35138,187,35125,194,35113,186,35101,185,35088,186,35075,186,35062,193,35051,178,35038,183,35025,184,35012,184,35000,180,34986,191,34973,193,34960,196,34948,196,34935,194,34923,190,34910,193,34897,200,34885,193,34872,193,34860,196,34847,194,34836,183,34823,187,34811,189,34798,189,34788,173,34774,188,34761,193,34747,199,34736,188,34724,190,34711,192,34698,195,34687,187,34674,192,34663,182,34648,201,34637,187,34625,188,34612,192,34598,207,34586,197,34574,197,34562,190,34550,188,34537,192,34525,194,34512,195,34499,203,34486,207,34475,195,34464,184,34451,188,34439,186,34426,187,34413,193,34400,200,34388,195,34375,196,34364,191,34351,189,34339,193,34326,197,34313,198,34302,191,34289,190,34276,195,34264,199,34252,195,34240,192,34226,201,34214,194,34201,202,34189,207,34177,194,34165,194,34152,204,34141,192,34129,178,34117,185,34104,192,34092,186,34080,188,34067,187,34055,194,34043,191,34031,185,34018,195,34006,186,33993,192,33981,193,33970,183,33957,182,33944,192,33932,195,33920,197,33907,196,33895,203,33883,190,33871,196,33858,195,33846,192,33834,196,33821,197,33809,199,33797,189,33786,178,33773,184,33761,189,33748,194,33736,194,33724,195,33712,188,33699,200,33687,192,33675,181,33663,188,33650,193,33638,197,33626,194,33614,185,33601,190,33589,192,33577,184,33564,193,33552,188,33540,191,33528,191,33516,184,33503,195,33491,199,33479,194,33466,204,33454,205,33441,209,33428,238,33413,312,33398,376,33385,424,33371,455,33359,475,33346,515,33331,587,33317,670,33304,707,33291,745,33278,773,33265,820,33251,873,33238,914,33225,976,33213,1007,33200,1042,33187,1083,33175,1101,33163,1120,33152,1134,33140,1142,33129,1129,33117,1141,33106,1138,33094,1147,33082,1146,33071,1140,33059,1147,33048,1150,33037,1137,33025,1142,33013,1147,33002,1142,32991,1139,32979,1150,32968,1142,32956,1141,32945,1141,32933,1141,32921,1160,32910,1153,32899,1142,32887,1144,32876,1136,32864,1151,32853,1144,32841,1153,32830,1152,32818,1158,32807,1159,32795,1152,32784,1139,32772,1145,32761,1149,32749,1146,32738,1144,32726,1150,32715,1153,32704,1144,32692,1145,32681,1155,32669,1155,32657,1123,32646,1106,32634,1070,32622,1016,32610,986,32598,961,32586,923,32574,886,32562,856,32550,812,32538,784,32526,756,32513,710,32501,671,32488,627,32476,583,32463,542,32450,517,32437,469,32424,432,32411,406,32397,320,32384,258,32371,241,32359,229,32347,218,32334,218,32322,218,32310,217,32298,223,32286,225,32274,222,32261,217,32249,212,32237,219,32225,213,32213,213,32201,220,32189,226,32176,216,32165,226,32153,231,32140,225,32128,227,32116,232,32103,217,32092,225,32079,227,32067,226,32055,231,32043,234,32031,236,32019,234,32007,237,31994,226,31982,233,31970,236,31957,228,31945,221,31933,229,31921,231,31909,230,31897,239,31885,240,31872,232,31860,229,31848,232,31835,234,31824,244,31812,245,31800,246,31788,249,31775,246,31763,243,31751,244,31738,240,31725,229,31714,245,31702,241,31689,237,31678,251,31666,253,31653,253,31641,244,31629,248,31616,243,31604,242,31591,239,31580,251,31568,250,31556,251,31543,251,31531,252,31519,248,31506,247,31494,244,31482,247,31470,245,31457,244,31446,256,31434,260,31422,255,31408,242,31396,239,31385,250,31372,244,31360,246,31347,239,31336,254,31324,257,31312,260,31299,262,31287,257,31274,257,31262,257,31250,258,31237,256,31225,258,31212,257,31200,261,31188,261,31176,261,31164,263,31151,264,31139,266,31127,266,31115,268,31102,265,31089,263,31077,263,31065,270,31052,262,31039,258,31028,265,31016,270,31004,270,30991,268,30979,270,30967,273,30954,270,30941,265,30929,265,30917,265,30905,276,30893,274,30881,274,30868,273,30855,269,30842,262,30831,274,30818,270,30806,271,30794,274,30783,281,30770,276,30757,277,30745,278,30733,279,30720,277,30708,277,30696,280,30683,279,30671,278,30658,272,30646,275,30634,281,30621,277,30609,283,30596,277,30583,278,30572,283,30559,286,30547,288,30534,287,30522,287,30508,279,30497,287,30484,285,30471,285,30459,288,30447,290,30433,285,30421,286,30407,279,30395,283,30383,287,30370,282,30357,277,30344,278,30333,288,30321,287,30308,287,30296,290,30284,294,30271,295,30259,296,30246,294,30232,287,30221,294,30208,292,30195,289,30182,285,30170,293,30157,286,30146,299,30133,294,30120,294,30108,294,30096,300,30083,299,30070,293,30057,291,30045,293,30032,294,30020,297,30008,301,29995,301,29983,303,29970,296,29958,300,29944,296,29933,302,29921,306,29907,303,29896,309,29881,301,29868,300,29856,304,29843,304,29831,308,29817,304,29804,298,29792,305,29778,299,29767,307,29755,314,29741,311,29728,309,29714,304,29702,306,29689,306,29676,303,29665,314,29652,314,29639,316,29626,315,29613,314,29600,312,29587,314,29575,318,29562,315,29549,316,29536,317,29524,317,29511,317,29499,321,29485,316,29472,317,29459,315,29448,325,29435,323,29422,324,29409,323,29396,323,29380,310,29368,315,29357,320,29345,324,29332,324,29318,320,29306,323,29293,322,29280,324,29265,316,29253,318]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9156833,-89.08432,-0.016,3.42],\"visualizationValues\":{\"Max\":{\"x\":35.51,\"z\":2.849},\"Min\":{\"x\":-35.14,\"z\":3.978},\"values\":[-0.9157,-89.08,-0.01598,3.417]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9156833,-89.08306,-0.016,3.42],\"visualizationValues\":{\"Max\":{\"x\":35.5,\"z\":2.848},\"Min\":{\"x\":-35.14,\"z\":3.979},\"values\":[-0.9169,-89.08,-0.016,3.416]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1800,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "7f6de113.37235",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":19896,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3766,102904],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36318,185,36304,190,36293,182,36277,194,36265,194,36254,183,36240,185,36227,188,36213,194,36200,194,36186,199,36175,188,36163,186,36146,203,36134,199,36125,179,36108,199,36095,201,36084,191,36070,194,36057,199,36042,204,36031,198,36019,191,36006,192,35992,196,35981,188,35969,182,35956,182,35941,193,35926,205,35914,203,35903,188,35888,199,35879,180,35863,194,35849,200,35837,198,35825,190,35811,196,35802,178,35787,189,35774,187,35761,191,35746,201,35733,202,35720,200,35710,187,35695,195,35684,188,35670,193,35657,194,35644,195,35631,191,35619,190,35608,178,35592,193,35580,191,35569,181,35556,186,35542,190,35529,196,35517,193,35504,192,35492,187,35479,194,35466,193,35454,191,35440,197,35427,201,35416,192,35403,190,35391,185,35378,191,35365,191,35354,180,35340,190,35327,190,35313,202,35301,198,35288,198,35275,199,35263,197,35250,200,35238,198,35227,188,35213,193,35201,189,35189,187,35176,188,35163,191,35151,189,35138,189,35125,195,35113,188,35100,188,35089,180,35075,186,35062,191,35049,193,35038,183,35025,183,35013,178,35000,184,34986,190,34973,193,34961,192,34948,193,34934,200,34923,190,34912,179,34897,196,34885,195,34872,199,34860,191,34847,198,34835,193,34823,194,34811,189,34798,191,34786,192,34773,191,34761,190,34748,195,34738,178,34725,183,34712,184,34699,191,34687,182,34675,185,34662,189,34649,193,34638,183,34625,180,34613,184,34599,198,34587,189,34576,181,34563,184,34550,185,34537,190,34525,187,34513,190,34499,199,34486,208,34475,197,34463,187,34451,186,34438,190,34426,189,34413,194,34400,195,34388,199,34376,192,34364,192,34352,183,34339,192,34327,183,34314,193,34301,197,34288,199,34277,194,34265,188,34252,188,34239,197,34226,204,34215,191,34203,183,34189,197,34177,194,34165,188,34153,192,34141,186,34129,180,34117,185,34104,191,34092,183,34079,197,34067,197,34055,195,34042,194,34031,183,34017,199,34006,187,33994,183,33981,188,33969,187,33957,182,33944,194,33932,198,33919,198,33907,197,33895,193,33883,197,33871,195,33859,185,33846,194,33834,200,33821,199,33809,197,33797,200,33785,187,33773,181,33761,191,33748,198,33736,199,33724,192,33712,189,33700,185,33687,191,33675,188,33663,187,33650,187,33638,195,33626,195,33613,197,33601,189,33589,181,33577,183,33565,187,33552,194,33540,189,33528,192,33516,186,33503,192,33491,190,33478,200,33466,202,33454,204,33441,210,33428,233,33413,313,33398,388,33385,419,33372,443,33359,477,33346,502,33332,577,33316,673,33303,714,33291,740,33278,773,33265,823,33251,889,33239,910,33226,952,33213,992,33200,1031,33187,1079,33175,1103,33163,1118,33151,1140,33140,1141,33128,1139,33117,1139,33106,1135,33094,1138,33082,1146,33071,1150,33059,1160,33048,1154,33036,1156,33025,1146,33014,1128,33002,1141,32990,1148,32979,1138,32968,1141,32956,1140,32945,1138,32933,1141,32922,1154,32910,1159,32899,1146,32887,1148,32876,1143,32864,1144,32853,1159,32841,1152,32830,1153,32818,1150,32807,1148,32795,1148,32784,1147,32772,1136,32761,1148,32749,1146,32738,1146,32726,1150,32715,1155,32704,1156,32692,1150,32681,1149,32669,1151,32658,1136,32646,1111,32634,1082,32622,1032,32610,1005,32598,967,32586,936,32574,902,32562,861,32550,824,32538,778,32526,760,32513,723,32501,681,32488,637,32476,593,32463,545,32450,510,32437,474,32424,442,32411,400,32398,327,32384,267,32371,234,32359,228,32347,217,32335,220,32322,214,32310,215,32298,212,32286,217,32274,217,32261,213,32249,206,32237,214,32225,219,32213,214,32201,218,32189,218,32176,213,32165,226,32152,229,32140,218,32128,225,32116,229,32103,213,32091,214,32079,220,32067,225,32055,231,32043,233,32031,234,32019,232,32007,237,31994,227,31982,234,31970,233,31957,227,31945,217,31933,232,31921,229,31909,230,31897,232,31884,234,31872,234,31860,233,31847,229,31836,235,31824,241,31811,241,31799,244,31787,242,31775,239,31763,242,31750,238,31738,235,31725,229,31714,241,31701,240,31689,239,31677,244,31665,250,31653,250,31641,244,31628,244,31616,242,31604,243,31591,238,31580,251,31568,251,31555,246,31543,248,31531,250,31519,250,31506,247,31494,241,31482,247,31470,244,31457,244,31446,258,31434,259,31421,253,31408,238,31396,236,31385,252,31372,243,31360,245,31347,241,31336,254,31324,258,31311,258,31299,261,31286,256,31274,254,31261,251,31249,257,31237,255,31225,257,31212,252,31200,258,31188,259,31175,257,31163,261,31151,263,31139,268,31127,268,31115,269,31102,265,31089,257,31077,262,31065,268,31052,261,31039,254,31028,262,31016,265,31003,266,30991,267,30979,268,30967,270,30954,268,30941,264,30929,261,30916,262,30905,273,30893,272,30881,274,30868,272,30855,267,30842,265,30831,271,30818,269,30806,274,30794,272,30782,279,30770,276,30757,272,30744,272,30732,274,30720,277,30708,277,30696,281,30684,281,30671,277,30658,271,30645,272,30634,277,30620,273,30609,278,30596,280,30584,280,30571,280,30559,282,30547,286,30534,285,30521,284,30509,286,30496,281,30483,283,30470,277,30458,281,30446,284,30434,288,30421,287,30407,279,30396,284,30383,285,30370,284,30357,281,30345,283,30333,289,30320,287,30308,288,30296,290,30283,291,30271,292,30259,296,30246,296,30233,288,30220,289,30208,294,30195,290,30182,286,30170,288,30157,290,30145,293,30134,298,30120,294,30107,292,30096,297,30082,293,30069,291,30057,290,30045,296,30033,296,30020,298,30008,300,29995,298,29983,303,29969,294,29957,297,29945,301,29933,303,29921,306,29907,302,29895,307,29882,302,29868,297,29856,303,29843,302,29831,308,29818,307,29803,293,29792,305,29778,302,29767,308,29755,312,29741,306,29728,306,29714,304,29702,305,29689,304,29675,299,29664,311,29652,315,29639,314,29626,313,29613,311,29599,308,29587,312,29575,316,29561,313,29548,311,29536,315,29523,313,29511,316,29498,319,29484,311,29472,316,29460,321,29448,325,29433,315,29421,320,29408,321,29395,319,29381,312,29368,313,29355,315,29343,318,29332,324,29319,323,29306,323,29292,318,29281,327,29265,314,29253,318]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9207383,-89.07926,-0.0161,3.41],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":2.835},\"Min\":{\"x\":-35.13,\"z\":3.97},\"values\":[-0.9207,-89.08,-0.01607,3.406]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9206783,-89.07932,-0.0161,3.41],\"visualizationValues\":{\"Max\":{\"x\":35.52,\"z\":2.835},\"Min\":{\"x\":-35.13,\"z\":3.97},\"values\":[-0.9207,-89.08,-0.01607,3.406]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1840,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "534f53b3.f7207c",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia piccola 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia piccola 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":20113,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[3776,911572],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36319,179,36304,193,36291,191,36279,188,36265,192,36252,190,36238,198,36226,191,36215,183,36199,196,36186,198,36174,192,36163,185,36148,195,36135,194,36124,184,36110,191,36097,190,36084,191,36070,195,36056,204,36043,203,36030,200,36018,198,36005,198,35992,197,35981,186,35970,177,35956,184,35942,191,35927,199,35915,197,35903,190,35888,199,35878,184,35866,181,35850,195,35837,197,35827,181,35813,188,35801,181,35788,180,35774,187,35760,193,35747,196,35734,195,35720,200,35708,196,35694,205,35683,191,35669,195,35656,200,35644,193,35631,193,35620,181,35609,173,35592,197,35580,195,35569,183,35557,176,35542,190,35531,184,35519,177,35504,194,35493,183,35480,185,35465,198,35453,196,35440,195,35428,195,35416,187,35402,196,35390,196,35377,194,35365,194,35353,186,35341,187,35327,193,35313,198,35303,187,35290,189,35275,201,35263,196,35251,194,35238,199,35227,188,35214,187,35202,184,35190,181,35176,190,35163,193,35152,183,35139,184,35126,183,35113,187,35101,182,35088,187,35075,188,35063,181,35050,188,35037,187,35024,188,35013,181,34999,186,34986,194,34973,196,34961,192,34948,190,34935,196,34923,189,34911,183,34897,199,34884,200,34872,193,34860,192,34847,193,34836,189,34823,191,34811,183,34799,180,34787,179,34773,191,34761,189,34748,191,34737,185,34724,186,34712,183,34700,183,34687,184,34675,185,34662,189,34649,195,34637,189,34624,191,34612,188,34599,197,34588,182,34575,183,34563,185,34551,181,34539,178,34526,179,34513,188,34499,203,34487,201,34475,192,34463,187,34451,185,34439,184,34426,189,34414,188,34401,187,34388,196,34376,186,34364,191,34352,185,34339,188,34328,179,34314,187,34301,198,34288,204,34276,195,34265,186,34252,186,34239,202,34226,207,34214,198,34203,183,34191,183,34177,192,34165,188,34153,190,34141,189,34129,187,34116,187,34104,187,34092,186,34079,197,34067,187,34054,199,34042,198,34031,182,34017,199,34006,188,33994,185,33981,188,33969,185,33957,182,33944,190,33932,193,33920,189,33907,199,33895,190,33883,194,33871,191,33859,185,33846,192,33833,202,33821,200,33809,195,33797,198,33785,188,33773,186,33761,191,33748,193,33736,197,33724,190,33712,191,33700,183,33687,190,33675,183,33663,184,33651,182,33638,189,33626,193,33613,195,33601,192,33590,179,33577,188,33564,191,33552,197,33540,189,33528,189,33516,188,33503,189,33491,191,33479,191,33466,193,33454,199,33441,212,33428,236,33414,284,33398,381,33385,419,33372,441,33359,475,33346,510,33332,566,33317,658,33303,709,33290,748,33278,779,33265,813,33251,876,33239,908,33226,952,33213,986,33200,1036,33188,1072,33175,1104,33163,1116,33151,1138,33140,1134,33128,1149,33117,1134,33105,1142,33094,1131,33083,1130,33071,1138,33059,1157,33048,1158,33036,1144,33025,1143,33014,1135,33002,1148,32991,1147,32979,1142,32968,1137,32956,1136,32945,1130,32933,1136,32922,1159,32910,1154,32899,1153,32887,1141,32876,1149,32864,1143,32853,1155,32841,1143,32830,1154,32818,1144,32807,1139,32795,1135,32784,1143,32772,1144,32761,1149,32749,1147,32738,1140,32726,1147,32715,1143,32704,1151,32692,1159,32681,1157,32669,1149,32657,1133,32646,1109,32634,1077,32622,1031,32610,993,32598,958,32586,933,32574,899,32562,870,32550,828,32538,786,32525,743,32513,720,32501,688,32488,642,32475,577,32463,545,32450,505,32437,480,32424,434,32411,410,32398,336,32384,268,32371,234,32359,224,32347,224,32335,222,32322,213,32310,213,32298,215,32286,218,32274,216,32261,213,32249,208,32237,219,32225,215,32213,215,32201,215,32188,216,32176,214,32165,227,32152,226,32140,217,32128,222,32116,225,32103,213,32091,211,32079,219,32067,226,32055,228,32043,230,32031,234,32019,228,32007,235,31994,231,31982,235,31970,230,31957,227,31945,219,31933,228,31921,229,31909,230,31897,234,31884,235,31872,234,31860,231,31847,227,31835,232,31824,242,31811,238,31799,242,31787,236,31774,233,31763,240,31750,240,31738,237,31725,233,31714,242,31701,239,31689,237,31677,243,31665,247,31653,250,31641,244,31628,243,31616,239,31604,244,31591,239,31580,254,31568,252,31555,247,31543,248,31531,249,31519,251,31506,245,31494,241,31482,248,31469,242,31457,244,31446,257,31434,256,31421,254,31408,236,31395,232,31384,247,31371,240,31359,242,31347,238,31335,250,31324,257,31311,259,31299,261,31286,254,31274,251,31261,252,31249,256,31237,255,31225,256,31212,253,31200,255,31188,257,31176,259,31164,263,31151,259,31139,267,31127,267,31115,268,31102,265,31089,258,31077,262,31065,269,31052,261,31039,254,31027,257,31015,261,31003,263,30991,265,30979,269,30966,268,30954,268,30941,263,30929,262,30916,261,30905,270,30893,272,30880,272,30868,274,30855,266,30843,269,30831,272,30819,273,30806,273,30794,272,30782,277,30770,277,30757,273,30744,272,30732,270,30720,274,30708,277,30696,281,30683,279,30671,278,30658,270,30645,268,30633,276,30620,271,30608,277,30596,279,30584,281,30572,284,30559,283,30547,288,30534,282,30521,282,30509,286,30496,279,30484,284,30471,281,30458,281,30446,282,30434,287,30421,288,30408,282,30396,284,30383,285,30370,284,30357,281,30345,283,30333,287,30320,286,30308,288,30296,288,30283,289,30271,293,30259,296,30246,296,30233,289,30220,289,30209,295,30195,290,30182,287,30170,290,30157,290,30145,289,30133,298,30120,295,30107,293,30096,297,30082,293,30069,286,30057,292,30045,297,30033,297,30020,300,30007,297,29995,298,29983,304,29969,295,29957,296,29945,300,29933,301,29921,307,29907,303,29895,306,29881,302,29867,294,29856,303,29843,302,29831,308,29818,307,29803,294,29792,304,29778,301,29766,307,29754,310,29740,304,29727,305,29714,302,29702,305,29689,303,29675,300,29664,311,29652,313,29638,311,29626,312,29613,311,29599,310,29587,311,29575,315,29561,311,29548,310,29536,315,29523,314,29511,320,29498,318,29483,310,29471,314,29459,318,29448,326,29433,314,29421,322,29408,321,29395,316,29380,310,29368,314,29356,316,29343,317,29331,322,29318,323,29304,317,29292,319,29281,328,29265,312,29253,320]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9293227,-89.07068,-0.0162,3.4],\"visualizationValues\":{\"Max\":{\"x\":35.53,\"z\":2.819},\"Min\":{\"x\":-35.13,\"z\":3.966},\"values\":[-0.9293,-89.07,-0.01622,3.396]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9292859,-89.07072,-0.0162,3.4],\"visualizationValues\":{\"Max\":{\"x\":35.53,\"z\":2.82},\"Min\":{\"x\":-35.13,\"z\":3.966},\"values\":[-0.9293,-89.07,-0.01622,3.396]}}]}]}",
        "payloadType": "json",
        "x": 1000,
        "y": 1880,
        "wires": [
            [
                "4b46381a.ab2708"
            ]
        ]
    },
    {
        "id": "d8c21e15.50b55",
        "type": "link out",
        "z": "50e3bf45.5484a",
        "name": "",
        "mode": "link",
        "links": [
            "e731f9de.515098"
        ],
        "x": 315,
        "y": 1660,
        "wires": []
    },
    {
        "id": "7e3f1f43.f9aee",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 1",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26140,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4081,647773],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36331,121,36320,114,36308,107,36294,112,36281,112,36269,106,36254,119,36240,123,36225,130,36213,126,36200,128,36187,126,36175,123,36161,126,36149,122,36138,113,36124,118,36112,112,36097,123,36085,117,36073,113,36058,121,36046,119,36033,117,36021,113,36006,125,35992,129,35980,125,35967,124,35955,121,35943,116,35928,127,35918,111,35904,113,35890,121,35876,125,35865,116,35850,127,35837,126,35826,118,35812,120,35800,114,35787,114,35774,116,35759,127,35746,128,35734,124,35721,123,35709,116,35694,129,35680,132,35668,130,35658,113,35644,120,35630,124,35617,124,35604,122,35591,124,35578,127,35567,121,35553,125,35540,129,35527,130,35515,128,35503,122,35490,126,35478,120,35465,121,35454,113,35439,127,35427,118,35413,129,35403,111,35389,121,35376,124,35363,123,35351,121,35337,128,35325,124,35311,130,35299,130,35284,142,35273,135,35260,136,35248,127,35235,133,35223,126,35211,126,35199,117,35185,129,35172,128,35160,128,35148,121,35134,131,35122,127,35109,124,35097,121,35084,123,35073,113,35059,118,35047,117,35034,122,35021,121,35009,118,34995,123,34981,136,34969,131,34957,129,34943,138,34930,142,34919,126,34905,133,34894,127,34880,133,34868,134,34856,125,34845,113,34831,126,34818,133,34806,129,34793,135,34780,136,34768,131,34756,127,34742,142,34730,139,34719,123,34707,124,34696,114,34682,121,34669,125,34656,135,34642,142,34630,145,34617,142,34606,132,34594,132,34581,131,34570,117,34557,124,34470,819,34457,832,34445,836,34426,899,34402,1020,34371,1206,34347,1331,34318,1498,34282,1742,34260,1851,34249,1856,34237,1856,34225,1871,34213,1879,34202,1876,34189,1889,34178,1896,34167,1890,34157,1882,34146,1881,34134,1890,34123,1884,34113,1877,34103,1868,34092,1866,34081,1866,34069,1874,34058,1878,34046,1882,34035,1883,34024,1881,34012,1893,34001,1892,33990,1901,33979,1895,33969,1888,33959,1877,33948,1868,33937,1871,33924,1895,33913,1890,33902,1896,33891,1893,33880,1889,33868,1904,33858,1895,33847,1890,33836,1889,33825,1887,33815,1883,33804,1876,33793,1880,33781,1896,33769,1899,33759,1894,33748,1888,33737,1894,33725,1897,33714,1897,33704,1883,33694,1876,33682,1889,33671,1885,33660,1881,33649,1890,33638,1882,33626,1902,33615,1903,33604,1902,33594,1890,33583,1886,33572,1890,33560,1898,33549,1898,33539,1877,33527,1892,33516,1893,33505,1898,33495,1886,33483,1901,33472,1904,33461,1903,33450,1905,33439,1913,33428,1908,33417,1905,33406,1901,33395,1897,33384,1901,33373,1901,33362,1903,33352,1901,33341,1898,33330,1896,33319,1905,33308,1908,33297,1911,33286,1904,33275,1896,33264,1894,33253,1894,33243,1890,33231,1895,33220,1903,33209,1905,33198,1905,33188,1898,33176,1904,33166,1902,33155,1905,33144,1907,33133,1908,33122,1899,33111,1897,33100,1893,33089,1893,33078,1898,33067,1899,33056,1901,33045,1900,33034,1901,33023,1913,33012,1911,33002,1905,32991,1910,32980,1895,32969,1896,32958,1893,32947,1900,32936,1899,32925,1912,32914,1920,32903,1927,32892,1930,32881,1935,32870,1928,32859,1916,32848,1910,32838,1901,32827,1907,32816,1910,32805,1909,32794,1918,32783,1918,32772,1918,32761,1923,32750,1922,32739,1923,32728,1920,32717,1915,32706,1908,32695,1905,32685,1913,32674,1908,32663,1914,32652,1916,32641,1920,32630,1920,32619,1926,32608,1926,32597,1927,32586,1928,32575,1917,32564,1914,32553,1918,32542,1913,32532,1913,32521,1916,32510,1916,32499,1920,32488,1921,32477,1924,32466,1931,32455,1929,32444,1925,32434,1934,32423,1925,32411,1909,32400,1914,32390,1926,32379,1930,32368,1920,32357,1921,32346,1935,32335,1938,32325,1938,32314,1936,32303,1939,32292,1933,32281,1928,32270,1929,32259,1927,32248,1931,32237,1932,32226,1927,32215,1935,32205,1939,32194,1943,32183,1947,32172,1940,32161,1942,32150,1929,32138,1916,32128,1925,32117,1929,32106,1931,32095,1926,32084,1929,32073,1930,32063,1941,32052,1940,32041,1941,32030,1941,32019,1939,32008,1935,31997,1934,31985,1919,31974,1923,31963,1931,31952,1926,31942,1941,31931,1941,31919,1932,31909,1949,31898,1948,31888,1955,31876,1949,31865,1942,31854,1935,31842,1926,31832,1935,31821,1942,31810,1940,31799,1949,31788,1943,31777,1945,31766,1943,31756,1951,31745,1957,31734,1956,31723,1960,31712,1952,31700,1943,31690,1949,31679,1951,31668,1949,31656,1944,31646,1948,31635,1954,31624,1954,31613,1959,31602,1956,31591,1956,31580,1952,31568,1946,31557,1945,31546,1944,31535,1945,31524,1947,31514,1950,31503,1952,31492,1958,31482,1968,31471,1964,31460,1965,31449,1963,31437,1950,31425,1941,31414,1940,31403,1941,31392,1943,31382,1950,31371,1957,31361,1960,31350,1961,31338,1960,31328,1965,31317,1965,31306,1966,31294,1964,31282,1958,31271,1954,31260,1955,31248,1945,31236,1935,31216,1852,31190,1712,31169,1619,31150,1548,31133,1492,31114,1423,31095,1354,31079,1308,31058,1225,31040,1163,31022,1113,31002,1034,30973,881,30960,869,30858,187,30850,224,30839,232,30827,241,30813,228,30801,230,30790,238,30777,236,30765,235,30751,226,30740,237,30727,233,30716,241,30704,242,30690,232,30678,236,30666,240,30653,235,30641,238,30629,242,30616,236,30603,233,30591,242,30578,234,30565,236,30553,242,30541,242,30529,251,30515,239,30503,239,30491,244,30478,244,30465,243,30453,248,30440,241,30427,237,30416,248,30403,250,30391,252,30378,248,30365,244,30353,253,30341,252,30328,249,30315,249,30303,257,30291,256,30278,252,30265,253,30251,244,30239,245,30226,246,30214,248,30201,245,30189,251,30176,245,30164,254,30151,251,30139,251,30126,251,30114,256,30101,254,30090,260,30076,257,30064,257,30051,257,30039,259,30026,258,30014,260,30000,252,29989,261,29975,255,29962,254,29951,261,29938,257,29925,259,29913,260,29899,256,29887,259,29876,269,29862,265,29849,263,29836,265,29824,267,29812,275,29800,277,29788,283,29772,269,29760,272,29746,266,29735,278,29723,279,29709,278,29696,275,29683,275,29671,279,29657,275,29644,274,29631,271,29620,281,29607,280,29595,284,29581,282,29567,273,29556,284,29543,286,29531,288,29518,290,29505,287,29491,285,29479,289,29466,287,29451,279,29440,286,29427,285,29414,284,29401,285,29388,285,29375,286,29363,289,29352,299,29339,298,29327,302,29312,291,29299,294,29288,300,29275,299,29262,299,29248,297]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-2.207681,-87.79232,-0.0386,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.65,\"z\":9.354},\"Min\":{\"x\":-35.18,\"z\":12.08},\"values\":[-2.208,-87.79,-0.03855,10.73]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "2af1c537.96161a",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 2",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":26323,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4091,267183],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36328,135,36314,139,36301,142,36289,135,36276,135,36265,128,36251,132,36238,134,36225,130,36211,139,36199,134,36187,126,36175,125,36158,143,36146,137,36134,131,36122,126,36110,123,36095,135,36084,125,36069,134,36055,137,36042,137,36032,122,36018,129,36004,135,35992,132,35979,129,35966,131,35953,130,35938,139,35928,125,35915,125,35903,121,35889,125,35877,122,35862,133,35849,133,35835,137,35821,145,35811,124,35797,133,35785,127,35771,131,35759,130,35744,137,35731,139,35719,132,35707,128,35693,133,35680,132,35668,130,35653,139,35642,128,35628,134,35616,131,35601,140,35590,131,35578,129,35565,129,35550,143,35536,151,35527,131,35514,132,35502,127,35487,142,35476,132,35463,133,35451,132,35438,134,35425,131,35413,129,35402,117,35387,134,35374,134,35362,133,35348,140,35336,137,35323,140,35311,134,35297,139,35285,135,35272,136,35259,138,35249,126,35235,133,35222,137,35209,137,35198,128,35186,122,35172,132,35160,127,35146,131,35134,129,35121,128,35107,137,35096,129,35083,132,35070,135,35058,129,35046,128,35031,137,35019,137,35006,138,34993,144,34981,136,34969,131,34957,126,34945,124,34931,131,34917,140,34905,137,34892,140,34880,137,34868,134,34854,139,34841,148,34829,146,34817,141,34805,136,34792,140,34780,133,34769,126,34756,132,34742,142,34729,145,34717,141,34703,153,34691,150,34680,140,34669,130,34655,141,34642,141,34631,130,34620,123,34607,129,34594,131,34581,131,34568,142,34556,132,34544,131,34531,137,34518,138,34506,138,34493,144,34481,139,34469,134,34457,134,34444,136,34431,140,34419,135,34407,134,34394,136,34382,134,34368,144,34357,138,34344,144,34331,147,34320,128,34307,136,34294,136,34281,145,34270,133,34257,139,34245,138,34232,135,34219,144,34207,143,34195,138,34182,144,34170,139,34158,139,34146,124,34133,139,34121,139,34108,139,34096,133,34083,142,34071,140,34059,143,34047,134,34034,140,34022,143,34009,144,33998,139,33985,136,33973,142,33961,135,33948,141,33935,150,33923,143,33911,141,33899,146,33886,147,33874,145,33863,135,33850,140,33838,139,33825,142,33813,143,33801,142,33788,145,33776,144,33764,141,33752,136,33739,144,33726,149,33714,145,33702,146,33690,137,33678,132,33666,135,33654,133,33641,132,33629,138,33616,146,33604,139,33592,140,33580,133,33568,118,33524,790,33512,793,33499,815,33487,826,33474,849,33458,958,33440,1106,33425,1198,33410,1280,33395,1359,33381,1433,33367,1515,33350,1658,33334,1791,33321,1848,33309,1867,33298,1872,33287,1878,33276,1882,33265,1877,33254,1877,33243,1886,33232,1888,33221,1886,33210,1892,33199,1892,33188,1884,33177,1881,33166,1884,33155,1885,33144,1882,33133,1891,33122,1889,33111,1892,33100,1901,33089,1894,33078,1896,33067,1888,33056,1890,33045,1898,33035,1888,33024,1874,33013,1885,33002,1892,32991,1898,32980,1901,32969,1898,32958,1898,32947,1897,32936,1897,32925,1898,32914,1894,32903,1894,32892,1891,32881,1895,32870,1898,32859,1897,32849,1894,32838,1901,32827,1899,32816,1905,32805,1900,32794,1904,32783,1910,32772,1904,32761,1893,32750,1893,32739,1893,32728,1907,32717,1898,32706,1903,32695,1902,32684,1901,32674,1905,32663,1911,32652,1911,32641,1919,32630,1911,32619,1904,32608,1905,32597,1901,32586,1904,32575,1908,32564,1906,32553,1910,32542,1909,32531,1910,32521,1912,32510,1913,32499,1916,32488,1909,32477,1904,32466,1900,32455,1907,32444,1917,32433,1908,32422,1908,32411,1920,32401,1927,32390,1927,32379,1927,32368,1920,32357,1921,32346,1929,32335,1922,32324,1910,32313,1899,32302,1911,32291,1907,32280,1911,32269,1912,32259,1922,32248,1939,32237,1937,32226,1930,32215,1918,32204,1924,32193,1917,32182,1909,32171,1915,32160,1918,32149,1921,32139,1934,32128,1933,32117,1936,32106,1933,32095,1932,32084,1937,32073,1925,32062,1922,32051,1925,32040,1915,32028,1910,32018,1919,32007,1927,31997,1936,31986,1937,31974,1932,31964,1935,31952,1930,31941,1932,31930,1933,31919,1921,31908,1921,31897,1928,31886,1919,31875,1926,31865,1936,31854,1943,31843,1944,31832,1944,31821,1948,31810,1946,31799,1939,31788,1940,31777,1940,31766,1941,31755,1942,31744,1935,31733,1937,31722,1939,31711,1947,31701,1949,31689,1946,31679,1953,31668,1949,31657,1951,31645,1947,31634,1935,31623,1945,31612,1946,31601,1939,31591,1948,31580,1952,31569,1958,31558,1960,31547,1951,31536,1959,31526,1962,31514,1950,31502,1945,31491,1941,31481,1952,31470,1951,31459,1951,31448,1954,31437,1948,31426,1959,31416,1962,31404,1957,31394,1964,31382,1951,31371,1951,31360,1949,31349,1954,31338,1955,31326,1951,31315,1950,31304,1953,31293,1952,31283,1964,31271,1955,31261,1963,31250,1967,31238,1959,31227,1960,31215,1951,31203,1946,31193,1951,31181,1950,31170,1946,31159,1948,31149,1963,31139,1967,31128,1972,31117,1971,31106,1971,31094,1965,31082,1959,31070,1955,31059,1957,31048,1958,31037,1957,31027,1963,31014,1955,31005,1974,30995,1983,30984,1983,30972,1975,30960,1966,30949,1968,30938,1967,30925,1958,30914,1958,30904,1963,30892,1961,30880,1955,30870,1963,30861,1977,30850,1981,30840,1984,30828,1982,30817,1980,30805,1976,30793,1970,30780,1959,30770,1967,30760,1970,30747,1961,30737,1971,30726,1966,30715,1970,30705,1980,30694,1982,30684,1988,30672,1979,30661,1984,30648,1972,30636,1967,30627,1982,30615,1975,30602,1968,30592,1979,30581,1980,30569,1976,30559,1985,30548,1989,30537,1988,30527,1997,30513,1984,30501,1975,30489,1974,30478,1978,30468,1987,30457,1986,30444,1979,30434,1983,30425,2001,30413,1994,30399,1978,30387,1979,30374,1969,30364,1972,30352,1969,30341,1976,30331,1980,30322,1995,30309,1985,30296,1976,30272,1899,30278,2007,30188,1535,30161,1447,30134,1354,30108,1268,30075,1145,30040,1011,30015,937,30000,919,29872,247,29863,272,29849,263,29836,262,29823,265,29810,265,29798,267,29784,260,29772,269,29759,264,29746,268,29736,279,29723,280,29708,271,29696,275,29681,265,29669,268,29658,277,29644,273,29630,269,29619,275,29605,273,29593,276,29580,275,29566,270,29554,273,29541,277,29530,286,29516,280,29503,280,29491,282,29478,284,29465,281,29452,283,29438,277,29428,288,29414,287,29401,286,29387,280,29376,290,29363,288,29348,280,29337,287,29323,281,29311,286,29298,288,29286,293,29273,291,29260,292,29248,295]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.11872,-75.88127,-0.252,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.864},\"Min\":{\"x\":-35.19,\"z\":19.67},\"values\":[-14.12,-75.88,-0.2515,10.82]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.11037,-75.88963,-0.251,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.872},\"Min\":{\"x\":-35.19,\"z\":19.67},\"values\":[-14.11,-75.89,-0.2514,10.82]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1720,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "577f974.8150b68",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 3",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27029,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4127,620825],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36331,122,36319,119,36305,123,36293,117,36282,110,36272,96,36256,106,36242,112,36228,119,36214,123,36202,118,36190,112,36177,112,36165,106,36150,117,36138,115,36125,112,36112,112,36100,108,36086,112,36072,116,36061,110,36045,122,36033,120,36023,105,36007,119,35994,119,35982,112,35967,123,35954,123,35941,123,35929,118,35917,114,35904,117,35891,116,35879,112,35865,116,35852,113,35841,107,35827,109,35813,113,35798,124,35788,113,35776,105,35762,113,35749,111,35736,112,35723,112,35710,109,35696,116,35684,110,35669,126,35657,117,35646,107,35633,105,35618,116,35605,117,35592,120,35579,123,35566,124,35554,118,35541,123,35530,113,35517,115,35504,113,35492,108,35478,116,35465,118,35453,118,35437,136,35427,122,35414,121,35402,119,35390,114,35376,123,35363,126,35350,129,35338,122,35326,120,35312,124,35300,121,35287,123,35275,121,35262,119,35250,115,35237,115,35223,127,35211,120,35201,107,35187,116,35174,116,35161,119,35148,121,35136,113,35123,117,35110,121,35098,117,35084,123,35073,116,35060,112,35050,97,35034,120,35022,115,35008,124,34996,116,34983,119,34971,118,34959,115,34946,117,34932,123,34920,120,34907,119,34896,109,34882,118,34868,127,34855,132,34844,122,34832,119,34819,123,34806,125,34794,121,34784,102,34686,813,34677,791,34662,817,34647,844,34615,1016,34579,1226,34546,1413,34509,1635,34478,1812,34462,1848,34449,1865,34438,1863,34428,1859,34416,1859,34405,1858,34393,1869,34381,1874,34370,1874,34361,1856,34349,1861,34336,1881,34326,1869,34315,1868,34304,1859,34292,1868,34283,1850,34271,1858,34259,1869,34246,1881,34236,1873,34225,1872,34214,1865,34203,1869,34191,1871,34180,1875,34169,1869,34157,1876,34146,1875,34136,1868,34125,1866,34114,1864,34102,1879,34092,1871,34080,1881,34069,1881,34059,1863,34047,1872,34036,1875,34025,1872,34015,1867,34004,1865,33992,1875,33980,1881,33968,1891,33958,1888,33947,1881,33936,1881,33925,1876,33915,1872,33903,1881,33893,1872,33882,1873,33871,1869,33859,1880,33848,1880,33837,1876,33826,1874,33814,1890,33803,1893,33792,1889,33781,1885,33771,1880,33760,1881,33749,1876,33738,1877,33727,1880,33715,1887,33704,1883,33693,1881,33682,1880,33671,1889,33660,1889,33649,1890,33638,1893,33627,1885,33617,1870,33606,1869,33595,1867,33584,1860,33572,1883,33561,1889,33550,1886,33539,1890,33527,1891,33516,1895,33505,1900,33494,1898,33483,1899,33473,1889,33462,1885,33451,1886,33440,1876,33430,1861,33419,1871,33407,1882,33396,1888,33385,1897,33374,1888,33363,1889,33352,1893,33341,1900,33330,1888,33319,1892,33308,1890,33297,1890,33286,1893,33275,1892,33264,1898,33253,1898,33242,1904,33231,1906,33220,1910,33210,1894,33199,1893,33188,1890,33177,1892,33166,1893,33155,1885,33144,1886,33133,1894,33122,1905,33111,1911,33100,1902,33089,1902,33078,1905,33067,1897,33056,1897,33045,1894,33035,1883,33024,1886,33013,1890,33002,1880,32991,1890,32980,1897,32969,1897,32958,1904,32947,1906,32936,1902,32925,1902,32914,1901,32903,1901,32892,1898,32881,1897,32870,1893,32859,1906,32849,1900,32838,1904,32827,1904,32816,1905,32805,1911,32794,1908,32783,1910,32772,1906,32761,1902,32750,1902,32739,1899,32728,1907,32717,1906,32706,1903,32695,1913,32685,1917,32674,1913,32663,1909,32652,1910,32641,1914,32630,1908,32619,1907,32608,1892,32597,1908,32586,1914,32575,1908,32564,1909,32553,1917,32543,1915,32532,1917,32520,1905,32510,1924,32499,1929,32488,1916,32477,1918,32466,1915,32455,1916,32444,1905,32433,1908,32422,1918,32412,1922,32401,1919,32390,1921,32379,1924,32368,1914,32357,1924,32346,1923,32335,1922,32324,1924,32313,1923,32302,1919,32291,1921,32281,1925,32270,1932,32259,1933,32248,1929,32237,1932,32226,1931,32215,1924,32204,1937,32194,1936,32182,1933,32171,1923,32160,1913,32149,1907,32138,1914,32127,1922,32117,1924,32106,1932,32095,1935,32084,1933,32073,1934,32062,1929,32051,1929,32040,1934,32029,1925,32018,1924,32007,1925,31996,1924,31985,1925,31974,1927,31964,1935,31953,1936,31942,1942,31930,1932,31919,1930,31908,1930,31898,1935,31887,1937,31875,1932,31865,1936,31853,1930,31843,1937,31832,1934,31821,1939,31810,1937,31799,1942,31788,1939,31776,1931,31766,1938,31755,1942,31744,1937,31733,1942,31722,1939,31710,1931,31699,1931,31689,1943,31679,1949,31668,1953,31657,1952,31645,1944,31634,1947,31623,1944,31613,1951,31601,1945,31590,1944,31579,1948,31568,1945,31557,1940,31546,1940,31536,1953,31525,1958,31514,1954,31503,1951,31492,1952,31481,1955,31468,1933,31456,1919,31438,1841,31417,1729,31400,1663,31382,1588,31366,1533,31350,1477,31332,1406,31313,1330,31296,1270,31281,1232,31264,1180,31246,1115,31228,1047,31205,940,31188,882,31175,870,31094,190,31085,217,31074,229,31060,220,31047,215,31036,220,31023,218,31010,217,30998,218,30986,217,30973,215,30961,220,30949,224,30937,222,30924,218,30912,221,30899,222,30888,227,30875,222,30862,220,30849,218,30837,222,30825,222,30812,219,30801,224,30788,226,30776,225,30764,228,30751,227,30739,224,30726,227,30714,229,30702,231,30690,229,30678,232,30665,230,30653,235,30640,231,30628,234,30615,234,30603,235,30589,228,30577,231,30566,242,30553,237,30540,238,30527,234,30515,237,30503,239,30491,245,30477,237,30464,237,30452,238,30440,242,30428,244,30414,239,30401,238,30389,241,30376,238,30364,239,30352,241,30340,247,30327,244,30314,244,30302,244,30290,252,30277,249,30265,252,30251,243,30239,248,30226,244,30214,251,30202,254,30189,249,30176,250,30163,245,30151,252,30139,255,30126,254,30114,253,30101,255,30088,248,30077,261,30065,262,30051,255,30038,252,30025,250,30014,259,30001,257,29988,256,29975,254,29963,255,29950,256,29937,256,29924,251,29912,255,29898,252,29887,258,29873,255,29860,255,29847,253,29835,259,29822,257,29810,261,29797,263,29784,260,29771,262,29759,264,29746,267,29732,261,29720,265,29708,268,29695,268,29683,272,29669,271,29656,270,29642,264,29629,260,29617,267,29605,270,29593,275,29578,266,29567,277,29555,278,29542,278,29530,282,29515,274,29503,277,29490,280,29476,272,29463,271,29451,278,29438,275,29425,275,29413,278,29400,281,29387,278,29374,280,29361,281,29348,281,29335,280,29323,284,29309,278,29297,280,29284,281,29271,281,29258,283,29245,280]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[0.5390239,89.46098,0.00941,10.6],\"visualizationValues\":{\"Max\":{\"x\":35.64,\"z\":10.95},\"Min\":{\"x\":-35.22,\"z\":10.29},\"values\":[0.539,89.46,0.009408,10.62]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[0.5390239,89.46098,0.00941,10.6],\"visualizationValues\":{\"Max\":{\"x\":35.64,\"z\":10.95},\"Min\":{\"x\":-35.22,\"z\":10.29},\"values\":[0.539,89.46,0.009408,10.62]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "7ebccc6e.26cb24",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 4",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27313,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4142,537067],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36333,112,36322,101,36308,108,36298,95,36280,119,36270,104,36255,114,36242,111,36228,117,36218,103,36204,107,36189,118,36176,118,36163,118,36154,96,36138,111,36126,109,36115,100,36101,103,36088,102,36073,114,36059,117,36048,107,36037,101,36022,107,36009,106,35997,105,35983,110,35969,112,35957,110,35943,115,35931,110,35917,113,35905,112,35891,112,35879,110,35866,108,35854,106,35839,114,35826,113,35813,114,35801,111,35788,108,35775,112,35761,114,35747,120,35735,115,35723,112,35710,114,35696,117,35685,105,35671,109,35657,116,35645,113,35632,113,35621,101,35605,120,35593,117,35579,124,35568,112,35555,111,35542,115,35531,104,35515,125,35503,120,35490,123,35479,116,35464,124,35451,128,35441,113,35429,105,35416,111,35402,120,35389,119,35377,113,35364,119,35351,117,35338,124,35324,129,35314,113,35302,106,35289,107,35276,110,35263,112,35251,111,35238,115,35226,108,35211,125,35199,121,35187,111,35173,122,35162,112,35148,118,35136,112,35123,117,35112,107,35097,122,35084,127,35073,113,35061,108,35047,115,35035,112,35022,118,35009,115,34997,112,34983,120,34971,116,34961,96,34945,118,34932,121,34920,120,34907,124,34894,120,34882,117,34869,120,34857,122,34845,112,34833,109,34821,111,34808,115,34795,119,34782,123,34769,126,34758,116,34745,119,34731,129,34718,133,34707,124,34694,130,34681,131,34668,133,34582,786,34568,797,34556,804,34541,826,34523,886,34487,1105,34450,1336,34407,1629,34376,1821,34362,1846,34349,1865,34337,1869,34328,1850,34315,1865,34304,1863,34292,1872,34280,1875,34268,1885,34258,1873,34247,1874,34236,1872,34226,1862,34214,1867,34204,1851,34192,1863,34181,1861,34169,1874,34157,1875,34146,1875,34135,1880,34124,1874,34114,1872,34103,1870,34092,1865,34080,1871,34070,1869,34059,1868,34047,1869,34036,1872,34025,1877,34013,1884,34002,1880,33993,1863,33981,1870,33969,1883,33959,1875,33948,1873,33937,1876,33926,1870,33915,1867,33904,1866,33893,1869,33881,1883,33869,1892,33858,1894,33847,1887,33836,1891,33825,1892,33814,1894,33802,1903,33792,1890,33782,1879,33771,1870,33760,1878,33748,1883,33738,1881,33726,1884,33715,1889,33703,1899,33692,1897,33681,1902,33671,1885,33659,1898,33648,1898,33638,1890,33627,1894,33616,1892,33604,1896,33594,1892,33583,1892,33571,1893,33560,1901,33549,1897,33538,1906,33527,1906,33516,1909,33505,1893,33495,1889,33484,1886,33472,1892,33462,1889,33451,1890,33439,1899,33428,1900,33417,1906,33406,1902,33395,1902,33384,1903,33374,1897,33363,1893,33352,1889,33341,1892,33330,1895,33319,1892,33308,1898,33297,1901,33286,1906,33275,1911,33264,1909,33253,1906,33242,1909,33231,1910,33220,1904,33210,1897,33198,1901,33188,1901,33176,1906,33165,1909,33155,1904,33143,1914,33133,1913,33122,1910,33111,1907,33100,1911,33089,1904,33078,1908,33067,1908,33056,1908,33045,1913,33034,1918,33023,1916,33012,1925,33001,1919,32990,1914,32979,1918,32968,1922,32958,1921,32947,1919,32936,1918,32925,1904,32914,1914,32903,1913,32892,1914,32881,1920,32870,1909,32859,1921,32848,1925,32837,1922,32827,1924,32816,1917,32805,1923,32794,1919,32783,1918,32772,1929,32761,1921,32750,1916,32739,1926,32728,1926,32717,1932,32706,1937,32696,1930,32685,1925,32674,1929,32663,1928,32652,1933,32641,1927,32630,1923,32619,1920,32608,1933,32597,1936,32586,1931,32575,1931,32565,1938,32554,1936,32543,1938,32532,1943,32521,1928,32510,1932,32499,1929,32488,1921,32477,1922,32466,1929,32456,1936,32445,1943,32434,1947,32423,1946,32412,1935,32401,1941,32390,1942,32379,1940,32368,1940,32357,1932,32346,1935,32336,1939,32325,1943,32314,1952,32303,1943,32292,1940,32281,1946,32270,1948,32260,1952,32248,1947,32238,1946,32227,1945,32215,1939,32205,1939,32194,1947,32183,1942,32172,1947,32161,1944,32150,1949,32140,1954,32129,1953,32118,1949,32107,1955,32096,1961,32085,1954,32074,1941,32063,1941,32052,1947,32041,1943,32030,1948,32020,1955,32009,1956,31997,1952,31986,1953,31975,1952,31965,1954,31953,1948,31942,1950,31932,1954,31921,1956,31909,1950,31898,1950,31888,1955,31877,1959,31866,1964,31855,1962,31844,1962,31833,1961,31822,1965,31811,1961,31800,1963,31789,1964,31779,1966,31767,1963,31757,1969,31746,1967,31734,1961,31724,1963,31712,1959,31701,1956,31690,1952,31680,1964,31669,1964,31658,1963,31647,1962,31636,1963,31625,1966,31614,1972,31603,1967,31592,1964,31581,1968,31570,1966,31559,1972,31548,1971,31538,1973,31526,1970,31515,1962,31504,1969,31494,1977,31483,1980,31472,1978,31461,1975,31450,1973,31439,1975,31429,1986,31418,1984,31406,1979,31394,1970,31385,1985,31374,1983,31363,1981,31346,1923,31325,1822,31307,1749,31289,1679,31272,1624,31253,1549,31236,1489,31218,1425,31201,1372,31183,1300,31166,1249,31148,1194,31132,1153,31114,1087,31097,1038,30990,142,30973,109,30965,144,30962,227,30951,244,30939,246,30927,243,30913,233,30900,229,30887,226,30876,237,30864,238,30851,231,30839,231,30827,240,30815,241,30802,241,30790,236,30777,231,30765,236,30752,234,30740,236,30728,237,30716,243,30703,237,30690,230,30678,239,30665,234,30654,243,30641,239,30629,246,30617,249,30603,239,30591,239,30578,239,30566,243,30553,237,30541,241,30529,248,30517,252,30504,253,30492,256,30479,250,30465,244,30453,248,30441,248,30428,249,30417,255,30403,248,30392,257,30377,246,30366,255,30354,255,30341,253,30328,253,30316,259,30303,256,30291,257,30279,260,30266,257,30252,251,30239,250,30227,253,30215,258,30203,259,30189,254,30178,261,30163,249,30152,254,30139,256,30128,261,30115,260,30101,252,30089,255,30076,257,30064,259,30050,251,30038,252,30025,251,30014,263,30002,266,29988,257,29976,259,29963,257,29950,255,29939,265,29926,263,29912,257,29900,259,29886,255,29873,257,29861,259,29847,254,29835,260,29822,260,29810,264,29798,271,29785,268,29772,269,29758,263,29746,266,29734,268,29721,269,29708,267,29695,267,29682,268,29669,267,29656,269,29643,269,29631,274,29618,270,29607,281,29593,274,29579,272,29567,276,29556,284,29543,287,29529,281,29516,278,29503,281,29491,280,29479,286,29465,283,29450,274,29437,272,29425,277,29413,279,29400,278,29387,282,29373,277,29360,276,29349,282,29334,272,29322,279,29310,284,29297,281,29284,281,29271,281,29258,281,29246,285]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9331746,-89.06683,-0.0163,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.67,\"z\":10.12},\"Min\":{\"x\":-35.21,\"z\":11.27},\"values\":[-0.9332,-89.07,-0.01629,10.7]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-0.9334166,-89.06658,-0.0163,10.7],\"visualizationValues\":{\"Max\":{\"x\":35.67,\"z\":10.12},\"Min\":{\"x\":-35.21,\"z\":11.27},\"values\":[-0.9334,-89.07,-0.01629,10.7]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1800,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "afcc3d39.22a87",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 5",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":27581,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4156,527370],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36330,126,36322,104,36308,109,36298,95,36281,111,36268,115,36257,105,36241,115,36226,127,36216,113,36202,116,36192,104,36176,116,36161,126,36150,120,36141,98,36123,122,36110,123,36099,115,36085,117,36072,116,36059,119,36047,116,36034,115,36021,113,36008,116,35994,118,35981,118,35968,117,35955,118,35943,113,35929,121,35916,120,35905,111,35891,114,35877,122,35864,119,35851,118,35840,110,35826,116,35811,125,35800,117,35786,121,35774,115,35761,116,35749,109,35734,121,35722,116,35708,120,35695,120,35683,117,35669,121,35658,112,35645,114,35632,112,35618,118,35604,124,35591,127,35581,112,35566,122,35555,111,35542,116,35531,104,35516,117,35501,132,35492,111,35476,129,35465,118,35451,132,35437,136,35426,127,35414,119,35403,110,35389,121,35375,127,35364,119,35350,127,35338,121,35325,124,35312,127,35300,122,35286,131,35275,117,35263,117,35249,125,35237,116,35224,123,35210,130,35200,114,35187,117,35173,119,35161,121,35147,127,35136,118,35122,123,35109,124,35097,124,35085,114,35072,117,35059,125,35047,115,35035,111,35023,108,35008,122,34996,116,34983,125,34970,121,34957,126,34944,125,34932,122,34919,129,34905,133,34894,122,34882,119,34870,114,34857,119,34845,112,34832,123,34818,128,34808,115,34794,122,34783,116,34770,116,34757,118,34744,122,34732,119,34720,117,34707,119,34695,115,34682,121,34669,124,34657,121,34645,116,34632,126,34620,121,34607,128,34595,124,34581,132,34569,131,34557,128,34545,120,34533,116,34521,117,34508,118,34495,122,34481,134,34471,118,34457,126,34445,124,34432,128,34420,126,34407,129,34395,129,34382,128,34371,122,34357,134,34346,124,34333,126,34320,134,34309,119,34296,120,34282,136,34270,137,34257,140,34245,135,34234,123,34220,131,34208,126,34195,141,34183,129,34170,136,34157,140,34146,135,34133,139,34069,778,34055,796,34043,800,34030,818,34015,861,33994,979,33971,1126,33950,1260,33893,1861,33891,1746,33877,1782,33861,1856,33849,1866,33838,1868,33826,1880,33815,1883,33803,1885,33793,1880,33782,1880,33771,1880,33760,1882,33749,1876,33738,1869,33727,1874,33716,1866,33705,1872,33694,1868,33682,1879,33671,1882,33660,1878,33649,1882,33638,1893,33627,1888,33616,1884,33605,1884,33594,1882,33583,1884,33572,1874,33562,1868,33551,1866,33539,1888,33528,1890,33516,1896,33505,1898,33495,1886,33483,1891,33473,1884,33462,1876,33451,1885,33440,1881,33429,1879,33418,1887,33407,1885,33396,1885,33384,1900,33374,1898,33363,1897,33352,1901,33341,1894,33330,1883,33319,1906,33308,1896,33297,1903,33286,1895,33275,1892,33264,1894,33253,1894,33242,1899,33232,1892,33221,1895,33209,1904,33198,1902,33187,1902,33176,1904,33166,1897,33155,1894,33144,1895,33133,1902,33122,1896,33111,1900,33100,1904,33089,1906,33078,1905,33067,1910,33056,1916,33045,1914,33034,1913,33023,1910,33012,1912,33001,1908,32991,1903,32980,1899,32969,1910,32958,1912,32947,1915,32936,1917,32925,1919,32914,1912,32903,1922,32892,1920,32881,1917,32870,1915,32859,1905,32848,1914,32838,1899,32827,1913,32816,1916,32805,1922,32794,1926,32783,1930,32772,1931,32761,1939,32750,1929,32739,1914,32728,1909,32717,1915,32706,1915,32696,1921,32685,1927,32674,1926,32663,1930,32652,1933,32641,1927,32630,1934,32619,1933,32608,1931,32597,1922,32586,1918,32575,1927,32565,1933,32554,1931,32543,1925,32532,1918,32521,1939,32510,1941,32499,1945,32488,1948,32478,1952,32466,1935,32455,1932,32445,1932,32434,1934,32423,1937,32412,1945,32401,1940,32390,1939,32379,1938,32368,1940,32358,1948,32347,1944,32336,1943,32325,1937,32314,1941,32303,1941,32292,1938,32281,1942,32270,1945,32260,1955,32249,1951,32238,1947,32227,1948,32216,1944,32205,1944,32194,1941,32183,1949,32172,1943,32161,1942,32150,1942,32139,1941,32128,1941,32118,1949,32107,1950,32096,1950,32085,1946,32074,1948,32063,1954,32052,1954,32041,1946,32030,1941,32019,1944,32008,1948,31997,1948,31986,1953,31976,1958,31965,1962,31954,1964,31943,1956,31932,1961,31921,1961,31910,1963,31899,1961,31888,1956,31876,1950,31865,1945,31854,1940,31844,1960,31834,1971,31823,1966,31812,1969,31801,1968,31790,1967,31779,1970,31767,1961,31756,1963,31746,1966,31734,1960,31724,1966,31713,1971,31702,1966,31691,1971,31680,1970,31670,1976,31659,1983,31648,1984,31637,1983,31625,1971,31614,1973,31603,1963,31592,1965,31581,1970,31571,1977,31560,1979,31549,1976,31538,1973,31527,1982,31517,1985,31506,1985,31495,1986,31484,1983,31473,1984,31462,1983,31450,1980,31439,1976,31428,1979,31418,1983,31407,1991,31396,1988,31386,1994,31375,2001,31365,2003,31353,1994,31342,1998,31330,1992,31319,1989,31308,1988,31296,1983,31285,1983,31275,1991,31264,1996,31253,1996,31242,1997,31232,2007,31221,2013,31209,2001,31198,2006,31187,2003,31176,2002,31164,1998,31153,1994,31141,1994,31130,1994,31120,2005,31110,2010,31098,2007,31087,2003,31076,2003,31065,2007,31054,2004,31043,2005,31031,1999,31019,1996,31009,2004,30998,2003,30987,2004,30976,2004,30965,2009,30955,2018,30944,2014,30933,2021,30921,2016,30911,2017,30899,2013,30887,2008,30876,2011,30866,2014,30853,2005,30840,1984,30816,1886,30787,1748,30765,1669,30744,1593,30724,1529,30703,1458,30684,1400,30663,1326,30643,1268,30621,1197,30596,1104,30575,1038,30535,923,30420,191,30416,251,30404,254,30391,252,30380,260,30366,254,30353,249,30342,262,30329,257,30316,254,30304,258,30291,260,30278,256,30267,268,30253,260,30240,253,30228,258,30214,250,30203,262,30190,259,30178,260,30164,254,30152,254,30139,255,30127,260,30115,259,30102,258,30090,263,30077,262,30065,265,30052,262,30039,258,30027,262,30014,261,30003,268,29990,269,29978,271,29965,270,29951,263,29939,263,29927,266,29913,262,29900,263,29887,259,29873,257,29861,259,29848,259,29836,262,29824,267,29810,264,29799,272,29786,273,29773,272,29761,275,29747,270,29735,273,29722,277,29709,273,29696,275,29682,270,29669,269,29657,272,29645,276,29630,267,29619,275,29606,276,29593,276,29581,279,29569,286,29557,288,29544,288,29531,289,29516,279,29502,275,29489,275,29477,276,29465,281,29452,280,29439,280,29426,279,29413,282,29401,287,29388,285,29376,288,29361,280,29347,275,29335,277,29321,274,29309,277,29298,287,29284,280,29271,281,29258,281,29244,278]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-7.617977,-82.38203,-0.134,10.9],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":6.08},\"Min\":{\"x\":-35.22,\"z\":15.56},\"values\":[-7.623,-82.38,-0.1338,10.85]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-7.622632,-82.37737,-0.134,10.8],\"visualizationValues\":{\"Max\":{\"x\":35.63,\"z\":6.08},\"Min\":{\"x\":-35.22,\"z\":15.56},\"values\":[-7.623,-82.38,-0.1338,10.85]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1840,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "e9869672.0298c8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 6",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":28504,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4204,277755],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,136,36315,134,36302,135,36289,137,36277,132,36263,139,36249,144,36237,135,36226,127,36210,141,36196,148,36184,142,36171,144,36159,140,36147,131,36137,118,36123,124,36109,130,36095,134,36081,137,36068,141,36053,148,36042,139,36028,147,36017,133,36005,130,35991,136,35979,128,35965,136,35950,145,35936,152,35923,150,35912,141,35900,135,35887,137,35874,137,35859,149,35846,151,35835,137,35820,146,35807,147,35794,151,35783,139,35770,139,35756,141,35744,137,35731,139,35718,141,35705,141,35691,145,35680,135,35667,134,35654,134,35640,140,35625,150,35613,150,35599,154,35587,149,35574,150,35561,153,35549,149,35536,153,35523,151,35509,163,35498,149,35485,155,35471,164,35460,149,35447,152,35433,161,35421,161,35409,152,35397,150,35384,150,35371,155,35358,156,35345,159,35332,159,35319,161,35306,163,35294,163,35283,149,35271,144,35257,157,35244,156,35232,151,35219,153,35206,153,35194,149,35183,143,35170,143,35157,146,35144,150,35131,150,35118,155,35106,149,35092,160,35080,150,35067,153,35054,157,35042,155,35030,151,35018,144,35004,155,34991,159,34978,156,34965,162,34952,161,34940,156,34927,158,34916,152,34901,164,34890,151,34876,167,34864,163,34852,161,34839,163,34828,153,34815,153,34803,154,34790,154,34778,154,34764,163,34753,153,34740,157,34728,152,34715,159,34702,161,34691,154,34677,169,34664,166,34653,162,34640,165,34628,158,34614,168,34602,169,34589,169,34578,160,34565,165,34552,168,34540,165,34528,162,34515,167,34502,172,34490,166,34477,171,34466,159,34453,170,34440,170,34430,151,34416,165,34404,162,34391,163,34379,162,34366,166,34354,166,34341,166,34329,168,34316,165,34304,167,34291,168,34280,162,34267,164,34255,162,34241,170,34229,170,34216,177,34204,171,34192,167,34179,176,34167,174,34155,168,34142,170,34130,170,34118,173,34106,170,34093,170,34081,173,34069,171,34057,165,34045,161,34032,168,34019,173,34007,179,33994,182,33982,182,33970,177,33958,171,33946,170,33933,180,33921,180,33909,173,33897,172,33884,182,33871,184,33859,186,33846,190,33835,184,33823,168,33810,179,33799,170,33786,177,33773,186,33761,185,33749,185,33736,186,33724,179,33712,178,33700,179,33688,177,33676,176,33664,170,33651,179,33638,186,33627,175,33614,181,33602,177,33590,171,33577,176,33565,185,33553,184,33541,176,33528,179,33516,185,33503,198,33491,189,33479,182,33467,188,33454,187,33415,880,33403,870,33392,869,33380,870,33368,865,33356,890,33343,922,33328,1018,33313,1131,33299,1185,33286,1250,33272,1311,33259,1354,33246,1427,33233,1483,33220,1548,33207,1611,33193,1719,33179,1830,33165,1909,33154,1927,33143,1937,33132,1944,33121,1949,33110,1954,33099,1953,33088,1945,33077,1948,33066,1948,33055,1948,33045,1937,33034,1925,33023,1927,33012,1922,33001,1939,32990,1935,32979,1943,32968,1942,32957,1951,32946,1954,32935,1952,32925,1951,32914,1956,32903,1949,32892,1942,32881,1939,32870,1942,32859,1944,32848,1943,32837,1948,32826,1958,32815,1961,32805,1954,32794,1946,32783,1953,32772,1960,32761,1948,32750,1945,32739,1945,32728,1950,32717,1951,32707,1957,32696,1955,32685,1955,32674,1957,32663,1956,32652,1956,32641,1959,32630,1958,32619,1951,32608,1948,32597,1947,32587,1949,32576,1955,32565,1953,32554,1945,32543,1949,32532,1953,32521,1952,32510,1950,32500,1960,32489,1960,32478,1955,32467,1952,32456,1951,32445,1947,32434,1949,32423,1948,32412,1952,32401,1953,32390,1954,32380,1962,32369,1955,32358,1960,32347,1950,32336,1949,32325,1955,32314,1952,32303,1947,32292,1954,32281,1952,32270,1952,32259,1949,32249,1950,32238,1948,32227,1954,32216,1957,32206,1968,32194,1961,32183,1956,32172,1954,32161,1949,32150,1949,32140,1950,32129,1953,32118,1946,32107,1954,32096,1948,32085,1953,32075,1963,32064,1965,32053,1964,32042,1964,32031,1959,32019,1944,32008,1948,31997,1953,31986,1948,31976,1954,31965,1955,31953,1943,31943,1957,31932,1966,31921,1967,31911,1970,31899,1961,31888,1964,31877,1953,31865,1950,31854,1948,31843,1948,31833,1952,31822,1956,31811,1956,31800,1955,31789,1959,31779,1970,31768,1970,31756,1963,31745,1962,31734,1962,31723,1956,31712,1956,31701,1956,31690,1956,31679,1961,31669,1964,31658,1969,31647,1971,31636,1971,31625,1971,31614,1965,31602,1957,31591,1955,31580,1950,31569,1953,31558,1956,31547,1960,31537,1964,31525,1959,31516,1977,31504,1970,31494,1973,31482,1971,31471,1969,31461,1974,31449,1963,31437,1956,31426,1959,31415,1958,31405,1960,31394,1965,31382,1959,31371,1958,31360,1954,31348,1947,31339,1962,31328,1965,31316,1963,31307,1976,31294,1965,31283,1961,31273,1970,31262,1977,31250,1970,31239,1971,31228,1969,31217,1975,31206,1976,31195,1974,31184,1974,31172,1971,31161,1971,31149,1963,31139,1969,31127,1967,31116,1967,31105,1968,31095,1978,31085,1983,31073,1982,31062,1983,31051,1982,31039,1978,31028,1977,31017,1981,31006,1978,30994,1970,30982,1962,30970,1955,30960,1968,30950,1976,30939,1978,30929,1985,30917,1975,30906,1984,30896,1987,30885,1987,30873,1980,30860,1973,30849,1970,30838,1974,30827,1974,30816,1972,30805,1975,30794,1978,30782,1974,30772,1979,30761,1978,30750,1982,30738,1977,30727,1977,30716,1977,30705,1978,30693,1976,30681,1969,30669,1962,30659,1971,30649,1976,30638,1981,30627,1984,30615,1979,30605,1986,30594,1991,30581,1978,30569,1977,30559,1983,30547,1982,30535,1977,30524,1976,30513,1978,30502,1981,30492,1989,30480,1989,30468,1982,30455,1971,30443,1973,30434,1986,30423,1988,30411,1981,30400,1989,30387,1977,30376,1977,30365,1980,30354,1981,30343,1988,30331,1980,30320,1983,30308,1983,30297,1981,30282,1961,30270,1960,30261,1975,30251,1980,30238,1974,30228,1983,30217,1982,30206,1983,30195,1985,30184,1987,30173,1993,30162,1995,30149,1988,30136,1978,30051,1560,30014,1414,29980,1286,29950,1186,29758,263,29745,258,29730,250,29719,257,29705,251,29692,254,29679,253,29667,256,29654,258,29640,251,29627,249,29616,259,29603,260,29590,260,29577,259,29564,259,29552,266,29540,269,29526,266,29513,263,29499,260,29488,266,29474,261,29461,261,29448,262,29435,261,29422,259,29410,265,29396,259,29385,272,29372,271,29359,270,29345,266,29331,257,29319,263,29307,269,29293,262,29282,272,29268,266,29256,272,29243,273]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-15.56814,-74.43186,-0.279,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.132},\"Min\":{\"x\":-35.23,\"z\":20.87},\"values\":[-15.57,-74.43,-0.2786,11.05]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "3c057af5.63dfc6",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 7",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":29160,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4237,910587],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":569,\"points\":[36328,135,36316,129,36303,133,36292,122,36278,129,36265,129,36253,124,36239,125,36225,132,36209,146,36198,137,36183,145,36172,137,36159,139,36146,138,36134,135,36120,139,36107,140,36094,141,36083,131,36070,130,36053,151,36041,144,36028,146,36015,147,36003,142,35991,135,35979,129,35962,149,35949,149,35935,156,35923,153,35912,139,35900,134,35884,150,35871,154,35859,145,35847,140,35833,150,35820,149,35808,144,35793,154,35781,149,35772,128,35756,146,35744,142,35732,133,35718,140,35703,152,35689,158,35678,145,35667,137,35652,145,35638,151,35624,158,35614,143,35599,152,35586,156,35575,149,35562,150,35548,157,35538,141,35525,141,35511,149,35499,148,35485,154,35473,151,35460,150,35447,153,35434,156,35421,159,35409,154,35396,155,35384,151,35371,152,35357,161,35345,156,35333,152,35321,152,35309,147,35297,142,35282,154,35270,151,35256,164,35243,163,35229,170,35216,172,35205,166,35192,163,35181,157,35168,159,35155,157,35143,154,35130,158,35117,158,35105,154,35091,161,35081,149,35065,169,35054,161,35042,152,35029,152,35017,151,35004,154,34992,151,34977,165,34965,157,34954,151,34940,162,34926,169,34915,157,34901,167,34890,155,34876,162,34862,173,34850,170,34839,165,34827,162,34813,170,34802,161,34790,157,34777,165,34765,157,34753,157,34740,162,34727,161,34713,174,34702,160,34689,168,34676,173,34663,175,34652,163,34640,166,34626,172,34614,171,34601,177,34589,174,34576,175,34563,182,34551,176,34540,167,34527,168,34515,171,34503,165,34490,169,34477,171,34465,174,34453,171,34440,169,34428,170,34416,169,34403,166,34390,176,34378,171,34366,166,34353,173,34341,166,34328,171,34315,180,34303,178,34290,184,34278,178,34266,177,34253,177,34241,170,34229,170,34216,173,34203,186,34190,186,34179,174,34167,175,34155,168,34142,172,34130,169,34118,163,34105,175,34092,180,34081,176,34068,174,34056,175,34044,173,34032,173,34019,179,34007,175,33995,176,33982,187,33970,183,33957,185,33945,179,33933,179,33921,180,33908,180,33896,180,33884,174,33872,172,33859,179,33847,180,33835,172,33823,179,33811,176,33799,165,33786,173,33773,181,33761,181,33749,182,33736,188,33724,189,33712,180,33700,182,33687,191,33675,187,33663,188,33651,182,33638,184,33626,193,33613,193,33602,185,33589,191,33577,191,33565,186,33552,189,33540,186,33528,191,33516,185,33474,857,33462,858,33451,855,33439,866,33427,873,33414,903,33397,1041,33381,1146,33367,1204,33353,1268,33339,1336,33326,1397,33313,1444,33299,1526,33285,1613,33271,1682,33258,1757,33244,1830,33231,1905,33220,1916,33209,1930,33198,1928,33187,1923,33176,1929,33165,1927,33154,1938,33143,1937,33132,1942,33121,1948,33110,1940,33099,1936,33088,1928,33078,1919,33067,1926,33056,1934,33045,1933,33034,1943,33023,1945,33012,1931,33001,1943,32990,1950,32979,1946,32968,1936,32957,1943,32947,1933,32936,1934,32925,1936,32914,1941,32903,1938,32892,1938,32881,1935,32870,1941,32859,1940,32848,1944,32837,1946,32826,1953,32816,1946,32805,1931,32794,1928,32783,1936,32772,1935,32761,1941,32750,1944,32739,1929,32728,1944,32717,1947,32707,1948,32696,1953,32685,1945,32674,1951,32663,1938,32652,1944,32641,1945,32630,1945,32619,1945,32608,1940,32598,1947,32587,1952,32576,1949,32565,1952,32554,1947,32543,1944,32532,1951,32521,1948,32510,1942,32499,1946,32488,1947,32478,1950,32467,1944,32456,1954,32445,1954,32434,1950,32423,1953,32412,1957,32401,1942,32390,1947,32380,1952,32369,1951,32358,1951,32347,1945,32336,1948,32325,1955,32314,1949,32303,1955,32292,1951,32281,1956,32271,1962,32260,1956,32249,1957,32238,1947,32227,1954,32216,1952,32205,1949,32194,1949,32183,1943,32172,1949,32162,1956,32151,1960,32140,1960,32129,1955,32118,1956,32107,1951,32096,1961,32085,1957,32074,1944,32063,1954,32052,1953,32041,1949,32031,1956,32020,1965,32009,1962,31998,1962,31987,1954,31976,1958,31964,1953,31953,1952,31943,1955,31931,1951,31921,1952,31910,1953,31899,1954,31888,1961,31877,1964,31866,1964,31856,1968,31844,1966,31834,1970,31822,1964,31811,1960,31800,1959,31789,1957,31778,1959,31766,1945,31756,1958,31745,1958,31735,1963,31724,1976,31713,1974,31702,1972,31690,1961,31679,1955,31668,1957,31657,1953,31646,1958,31635,1955,31625,1964,31614,1966,31603,1971,31592,1968,31582,1974,31571,1980,31560,1983,31549,1973,31537,1965,31526,1971,31515,1965,31504,1960,31493,1961,31482,1964,31471,1966,31460,1967,31450,1976,31439,1974,31427,1969,31417,1971,31406,1975,31395,1970,31383,1967,31372,1965,31362,1970,31350,1966,31339,1969,31328,1971,31317,1969,31307,1982,31296,1978,31285,1981,31274,1982,31263,1984,31251,1973,31239,1972,31228,1971,31215,1955,31205,1966,31195,1972,31183,1969,31173,1981,31163,1985,31152,1987,31140,1981,31129,1982,31118,1980,31106,1977,31095,1976,31084,1975,31072,1973,31062,1976,31051,1983,31039,1977,31029,1981,31018,1983,31007,1987,30997,1993,30984,1985,30974,1993,30962,1983,30951,1984,30940,1985,30927,1973,30916,1971,30905,1976,30895,1979,30884,1982,30873,1984,30862,1984,30852,1992,30840,1989,30829,1990,30817,1979,30805,1979,30794,1973,30781,1965,30770,1964,30761,1981,30750,1982,30739,1983,30731,2003,30719,2003,30707,1995,30696,1993,30684,1987,30672,1986,30661,1985,30650,1984,30639,1984,30627,1984,30615,1975,30605,1988,30594,1989,30583,1995,30573,2000,30561,1996,30550,2001,30536,1983,30526,1988,30514,1989,30501,1975,30490,1977,30478,1978,30468,1982,30458,1995,30448,2004,30437,2003,30423,1990,30414,2000,30402,1999,30391,1999,30379,1996,30369,2004,30356,1998,30344,1995,30332,1988,30320,1987,30310,1993,30300,2002,30289,2006,30278,2007,30265,1999,30255,2004,30243,2001,30233,2007,30220,2000,30166,1749,30112,1504,30079,1377,30052,1294,30022,1187,29984,1040,29837,270,29824,271,29810,261,29796,259,29784,260,29771,260,29759,264,29746,264,29732,260,29720,262,29706,259,29694,263,29681,266,29670,272,29657,271,29642,264,29630,267,29617,269,29606,277,29592,271,29581,280,29567,277,29555,283,29542,280,29529,280,29516,278,29502,275,29489,272,29477,277,29465,280,29451,278,29439,279,29425,274,29413,279,29399,275,29386,277,29374,281,29360,275,29347,273,29335,278,29322,279,29310,280,29298,289,29287,297,29272,286,29259,288,29246,287]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.66183,-75.33817,-0.262,11.0],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.725},\"Min\":{\"x\":-35.2,\"z\":20.27},\"values\":[-14.68,-75.32,-0.2619,11.05]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-14.67714,-75.32286,-0.262,11.0],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":1.718},\"Min\":{\"x\":-35.2,\"z\":20.27},\"values\":[-14.68,-75.32,-0.2619,11.05]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "a3f286ed.3e0eb8",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 8",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":29353,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4247,955699],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":568,\"points\":[36328,135,36314,139,36303,132,36291,129,36277,132,36264,134,36250,137,36237,138,36224,135,36211,136,36199,131,36186,132,36169,155,36159,139,36146,138,36133,139,36120,140,36108,133,36094,138,36080,143,36068,139,36054,147,36041,142,36028,147,36016,138,36000,155,35987,157,35976,144,35964,140,35950,148,35937,145,35923,153,35911,149,35897,152,35885,147,35872,150,35858,153,35848,138,35833,146,35821,140,35807,146,35793,152,35782,146,35768,150,35757,140,35742,150,35731,142,35718,141,35705,139,35693,134,35681,128,35666,141,35651,153,35640,142,35624,161,35613,149,35599,153,35587,149,35575,148,35565,130,35552,133,35536,150,35521,164,35511,152,35498,150,35485,154,35473,149,35460,153,35447,154,35435,151,35423,146,35411,142,35396,155,35383,157,35370,158,35359,150,35346,150,35332,161,35320,156,35307,159,35295,153,35281,162,35269,156,35255,165,35242,168,35229,171,35217,168,35206,156,35193,156,35180,164,35167,162,35155,161,35143,154,35130,155,35118,155,35104,159,35091,161,35079,156,35066,161,35055,152,35042,151,35029,155,35016,159,35005,149,34990,161,34978,158,34964,170,34952,163,34939,163,34929,146,34915,155,34902,162,34889,164,34875,169,34866,143,34852,156,34841,148,34829,146,34815,155,34802,159,34789,161,34777,158,34764,163,34751,166,34738,173,34725,176,34714,170,34701,171,34689,170,34676,171,34664,170,34652,163,34639,167,34626,174,34614,175,34601,175,34589,175,34576,176,34564,173,34552,170,34540,171,34526,179,34515,172,34502,174,34490,171,34477,175,34465,174,34453,167,34441,163,34427,175,34414,179,34403,170,34390,173,34377,180,34365,179,34353,171,34340,180,34327,183,34315,175,34302,185,34291,169,34278,178,34265,182,34253,177,34240,186,34228,179,34216,177,34203,179,34192,170,34179,172,34167,171,34154,174,34142,177,34130,176,34117,181,34105,178,34093,171,34080,177,34068,178,34056,177,34043,178,34031,178,34018,185,34006,189,33994,180,33982,180,33970,173,33958,178,33946,171,33933,181,33920,186,33907,197,33849,874,33838,870,33825,884,33813,896,33800,914,33784,983,33764,1110,33747,1203,33731,1268,33714,1355,33698,1431,33683,1501,33666,1593,33650,1675,33634,1762,33618,1848,33605,1885,33592,1924,33580,1935,33569,1938,33558,1944,33547,1940,33536,1937,33525,1936,33514,1940,33503,1950,33491,1952,33480,1952,33470,1943,33459,1945,33448,1947,33437,1945,33426,1942,33415,1941,33405,1940,33394,1943,33383,1941,33372,1944,33360,1954,33350,1952,33339,1947,33328,1938,33317,1939,33307,1932,33296,1930,33285,1930,33274,1935,33263,1948,33252,1943,33241,1954,33230,1950,33219,1950,33208,1951,33197,1949,33186,1951,33175,1951,33164,1944,33154,1947,33143,1944,33132,1947,33121,1959,33110,1952,33099,1950,33088,1951,33077,1956,33066,1949,33055,1946,33044,1950,33033,1953,33023,1941,33012,1942,33001,1946,32990,1944,32979,1948,32968,1959,32957,1959,32946,1951,32935,1952,32924,1970,32914,1953,32903,1952,32892,1951,32881,1958,32870,1948,32859,1943,32848,1952,32837,1959,32826,1951,32816,1949,32805,1959,32794,1967,32783,1962,32772,1957,32761,1960,32750,1954,32739,1951,32728,1949,32717,1952,32707,1948,32696,1954,32685,1957,32674,1958,32663,1951,32652,1955,32641,1956,32630,1958,32619,1963,32609,1959,32598,1948,32587,1942,32576,1951,32565,1947,32554,1949,32543,1957,32532,1955,32521,1950,32511,1967,32500,1959,32489,1966,32478,1963,32467,1970,32456,1959,32445,1963,32434,1948,32423,1950,32412,1952,32401,1954,32391,1964,32380,1967,32369,1968,32358,1966,32347,1966,32336,1968,32325,1957,32314,1959,32303,1952,32292,1952,32281,1952,32271,1966,32260,1966,32249,1972,32238,1972,32227,1962,32216,1955,32205,1957,32195,1968,32183,1955,32172,1952,32162,1954,32150,1949,32140,1950,32129,1967,32118,1964,32108,1970,32097,1970,32086,1967,32075,1973,32064,1966,32053,1971,32042,1968,32031,1960,32020,1958,32008,1954,31998,1962,31987,1969,31976,1969,31966,1975,31954,1966,31944,1976,31933,1985,31922,1981,31911,1970,31900,1969,31888,1966,31877,1967,31866,1965,31855,1958,31844,1960,31833,1962,31823,1971,31812,1973,31801,1973,31790,1969,31779,1979,31768,1974,31757,1978,31746,1965,31735,1969,31724,1966,31713,1967,31702,1972,31691,1974,31680,1975,31670,1985,31659,1984,31649,1993,31637,1988,31626,1979,31615,1982,31604,1978,31592,1970,31581,1968,31570,1962,31559,1965,31549,1976,31538,1982,31528,1984,31516,1981,31505,1980,31494,1981,31483,1974,31472,1981,31461,1977,31449,1969,31438,1964,31427,1967,31416,1966,31407,1981,31396,1981,31386,1994,31374,1988,31363,1982,31352,1990,31341,1987,31330,1991,31319,1990,31307,1979,31295,1973,31283,1962,31273,1974,31262,1977,31252,1988,31241,1984,31230,1986,31218,1984,31208,1989,31197,1990,31186,1990,31174,1984,31162,1981,31150,1971,31139,1969,31129,1982,31119,1993,31108,1996,31097,1996,31086,1993,31074,1992,31064,1994,31052,1988,31040,1987,31029,1985,31018,1984,31006,1978,30995,1976,30984,1978,30974,1992,30963,1995,30953,1998,30942,1999,30929,1983,30917,1980,30906,1984,30896,1986,30884,1983,30873,1986,30861,1976,30851,1989,30841,1997,30830,1995,30819,1998,30807,1990,30797,2000,30785,1994,30773,1989,30762,1987,30752,1995,30741,1995,30729,1993,30717,1982,30705,1981,30694,1978,30685,1995,30675,2006,30664,2006,30653,2003,30642,2004,30629,1993,30617,1989,30605,1985,30591,1972,30558,1820,30517,1620,30495,1555,30466,1439,30441,1347,30414,1247,30386,1142,30361,1054,30213,240,30202,254,30191,261,30177,257,30164,253,30151,252,30141,264,30128,262,30117,272,30104,272,30091,266,30076,253,30064,260,30052,260,30041,270,30027,264,30013,258,30001,256,29987,251,29975,254,29963,256,29950,256,29940,271,29926,265,29912,259,29900,261,29887,262,29875,266,29862,265,29849,265,29837,270,29824,270,29810,261,29797,264,29785,270,29773,270,29761,277,29746,268,29734,272,29721,269,29709,273,29696,276,29684,277,29670,274,29659,282,29646,281,29632,276,29619,279,29607,282,29595,288,29584,295,29570,291,29558,294,29544,287,29529,278,29516,278,29505,289,29492,289,29478,285,29465,283,29453,286,29438,277,29427,288,29413,281,29401,287,29388,285,29374,281,29361,278,29348,281,29335,279,29323,282,29312,292,29297,283,29286,292,29273,293,29261,296,29248,296]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-10.01565,-79.98434,-0.177,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":4.786},\"Min\":{\"x\":-35.19,\"z\":17.29},\"values\":[-10.02,-79.99,-0.1766,11.08]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[-10.015,-79.985,-0.177,11.1],\"visualizationValues\":{\"Max\":{\"x\":35.62,\"z\":4.787},\"Min\":{\"x\":-35.18,\"z\":17.29},\"values\":[-10.02,-79.99,-0.1766,11.08]}}]}]}",
        "payloadType": "json",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "d7f28012.fca25",
        "type": "inject",
        "z": "50e3bf45.5484a",
        "name": "Cinghia grandissima 9 (lato sinistro)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Cinghia grandissima 9",
        "payload": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":32237,\"msgData\":[\"MeasureToolValues\",{\"Profile\":{\"qualityID\":0,\"timestamp\":[4393,445707],\"prec\":100,\"zAxisDefinitionID\":1,\"xStart\":-32767,\"length\":21,\"points\":[32172,1948,32161,1945,32150,1928,32135,1836,32121,1762,32108,1721,32094,1661,32081,1606,32068,1567,32054,1505,32040,1459,32027,1421,32013,1363,31999,1314,31985,1263,31972,1223,31958,1177,31944,1128,31930,1081,31916,1035,31901,974]},\"Tools\":[{\"toolID\":0,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[74.80418,15.19583,3.68,41.5],\"visualizationValues\":{\"Max\":{\"x\":-5.943,\"z\":19.62},\"Min\":{\"x\":-8.658,\"z\":9.621},\"values\":[74.8,15.2,3.682,41.5]}},{\"toolID\":1,\"ActualRoi\":{\"top\":50.0,\"bottom\":0.0,\"left\":-36.0,\"right\":36.0},\"ActualBlindRegion\":{\"top\":0.0,\"bottom\":0.0,\"left\":0.0,\"right\":0.0},\"shiftVector\":{\"x\":0.0,\"z\":0.0},\"isRefSysCoupled\":false,\"currentXAxis\":{\"slope\":0.0,\"offset\":0.0},\"values\":[74.80418,15.19583,3.68,41.5],\"visualizationValues\":{\"Max\":{\"x\":-5.943,\"z\":19.62},\"Min\":{\"x\":-8.658,\"z\":9.621},\"values\":[74.8,15.2,3.682,41.5]}}]}]}",
        "payloadType": "json",
        "x": 180,
        "y": 2060,
        "wires": [
            [
                "d8c21e15.50b55"
            ]
        ]
    },
    {
        "id": "d046080c.2940d8",
        "type": "comment",
        "z": "50e3bf45.5484a",
        "name": "Risultato Cinghia Grandissima 9",
        "info": "{\"msgType\":\"ACK\",\"sessionID\":9,\"msgID\":32239,\"msgData\":[\"MeasurementValues\",{\"qualityID\":0,\"configmode\":true,\"alarm\":true,\"valuesAreValid\":true,\"digitalOuts\":[true,false],\"values\":[15.20844,15.20844],\"measrate\":227.9,\"timestamp\":[4393,555420],\"EncoderValue\":384}]}",
        "x": 170,
        "y": 2020,
        "wires": []
    },
    {
        "id": "3bd1579a.e7c338",
        "type": "function",
        "z": "50e3bf45.5484a",
        "name": "Regressione Lineare",
        "func": "dati=msg.points_xy;\n\nvar regression=global.get('modulo_regressione');\n\nvar result = regression.linear(dati);\nvar gradient = result.equation[0];\nvar yIntercept = result.equation[1];\n\n\n\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1600,
        "wires": [
            [
                "5f453512.64b15c"
            ]
        ]
    },
    {
        "id": "5f453512.64b15c",
        "type": "debug",
        "z": "50e3bf45.5484a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.string",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7fd2b48e.90917c",
        "type": "regression",
        "z": "50e3bf45.5484a",
        "name": "Lineare",
        "dataSetSize": "0",
        "regressionType": "linear",
        "polynomialOrder": 2,
        "precision": "8",
        "xInputField": "payload.x",
        "xInputFieldType": "msg",
        "yInputField": "payload.y",
        "yInputFieldType": "msg",
        "yOutputField": "payload.y",
        "yOutputFieldType": "msg",
        "functionOutputField": "f_lineare",
        "functionOutputFieldType": "msg",
        "resultOnly": false,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "11cc072.11a3af9"
            ]
        ]
    },
    {
        "id": "11cc072.11a3af9",
        "type": "regression",
        "z": "50e3bf45.5484a",
        "name": "quadratica",
        "dataSetSize": "0",
        "regressionType": "polynomial",
        "polynomialOrder": 2,
        "precision": "8",
        "xInputField": "payload.x",
        "xInputFieldType": "msg",
        "yInputField": "payload.y",
        "yInputFieldType": "msg",
        "yOutputField": "payload.y",
        "yOutputFieldType": "msg",
        "functionOutputField": "f_quadratica",
        "functionOutputFieldType": "msg",
        "resultOnly": false,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "fcbe3049.35d43"
            ]
        ]
    },
    {
        "id": "fcbe3049.35d43",
        "type": "regression",
        "z": "50e3bf45.5484a",
        "name": "cubica",
        "dataSetSize": "0",
        "regressionType": "polynomial",
        "polynomialOrder": "3",
        "precision": "8",
        "xInputField": "payload.x",
        "xInputFieldType": "msg",
        "yInputField": "payload.y",
        "yInputFieldType": "msg",
        "yOutputField": "payload.y",
        "yOutputFieldType": "msg",
        "functionOutputField": "f_cubica",
        "functionOutputFieldType": "msg",
        "resultOnly": false,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "4e137d9f.1d5ed4"
            ]
        ]
    },
    {
        "id": "c818df7.b1ba42",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "ACCOPPIAMENTO MESSAGGI",
        "func": "\n\n\n//\n\nvar dati=msg.payload;\n\nvar output = [];\n\nif (dati.length > 0)\n{\n    for (let i=0;i < dati.length; i++)\n    {\n        var FrameType = dati[i][4];  // 0= SingleFrame 1=FirstFrame 2=ConsecutiveFrame\n        var FrameCount = dati[i][6] + 256 * dati[i][7];\n        if (FrameType == 1)\n        {\n            output.unshift(dati[i]); // mette in prima posizione\n        }\n        if (FrameType > 1)\n        {\n            output.splice(FrameCount,0,dati[i]);  // mette nell'x posizione\n        }\n    }\n}\n\nmsg.payload = output;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 460,
        "wires": [
            [
                "2d4ef784.8a8f78"
            ]
        ]
    },
    {
        "id": "a662d3c0.831d3",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "FILTRO MESSAGGI UDP",
        "func": "\n// prendo data e ora dell'ultima volta che ho tirato fuori un messagggio\nvar ultimo_invio = flow.get('ultimo_invio');\nvar data_ora_ultimo_messaggio = flow.set('data_ora_ultimo_messaggio',Date.now());\n// se la variabile è undefined la inizializzo a now()\nif (ultimo_invio === undefined)\n{\n    ultimo_invio = Date.now(); \n    flow.set('ultimo_invio',ultimo_invio);\n}    \n\n// se sono passati x millisecondi dall'ultima volta che ho tirato fuori un messagggio procedo\nif ((Date.now() - ultimo_invio) > 300)\n{\n\n    // riprendo il buffer dei messaggi\n    var messaggi = flow.get('messaggi');\n    // verifico la corretta inizializzazione del buffer\n    if (messaggi === undefined)\n    {\n        messaggi = [];\n    }\n        \n        \n    var nuovo_messaggio = msg.payload;\n    \n    \n    if (messaggi.length == 0) // se non ci sono messaggi aggiungo il messaggio \n    {\n        messaggi.push(nuovo_messaggio);\n        \n        if (nuovo_messaggio[4] > 0) // 0= SingleFrame 1=FirstFrame 2=ConsecutiveFrame\n        { // se è maggiore di zero vuol dire che devo aspettarmi altri messaggi\n            flow.set('messaggi',messaggi);\n            return null;    \n        }\n        else if (nuovo_messaggio[4] == 0)\n        { // se è =0 inoltro il messaggio e resetto il buffer\n            msg.payload = messaggi;\n            messaggi = [];\n            flow.set('messaggi',messaggi);\n            ultimo_invio = Date.now();\n            flow.set('ultimo_invio',ultimo_invio);\n            return msg;\n        }\n        \n    }\n    else if (messaggi.length > 0) // se c'è almeno un messaggio nel buffer verifico il BlockID\n    {\n        \n            \n            \n           \n        var BlockId0 = (messaggi[0][3] << 24 | messaggi[0][2] << 16 | messaggi[0][1] << 8 | messaggi[0][0]);\n        \n        var BlockId_new = (nuovo_messaggio[3] << 24 | nuovo_messaggio[2] << 16 | nuovo_messaggio[1] << 8 | nuovo_messaggio[0]);\n            \n        //node.warn(BlockId0);\n        //node.warn(BlockId_new);\n            \n            \n        if (BlockId0 == BlockId_new)\n        {\n            messaggi.push(nuovo_messaggio);\n            flow.set('messaggi',messaggi);\n           \n            \n            return null;\n        }\n        else if (BlockId0 !== BlockId_new)\n        {\n            msg.payload = messaggi;\n            messaggi = [];\n            flow.set('messaggi',messaggi);\n            ultimo_invio = Date.now();\n            flow.set('ultimo_invio',ultimo_invio);\n            return msg;\n        }\n       \n    }  \n        \n}\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "c818df7.b1ba42",
                "22e31871f3536891"
            ]
        ]
    },
    {
        "id": "2d4ef784.8a8f78",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "RIMOZIONE HEADER",
        "func": "\n\nvar udp_msg_raw = msg.payload;\n\nfor (let i=0; i < udp_msg_raw.length; i++)\n{\n    if (i==0)\n    {\n        \n        var udp_msg = Object.values(udp_msg_raw[i]).slice(8,Object.values(udp_msg_raw[i]).length);\n\n    }\n    else\n    {\n        let ary = Object.values(udp_msg_raw[i]).slice(8,Object.values(udp_msg_raw[i]).length);\n        ary.forEach(dato=>udp_msg.push(dato));\n    }\n}\n\nmsg.payload = udp_msg;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "5c1ca7af.057038"
            ]
        ]
    },
    {
        "id": "5c1ca7af.057038",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "ELABORAZIONE PUNTI",
        "func": "var udp_msg = msg.payload;\n\nvar prec = 100.0;\n\nfunction compareXvalue(a, b) {\n\n    // converting to uppercase to have case-insensitive comparison\n    const value1 = a.x;\n    const value2 = b.x;\n\n    let comparison = 0;\n\n    if (value1 > value2) {\n        comparison = 1;\n    } else if (value1 < value2) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\n\nfunction bytesToFloat(bytes) {\n    // JavaScript bitwise operators yield a 32 bits integer, not a float.\n    // Assume LSB (least significant byte first).\n    var bits = bytes[3]<<24 | bytes[2]<<16 | bytes[1]<<8 | bytes[0];\n    var sign = (bits>>>31 === 0) ? 1.0 : -1.0;\n    var e = bits>>>23 & 0xff;\n    var m = (e === 0) ? (bits & 0x7fffff)<<1 : (bits & 0x7fffff) | 0x800000;\n    var f = sign * m * Math.pow(2, e - 150);\n    return f;\n  }  \nfunction bytesToUint(bytes) {\n    var f = bytes[0] + bytes[1] * 256;\n    return f;\n  }  \n\n\nvar MessageType = udp_msg[0];\n/*\n0= mesuared values\n1= Z   profile\n2= I   profile\n3= Z-I profile\n*/\n\n// node.warn(MessageType);\n\nswitch (MessageType)\n{\n   case 0:\n       node.warn(MessageType);\n       break;\n   case 1:\n       \n       var Quality = udp_msg[5];\n       var MeasuredHertz = bytesToFloat([udp_msg[6] , udp_msg[7] , udp_msg[8] , udp_msg[9]]);\n       var EncoderValue = udp_msg[19] << 8 | udp_msg[18];\n       var ProfileLength = (udp_msg[23] << 24 | udp_msg[22] << 16 | udp_msg[21] << 8 | udp_msg[20]);\n       \n       /*\n       node.warn(Quality);\n       node.warn(MeasuredHertz.toFixed(2));\n       node.warn(EncoderValue);\n       node.warn(ProfileLength);\n       */\n       \n       var x_array=[];\n       var z_array=[];\n       var punti = [];\n       var count = 0\n       var count_invertiti = 0;\n       for (let i=24; i<udp_msg.length; i+=4)\n       {\n           var local_json={};\n           //local_json.x=arrayByteToInt16([udp_msg[i],udp_msg[i]+1]);\n           //local_json.x=arrayByteToInt16([udp_msg[i]+2,udp_msg[i]+3]);\n           local_json.x=(udp_msg[i+1])<<8 | (udp_msg[i]+0);\n           //node.warn(-32768 & local_json.x);\n           //node.warn(typeof(-32768 & local_json.x));\n           \n           if ((-32768 & local_json.x) == 32768)\n           {\n               //node.warn(-32768 & local_json.x);\n               local_json.x =  local_json.x - 65535;\n               count_invertiti ++;\n           }\n           \n           local_json.x = local_json.x / prec;\n           local_json.y=((udp_msg[i+3]) << 8 | (udp_msg[i+2])) / prec;\n           //local_json.x=(bytesToUint([udp_msg[i] , udp_msg[i+1]]) -0) / 1000.0;\n           //local_json.y=bytesToUint([udp_msg[i+2] , udp_msg[i+3]]) / 100.0;\n           \n           punti.push(local_json);\n           \n           count++;\n           \n       }\n       //node.warn(count);\n       //node.warn(count_invertiti);\n       \n        msg.points=punti;\n        msg.sorted_points = punti.sort(compareXvalue);\n        msg.sorted_points.forEach(punto=>{x_array.push(punto.x);z_array.push(punto.y)});\n        var flusso_dati={\n            \"points\":punti.sort(compareXvalue),\n            \"points_x\":x_array,\n            \"points_y\":z_array\n        };\n        msg.flusso_dati=flusso_dati;\n\n       break;\n   case 2: \n       node.warn(MessageType);\n       break;\n\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "2936ba344743dec5"
            ]
        ]
    },
    {
        "id": "99f471d1.b23e1",
        "type": "comment",
        "z": "74d727b3.e9bb48",
        "name": "FILTRO E RICONOSCIMENTO MESSAGGI",
        "info": "",
        "x": 270,
        "y": 320,
        "wires": []
    },
    {
        "id": "b63d4ee7.f5b74",
        "type": "comment",
        "z": "74d727b3.e9bb48",
        "name": "ACCOPPIAMENTO MESSAGGIO",
        "info": "",
        "x": 480,
        "y": 420,
        "wires": []
    },
    {
        "id": "c5d49dd4.7595b",
        "type": "comment",
        "z": "74d727b3.e9bb48",
        "name": "RIMOZIONE HEADER",
        "info": "",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "a7090baa.1ab9a8",
        "type": "comment",
        "z": "74d727b3.e9bb48",
        "name": "ELABORAZIONE PUNTI",
        "info": "",
        "x": 630,
        "y": 660,
        "wires": []
    },
    {
        "id": "22519c81.f625d4",
        "type": "inject",
        "z": "74d727b3.e9bb48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "7da95ff2.656b9"
            ]
        ]
    },
    {
        "id": "7da95ff2.656b9",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "STATO CONNESSIONE UDP",
        "func": "var data_ora_ultimo_messaggio = flow.get('data_ora_ultimo_messaggio');\n\nvar connessione_udp = false;\nvar now = Date.now();\n\n\nif (now - data_ora_ultimo_messaggio > 5000 || data_ora_ultimo_messaggio == undefined || data_ora_ultimo_messaggio==null )\n{\n    connessione_udp = false;\n}\nelse\n{\n    connessione_udp = true;\n}\n\nglobal.set('GLOBALI.connessione_udp_ok',connessione_udp);\nmsg.data_ora_ultimo_messaggio = data_ora_ultimo_messaggio;\nmsg.now = now;\n\n//msg.payload = connessione_udp;\nmsg.payload = { \"function\": \"connessione_udp_ok\", \"value\": connessione_udp }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 840,
        "wires": [
            [
                "9d38a367eedc4e2a",
                "a02cc4c641fe97f4"
            ]
        ]
    },
    {
        "id": "8f24a992.9e6c98",
        "type": "link out",
        "z": "74d727b3.e9bb48",
        "name": "UDP Msg",
        "links": [
            "3bdc1fa8.40581"
        ],
        "x": 1125,
        "y": 660,
        "wires": []
    },
    {
        "id": "fbcc2c88.7bc93",
        "type": "udp in",
        "z": "74d727b3.e9bb48",
        "name": "",
        "iface": "",
        "port": "1234",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "a662d3c0.831d3"
            ]
        ]
    },
    {
        "id": "17d2cec.29aa431",
        "type": "comment",
        "z": "74d727b3.e9bb48",
        "name": "ip per comunicazione profilometro : 192.168.0.10",
        "info": "",
        "x": 240,
        "y": 180,
        "wires": []
    },
    {
        "id": "9414813b.beed9",
        "type": "link out",
        "z": "74d727b3.e9bb48",
        "name": "dati live",
        "links": [
            "9e276930.5a9f98",
            "8c635e5e.1ce7b",
            "51faa18fd8eb6cf4"
        ],
        "x": 1125,
        "y": 720,
        "wires": []
    },
    {
        "id": "9d38a367eedc4e2a",
        "type": "link out",
        "z": "74d727b3.e9bb48",
        "name": "to ws",
        "mode": "link",
        "links": [
            "06e25fa3b990a25b"
        ],
        "x": 655,
        "y": 920,
        "wires": []
    },
    {
        "id": "a02cc4c641fe97f4",
        "type": "debug",
        "z": "74d727b3.e9bb48",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 840,
        "wires": []
    },
    {
        "id": "22e31871f3536891",
        "type": "debug",
        "z": "74d727b3.e9bb48",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "1cdaef4d8efca3b4",
        "type": "debug",
        "z": "74d727b3.e9bb48",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 800,
        "wires": []
    },
    {
        "id": "2936ba344743dec5",
        "type": "function",
        "z": "74d727b3.e9bb48",
        "name": "CONTROLLO SE INVIARE MSG",
        "func": "//solo se abilitata lo streaming realtime da profilometro\nif (global.get(\"PARAMETRI.flusso_dati\") !== \"daCsv\") {\n    return msg;\n}\nelse\n{\n    //altrimenti blocca il msg\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 700,
        "wires": [
            [
                "8f24a992.9e6c98",
                "9414813b.beed9",
                "1cdaef4d8efca3b4"
            ]
        ]
    },
    {
        "id": "f28a3f21.002ba",
        "type": "websocket in",
        "z": "a22dc052.c61d",
        "name": "",
        "server": "27824c37.1dfa24",
        "client": "",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "7e3d69f5.8c5878",
                "4dcfb122.a77c8"
            ]
        ]
    },
    {
        "id": "a6049eb8.4e0cd",
        "type": "http in",
        "z": "a22dc052.c61d",
        "name": "",
        "url": "/prova-ws",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 880,
        "wires": [
            [
                "3f6da5e.9e93a5a"
            ]
        ]
    },
    {
        "id": "110125ce.8ad62a",
        "type": "http response",
        "z": "a22dc052.c61d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "64b5670.38edc98",
        "type": "websocket out",
        "z": "a22dc052.c61d",
        "name": "",
        "server": "27824c37.1dfa24",
        "client": "",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "b83243a6.1cfb",
        "type": "comment",
        "z": "a22dc052.c61d",
        "name": "INVIO MESSAGGI ALLA PAGINA WEB",
        "info": "",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "e34e434e.4dd7e",
        "type": "comment",
        "z": "a22dc052.c61d",
        "name": "RICEZIONE MESSAGGI DALLA PAGINA WEB",
        "info": "",
        "x": 640,
        "y": 660,
        "wires": []
    },
    {
        "id": "8e50df0c.5270a",
        "type": "comment",
        "z": "a22dc052.c61d",
        "name": "PUBBLICAZIONE DELLA PAGINA WEB C:\\temp\\chart_dinamico_con_WS.html",
        "info": "http://localhost:1880/prova-ws",
        "x": 540,
        "y": 880,
        "wires": []
    },
    {
        "id": "2bbe4525.c87bea",
        "type": "file",
        "z": "a22dc052.c61d",
        "name": "Write Backup",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1170,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "3f6da5e.9e93a5a",
        "type": "file in",
        "z": "a22dc052.c61d",
        "name": "",
        "filename": "C:\\temp\\chart_dinamico_con_WS.html",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 270,
        "y": 1000,
        "wires": [
            [
                "110125ce.8ad62a",
                "525f9474.50b3cc",
                "db220533.a4a858"
            ]
        ]
    },
    {
        "id": "e6706fdb.67bff",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "Path_to_Array",
        "func": "\ndata= msg.path;\n\npatharray=[];\n\nj=0;\nlast=\"\";\nwhile (true) {\n\n  i = data.indexOf('\\\\',j);\n  \n  console.log(\"Valore di i: \" + i + \"; Valore di j: \" + j);\n \n  \n  if (i>0 ) {\n      \n    if (j==0) {\n        patharray.push(data.slice(j,i-1)); \n    } else {\n        patharray.push(data.slice(j,i)); \n    }\n    \n    last=data.slice(i+1);\n    console.log(\"Last: \" + last);\n    \n    j=i+1;\n    \n  } else {\n      patharray.push(last);\n      break;   \n  }\n\n}\n\n\n\nmsg.patharray=patharray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "525f9474.50b3cc",
        "type": "change",
        "z": "a22dc052.c61d",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "filename",
                "pt": "msg",
                "to": "path",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1140,
        "wires": [
            [
                "e6706fdb.67bff"
            ]
        ]
    },
    {
        "id": "ef19c48a.5e8dd8",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "add_name_revision",
        "func": "data=msg.filename;\n\ntmp = data.substr(0, data.lastIndexOf('.'));\n\nmsg.filename= tmp + \"_BK_\"+ msg.datetime + \".html\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1020,
        "wires": [
            [
                "2bbe4525.c87bea"
            ]
        ]
    },
    {
        "id": "59c560be.e7cef",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "messages",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"messages\", \"value\":\"Ciao Belli\"}",
        "payloadType": "str",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "8e48ceb5.84626",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "echo",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"echo\", \"value\":\"invio ack\"}",
        "payloadType": "str",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "433c4293.d4b3dc",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "fake aggiorna chart",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"aggiorna_chart\",\"value\":[{\"x\":0,\"y\":100},{\"x\":1,\"y\":101},{\"x\":2,\"y\":102},{\"x\":3,\"y\":103},{\"x\":4,\"y\":104}]}",
        "payloadType": "json",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "23227332.c3a7fc",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "date_time",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"date_time\",\"value\":\"...\"}",
        "payloadType": "json",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "68e42402.9574ac"
            ]
        ]
    },
    {
        "id": "7d973612.40f258",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "",
        "func": "msg.payload.value=msg.datetime;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "5548148c.a7495c",
        "type": "comment",
        "z": "a22dc052.c61d",
        "name": "COPIA DELLA PAGINA",
        "info": "<!DOCTYPE HTML>\n<html>\n<head>\n<script>\n\nvar dps \t= []; // dataPoints\nvar title\t= \"Prova Titolo\"; // titolo\n\nvar addendo =1;\n\nconsole.log(\"pre on load\");\n\nwindow.onload = function () {\nconsole.log(\"on load\");\nwsConnect(); \n\n\nvar chart = new CanvasJS.Chart(\"chartContainer\", {\n\ttitle :{\n\t\ttext: title\n\t},\n\tdata: [{\n\t\ttype: \"line\",\n\t\tdataPoints: dps\n\t}]\n});\n\n\nvar xVal = 0;\nvar yVal = 100; \nvar updateInterval = 1000;\nvar dataLength = 5; // number of dataPoints visible at any point\n\nvar updateChart = function (count) {\n\n\tcount = count || 1;\n\n\tfor (var j = 0; j < count; j++) {\n\t\tyVal = yVal +  Math.round(5 + Math.random() *(-5-5));\n\t\tdps.push({\n\t\t\tx: xVal,\n\t\t\ty: yVal\n\t\t});\n\t\txVal++;\n\t}\n\n\tif (dps.length > dataLength) {\n\t\tdps.shift();\n\t}\n\t\n\tconsole.log(\"valore dps dopo updateChart: \", dps);\n\tchart.render();\n};\n\nupdateChart(dataLength);\n\n// setInterval(function(){updateChart()}, updateInterval);\n// setInterval(function(){chart.render()}, updateInterval);\n// setInterval(function(){dps[0].y=dps[0].y + addendo;chart.render(); }, 500);\n\n\n};\n\n\n\n<!-- ############### INIZIO WEBSOCKET ############### -->\n\n\n       var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        // This needs to point to the web socket in the Node-RED flow\n        // ... in this case it's ws/simple\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"prova-ws\",\"ws/web_page\");\n\t\t\n\t\tconsole.log(\"connecting...\", wsUri);\n\t\t\n        function wsConnect() {\n            console.log(\"connect: \",wsUri);\n            ws = new WebSocket(wsUri);\n            //var line = \"\";    // either uncomment this for a building list of messages\n            ws.onmessage = function(msg) {\n\t\t\t\tconsole.log(\"on message, messaggio ricevuto: \",msg);\n\t\t\t\t\n\t\t\t\tvar myObj = JSON.parse(msg.data);\t\n\t\t\t\tswitch (myObj.function) {\n\t\t\t\t\n\t\t\t\n\t\t\t\tcase 'messages':\n\t\t\t\t\t\t\tvar line = \"\";  // or uncomment this to overwrite the existing message\n\t\t\t\t\t\t\tline += \"<p>\" + myObj.value + \"</p>\";\n                            document.getElementById('messages').innerHTML = line;;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'date_time':\n\t\t\t\t\t\t\tvar line = \"\";  // or uncomment this to overwrite the existing message\n\t\t\t\t\t\t\tline += \"<p>\" + myObj.value + \"</p>\";\n                            document.getElementById('date_time').innerHTML = line;;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'ack':\n\t\t\t\t\t\t\tws.send(myObj.value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tcase 'aggiorna_chart':\n\t\t\t\t\t\t\tdps.length=0;\n\t\t\t\t\t\t\tconst dati=myObj.value;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (let i = 0; i < dati.length; i++) {\n\t\t\t\t\t\t\tdps.push(dati[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tif (addendo<0) {addendo=1} else {addendo=-1};\n\t\t\t\t\n\t\t\t\t//dps=[ {x: 0, y: 100} , {x: 8, y: 108}];\n\t\t\t\t//dps=[{\"x\":0,\"y\":100},{\"x\":1,\"y\":101},{\"x\":2,\"y\":102},{\"x\":3,\"y\":103},{\"x\":4,\"y\":104}];\n\t\t\t\t//dps=[{'x':0,'y':100},{'x':1,'y':101},{'x':2,'y':102},{'x':3,'y':103},{'x':4,'y':104}];\n\t\t\t\tconsole.log(\"contenuto array dps prima: \", dps);\n\t\t\t\tdps.length=0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t//dps=tmp;\n\t\t\t\t\n\t\t\t\tdps.push({\n\t\t\t\tx: dps.length +1,\n\t\t\t\ty: dps.length *2\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tdps.push({\n\t\t\t\tx: dps.length +1,\n\t\t\t\ty: dps.length *2\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tconsole.log(\"contenuto array dps: \", dps);\n\t\t\t\tconsole.log(\"constructor array dps: \", dps.constructor);\n\t\t\t\tconsole.log(\"is array dps?: \", Array.isArray(dps));\n\t\t\t\tconsole.log(\"lunghezza array dps: \", dps.length);\n\t\t\t\t\n                var line = \"\";  // or uncomment this to overwrite the existing message\n                // parse the incoming message as a JSON object\n                var data = msg.data;\n                //console.log(data);\n                // build the output from the topic and payload parts of the object\n                line += \"<p>\"+data+\"</p>\";\n                // replace the messages div with the new \"line\"\n                document.getElementById('messages').innerHTML = line;\n                //ws.send(JSON.stringify({data:data}));\n\t\t\t*/\n            \n\t\t\t}\n            ws.onopen = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"connesso\";\n                //ws.send(\"Open for data\");\n                console.log(\"connesso\");\n            }\n            ws.onclose = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"non connesso\";\n                // in case of lost connection tries to reconnect every 3 secs\n                setTimeout(wsConnect,3000);\n            }\n        }\n        \n        function doit(m) {\n\t\t\tm=JSON.stringify(dps);\n            if (ws) { ws.send(m); }\n        }\n\n\n\n</script>\n</head>\n<!--\n<body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n -->\n<body onunload=\"ws.disconnect();\">\n \n\t\t<div id=\"chartContainer\" style=\"height: 370px; width:100%;\"></div>\n\t\t\n\t   <font face=\"Arial\">\n        <h1>Simple Live Display</h1>\n\t\t<div id=\"date_time\"></div>\n        <div id=\"messages\"></div>\n        <button type=\"button\" onclick='doit(\"ciao\");'>Click to send message</button>\n        <hr/>\n        <div id=\"status\">unknown</div>\n        </font>\n\t\t\n\n\n<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>\n</body>\n</html>\n",
        "x": 280,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9b7cdce9.3477c",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "DATI SENSORE",
        "func": "if (msg.hasOwnProperty('flusso_dati') && msg.flusso_dati.points.length>0 ) {\n    dati= msg.flusso_dati;\n    \n    count_alive=global.get(\"count_alive_chart\");\n    count_alive=count_alive+1;\n    global.set(\"count_alive_chart\",count_alive);\n    \n    msg.payload = {};\n    \n    msg.payload.function    =\"aggiorna_chart\";\n    msg.payload.value       =dati.points;\n    msg.payload.count_alive =count_alive;\n    return msg;\n}\nelse{\n    msg.payload = {};\n}\n",
        "outputs": 1,
        "noerr": 7,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "b2e5820a.1e055",
                "611f05be.64f14c"
            ]
        ]
    },
    {
        "id": "8c635e5e.1ce7b",
        "type": "link in",
        "z": "a22dc052.c61d",
        "name": "dati live",
        "links": [
            "9414813b.beed9"
        ],
        "x": 515,
        "y": 160,
        "wires": [
            [
                "9b7cdce9.3477c",
                "b8cb0835.d93d78",
                "84e4a6f0.03b998"
            ]
        ]
    },
    {
        "id": "b2e5820a.1e055",
        "type": "debug",
        "z": "a22dc052.c61d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 300,
        "wires": []
    },
    {
        "id": "752b929e.8a05fc",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "once at start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "97c685ec.57f6e8"
            ]
        ]
    },
    {
        "id": "b8cb0835.d93d78",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "ELABORAZIONE",
        "func": "// *********** GESTIONE ERRORE di INGRESSO  **************\nvar error_in={\"status\":false,\"code\":0, \"info\":\"\"};  \nvar error_out={\"status\":false,\"code\":0, \"info\":\"\"}; \n\nif (msg.hasOwnProperty('error') ) {\n    error_in=msg.error;\n}\n\n// error_out=error_in;\n\nmsg.error=error_out;\n\n\n// *********** ELABORAZIONE DATI DI INGRESSO  **************\n\nif (msg.hasOwnProperty('flusso_dati') ) {\n    dati_in= msg.flusso_dati.points;\n}\nelse{\n    dati_in=[];\n    return ;\n}\n\n// #############  CARICAMENTO DELLE LIBRERIE    ####################à\nnode.status({text:\"CARICAMENTO DELLE LIBRERIE...\"});\n\nvar regression  =global.get('modulo_regressione');\nvar mathjs      =global.get('mathjs'); //https://mathjs.org/docs/reference/functions.html\n\n\n// #############  INIZIALIZZAZIONE    ####################à\nnode.status({text:\"INIZIALIZZAZIONE VARIABILI...\"});\n\nvar info=\"\";\n\nvar array_xy=[]; // i punti potRebbero essere stati ruotati rispetto agli originali\nvar array_xy_tmp=[];\nvar array_xy_sorted_by_y=[];\nvar array_y=[];\nvar array_xy_originale=[];\nvar elemento=[];\nvar dati_sup=[];\nvar dati_inf=[];\nvar dati_sx=[];\nvar dati_dx=[];\n\nvar chart_points_sup=[];\nvar chart_points_inf=[];\nvar chart_points_sx=[];\nvar chart_points_dx=[];\n\nvar y_sup=[];\nvar y_inf=[];\n\n\nvar x=0;\nvar y=0;\n\nvar json={};\nvar ycalc=0;\nvar d=1; //offset per il disegno delle linee sup e inf\n\nvar rotazione=global.get(\"rotazione\");\nif( typeof rotazione == 'undefined' ) {\n    global.set(\"rotazione\", 0.0);\n}\n\n// ########### Creazione array_xy e array_xy_originale  ###########\nnode.status({text:\"Creazione array_xy e array_xy_originale\"});\n\nvar y_max_tmp=-9999;\nvar y_min_tmp=9999;\n\n\nfor (let i = 0; i < dati_in.length; i++) {\n    elemento=[ dati_in[i].x , dati_in[i].y ];\n    array_xy_originale.push(elemento);  \n    \n    // ROTAZIONE dei punti\n    array_xy_tmp.push(mathjs.rotate(elemento, - mathjs.pi * rotazione/180.0));\n    \n    // ricerca massimo e minimo\n    if (array_xy_tmp[i][1]>y_max_tmp){\n        y_max_tmp=array_xy_tmp[i][1];\n    }\n    if (array_xy_tmp[i][1]<y_min_tmp){\n        y_min_tmp=array_xy_tmp[i][1];\n    }\n}\n\n\nvar off_set_y=0.0;\nif (rotazione!==0.0){\n    off_set_y=y_min_tmp;\n}\n\nfor (let i = 0; i < array_xy_tmp.length; i++) {\n    elemento=[array_xy_tmp[i][0], array_xy_tmp[i][1]-off_set_y]\n    array_xy.push(elemento);\n    array_xy_sorted_by_y.push(elemento)\n}\n\narray_xy_sorted_by_y.sort((a, b) => a[1]-b[1]);\n    \n\n// ########### REGRESSIONE dati ORIGINALI per calcolare il valore della rotazione ###########\n// (questa operazione va fatta senza la cinghia)\nnode.status({text:\"REGRESSIONE dati ORIGINALI (senza rotazione) \"});\n\nvar result_originale = regression.linear(array_xy_originale);\nvar gradient_originale = result_originale.equation[0];\n\n// Salvataggio dell'angolo di rotazione\nvar angolo_mediana_originale=Math.round((18000 * (Math.atan(gradient_originale)/Math.PI) ))/100;\n\nglobal.set(\"rotazione_linea_mediana\" , angolo_mediana_originale);\ninfo= info + \"<font color='#aaaaaa'>Tendenza inclinazione dati: </font>\" + \"(r^2=\" + result_originale.r2 + \") \" + \"Angolo: \" + angolo_mediana_originale+\"<br><br>\"; \n\n\n// ########### Pubblicazione dei dati ruotati ###########\nnode.status({text:\"Chart dei dati ruotati\"});\n\nvar chart_dati_ruotati=[];\n\nfor (let i = 0; i < array_xy.length; i++){\n    json={};\n    json.x= array_xy[i][0] ;\n    json.y= array_xy[i][1] ;\n    chart_dati_ruotati.push(json);\n    }\n\n\n// ########### PRIMA SEPARAZIONE DEI DATI (sulla base del range) ###########\n// Inizializzizone degli array\ndati_inf.length=0;\ndati_sup.length=0;\nchart_points_inf.length=0;\nchart_points_sup.length=0;\ny_inf.length=0;\ny_sup.length=0;\n\n\nvar min_y =array_xy_sorted_by_y[0][1];\nvar max_y =array_xy_sorted_by_y[array_xy_sorted_by_y.length-1][1];\n\n        \nfor (let i = 0; i < array_xy.length; i++) {\n        // inizializzaizone degli elementi\n        x= array_xy[i][0];\n        y= array_xy[i][1];\n        elemento= [x,y];\n        json= {\"x\" : x ,\"y\": y};\n        \n        if (y > max_y - 1) {\n            dati_sup.push(elemento);\n            chart_points_sup.push(json);\n            y_sup.push(array_xy[i][1])\n        } \n        else if (y < min_y + 1) {\n            dati_inf.push(elemento);\n            chart_points_inf.push(json);\n            y_inf.push(array_xy[i][1])\n        }\n}\n\n\n// ########### SECONDA SEPARAZIONE dei dati SUP  e  INF sulla base della STD ###########\nnode.status({text:\"Seconda separazione dati sup...\"});\n\nvar y_avg_sup, y_avg_inf, y_std_sup, y_std_inf;\n\nif (y_sup.length > 1){\n    // calcolo dati statistici\n    y_avg_sup = mathjs.mean(y_sup);\n    y_std_sup = mathjs.std(y_sup) * 0.55;\n    \n    // Inizializzazione degli array sup\n    dati_sup.length=0;\n    chart_points_sup.length=0;\n    y_sup.length=0;\n    \n    //\n    for (let i = 0; i < array_xy.length; i++) {\n        x= array_xy[i][0];\n        y= array_xy[i][1];\n        elemento= [x,y];\n        json= {\"x\" : x ,\"y\": y};\n        \n        if ( y>= y_avg_sup - y_std_sup) {\n            dati_sup.push(elemento);\n            chart_points_sup.push(json);\n            y_sup.push(y)\n        } \n    }\n} \n\nnode.status({text:\"Seconda separazione dati inf...\"});\n\nif (y_inf.length > 1){\n    // calcolo dati statistici\n    y_avg_inf = mathjs.mean(y_inf);\n    y_std_inf = mathjs.std(y_inf) * 0.55;\n    \n    // Inizializzazione degli array inf\n    dati_inf.length=0;\n    chart_points_inf.length=0;\n    y_inf.length=0;\n    \n    //\n    for (let i = 0; i < array_xy.length; i++) {\n        x= array_xy[i][0];\n        y= array_xy[i][1];\n        elemento= [x,y];\n        json= {\"x\" : x ,\"y\": y};\n        \n        if ( y<= y_avg_inf + y_std_inf) {\n            dati_inf.push(elemento);\n            chart_points_inf.push(json);\n            y_inf.push(y)\n        } \n    }\n}     \n\n\n\n// ################## RICERCA ESTREMI dei SEGMENTI ##############\nnode.status({text:\"ricerca estremi segmenti...\"});\nvar point_inf_1={};\nvar point_inf_2={};\nvar point_sup_1={};\nvar point_sup_2={};\n\n\nfor (let i = 1; i < chart_points_inf.length; i++) {\n    if ((chart_points_inf[i].x - chart_points_inf[i-1].x) > 5.0) {\n    point_inf_1=chart_points_inf[i-1];\n    point_inf_2=chart_points_inf[i];\n    break;    \n    }\n}\n\npoint_sup_1=chart_points_sup[0];\npoint_sup_2=chart_points_sup[chart_points_sup.length-1];\n\n\n\n//########### SEPARAZIONE DATI SINISTRA - DESTRA #########\nnode.status({text:\"separazione dati sx e dx...\"});\n\nfor (let i = 0; i < array_xy.length; i++) {\n    elemento=[];\n    json={};\n    x=array_xy[i][0];\n    y=array_xy[i][1]\n    // inizializzaizone degli elementi\n    elemento=[x,y];\n    json={\"x\":x, \"y\":y};\n    \n    // SINISTRA\n    if(x> point_inf_1.x && x < point_sup_1.x){\n    chart_points_sx.push(json);\n    dati_sx.push(elemento)\n    \n    // DESTRA    \n    } else if (x > point_sup_2.x && x< point_inf_2.x){\n    chart_points_dx.push(json);\n    dati_dx.push(elemento)    \n    }\n}\n\n// ########### REGRESSIONE LINEA SX  ###########\nnode.status({text:\"regressione linea sx\"});\nvar chart_linea_sx=[];\n\nif (dati_sx.length>1){\n    var result_sx      = regression.linear(dati_sx);\n    var gradient_sx    = result_sx.equation[0];\n    var yIntercept_sx  = result_sx.equation[1];\n    var x1s=0;\n    var x2s=0;\n    \n    if (gradient_sx!==0){\n        x1s= (-1 - yIntercept_sx)/gradient_sx;\n        x2s= (point_sup_1.y - yIntercept_sx +1)/gradient_sx;\n    }\n    \n    json={};\n    json.x=  x1s;\n    json.y=  x1s  * gradient_sx + yIntercept_sx;\n    chart_linea_sx.push(json);\n    \n    json={};\n    json.x= x2s;\n    json.y= x2s * gradient_sx + yIntercept_sx;\n    chart_linea_sx.push(json);\n    \n    info= info + \"<font color='#FF00FF'>Linea Sinistra: </font>\" + \"Punti = \" + dati_sx.length +\"; \" + result_sx.string + \" (r^2=\" + result_sx.r2 + \"); Angolo: \" + Math.round((18000 * (Math.atan(gradient_sx)/Math.PI) ))/100 + \"°<br>\";\n} else {\n    info= info + \"<font color='#FF00FF'>Linea Sinistra: </font>\" + \"Punti = \" + dati_sx.length +\" <br>\";\n    chart_linea_sx=[{\"x\":0,\"y\":0}];\n}\n\n\n// ########### REGRESSIONE LINEA DX  ###########\nnode.status({text:\"regressione dx\"});\nvar chart_linea_dx=[];\n\n// dati_dx=            dati_dx.slice(5, -5);\n// chart_points_dx=    chart_points_dx.slice(5,-5);\n\n// dati_dx=[[18,15],[19,10],[20,5]];\n// chart_points_dx=[{\"x\":18,\"y\":15},{\"x\":19,\"y\":10},{\"x\":20,\"y\":5}]\n\n\n\nif (dati_dx.length>1){\n    var result_dx      = regression.linear(dati_dx);\n    var gradient_dx    = result_dx.equation[0];\n    var yIntercept_dx  = result_dx.equation[1];\n    var x1d=0;\n    var x2d=0;  \n    \n    if (gradient_dx!==0){\n        x1d= (point_sup_2.y - yIntercept_dx + 1)/gradient_dx;\n        x2d= (-1 - yIntercept_dx)/gradient_dx;\n    }\n    \n    json={};\n    json.x=  x1d;\n    json.y=  x1d * gradient_dx + yIntercept_dx;\n    chart_linea_dx.push(json);\n    \n    msg.gradient_dx=gradient_dx;\n    msg.yIntercept_dx=yIntercept_dx;\n    \n    json={};\n    json.x = x2d ;\n    json.y=  x2d * gradient_dx + yIntercept_dx;\n    chart_linea_dx.push(json);\n    \n    info= info + \"<font color='#55ff55'>Linea Destra: </font>\" + \"Punti = \" + dati_dx.length +\"; \" + result_dx.string + \" (r^2=\" + result_dx.r2 + \"); Angolo: \" + Math.round((18000 * (Math.atan(gradient_dx)/Math.PI) ))/100 + \"°<br>\";\n} else {\n    info= info + \"<font color='#55ff55'>Linea Destra: </font>\" + \"Punti = \" + dati_dx.length +\" <br>\";\n    chart_linea_dx=[{\"x\":0,\"y\":0}];\n}\n\n// msg.chart_linea_dx=chart_linea_dx;\n\n\n// ########### REGRESSIONE LINEA SUP  ###########\nnode.status({text:\"regressione linea sup\"});\n\nvar result_sup      = regression.linear(dati_sup);\nvar gradient_sup    = result_sup.equation[0];\nvar yIntercept_sup  = result_sup.equation[1];\n\nvar chart_linea_sup=[];\n\n\njson={};\njson.x=  point_sup_1.x -d;\njson.y= (point_sup_1.x -d)   * gradient_sup + yIntercept_sup;\nchart_linea_sup.push(json);\n\njson={};\njson.x = point_sup_2.x +d;\njson.y= (point_sup_2.x +d) * gradient_sup + yIntercept_sup;\nchart_linea_sup.push(json);\n\ninfo= info + \"<font color='#ff0000'>Linea Superiore: </font>\" + \"Punti = \" + dati_sup.length +\"; \" + result_sup.string + \" (r^2=\" + result_sup.r2 + \"); Angolo: \" + Math.round((18000 * (Math.atan(gradient_sup)/Math.PI) ))/100 + \"°<br>\";\n\n\n// ########### REGRESSIONE LINEA INF  ###########\nnode.status({text:\"regressione linea inf\"});\nvar result_inf      = regression.linear(dati_inf);\nvar gradient_inf    = result_inf.equation[0];\nvar yIntercept_inf  = result_inf.equation[1];\n\n\nvar chart_linea_inf=[];\n\njson={};\n\njson.x=  dati_inf[0][0] -d ;\njson.y= (dati_inf[0][0] -d) * gradient_inf + yIntercept_inf;\nchart_linea_inf.push(json);\n\n\njson={};\njson.x = dati_inf[dati_inf.length -1][0] +d ;\njson.y= (dati_inf[dati_inf.length -1][0] +d) * gradient_inf + yIntercept_inf;\nchart_linea_inf.push(json);\n\ninfo= info + \"<font color='#0000ff'>Linea Inferiore: </font>\" + \"Punti = \" + dati_inf.length +\"; \" + result_inf.string + \" (r^2=\" + result_inf.r2 + \"); Angolo: \" + Math.round((18000 * (Math.atan(gradient_inf)/Math.PI) ))/100 + \"°<br>\";\n\n\n// #####################################\n\nmsg.chart_linea_sx=chart_linea_sx;\nmsg.chart_linea_dx=chart_linea_dx;\nvar linea_sx      = { payload: {\"function\":\"aggiorna_linea_sx\",         \"value\":chart_linea_sx}};\nvar linea_dx      = { payload: {\"function\":\"aggiorna_linea_dx\",         \"value\":chart_linea_dx}};\nvar info_out      = { payload: {\"function\":\"info\",                      \"value\":info}};\nvar linea_sup_out = { payload: {\"function\":\"aggiorna_linea_sup\",        \"value\":chart_linea_sup}};\nvar linea_inf_out = { payload: {\"function\":\"aggiorna_linea_inf\",        \"value\":chart_linea_inf}};\nvar punti_sup_out = { payload: {\"function\":\"aggiorna_punti_sup\",        \"value\":chart_points_sup}};\nvar punti_inf_out = { payload: {\"function\":\"aggiorna_punti_inf\",        \"value\":chart_points_inf}};\nvar dati_ruotati  = { payload: {\"function\":\"aggiorna_dati_ruotati\",     \"value\":chart_dati_ruotati}};\nvar punti_sx      = { payload: {\"function\":\"aggiorna_punti_sx\",         \"value\":chart_points_sx}};\nvar punti_dx      = { payload: {\"function\":\"aggiorna_punti_dx\",         \"value\":chart_points_dx}};\n\n\nnode.status({text:\"DONE\"});\n\nreturn [msg, info_out, linea_sup_out, linea_inf_out, punti_sup_out, punti_inf_out, dati_ruotati, punti_sx, punti_dx, linea_sx, linea_dx] ;\n",
        "outputs": 11,
        "noerr": 15,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "cdb601cd.ec34e",
                "47c2d0eb.29dc"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ],
            [
                "611f05be.64f14c"
            ]
        ],
        "info": "### OUTPUT\n * out 0 -> msg con info generali \n * out 1 -> linea superiore\n * out 2 -> linea inferiore\n * out 3 -> punti per il calcolo della linea superiore\n * out 4 -> punti per il calcolo della linea inferiore\n * out 5 -> linea mediana per la separazione iniziale dei dati superiori e inferiori\n\n_return [msg, linea_sup_out, linea_inf_out, punti_sup_out, punti_inf_out, linea_mediana] ;_\n"
    },
    {
        "id": "cdb601cd.ec34e",
        "type": "debug",
        "z": "a22dc052.c61d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "97c685ec.57f6e8",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "",
        "func": "global.set(\"count_alive_chart\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "eb5a975.2f7b568",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "",
        "func": "\nreturn [msg,null];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "31cfb35f.098dfc",
        "type": "link out",
        "z": "a22dc052.c61d",
        "name": "WS",
        "links": [
            "4d7fc008.5e427"
        ],
        "x": 405,
        "y": 240,
        "wires": []
    },
    {
        "id": "4d7fc008.5e427",
        "type": "link in",
        "z": "a22dc052.c61d",
        "name": "WS",
        "links": [
            "31cfb35f.098dfc",
            "611f05be.64f14c"
        ],
        "x": 655,
        "y": 520,
        "wires": [
            [
                "64b5670.38edc98"
            ]
        ]
    },
    {
        "id": "611f05be.64f14c",
        "type": "link out",
        "z": "a22dc052.c61d",
        "name": "WS",
        "links": [
            "4d7fc008.5e427"
        ],
        "x": 1095,
        "y": 200,
        "wires": []
    },
    {
        "id": "69064b6d.db53d4",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "esempio foreach",
        "func": "/*\ndati.forEach(punto => { \n    punto.x=punto.x/prec; \n    punto.y=punto.y/prec;  \n    dati_x.push(punto.x);  \n    dati_y.push(punto.y);\n    dati_xy.push([punto.x,punto.y]);\n    } );\n    \n*/    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8123b53f.8f2d58",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "SALVA su CSV",
        "props": [
            {
                "p": "filename",
                "v": "C:\\temp\\DatiBaumer_CinghiaMedia_.csv",
                "vt": "str"
            },
            {
                "p": "completex",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "salva",
        "x": 400,
        "y": 440,
        "wires": [
            [
                "51a5b1f9.6d21"
            ]
        ]
    },
    {
        "id": "777f9eaf.d40eb",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "elabora nome file",
        "func": "\nif (msg.hasOwnProperty('dati_ricevuti')){\n\ndata=msg.filename;\n\ntmp = data.substr(0, data.lastIndexOf('.'));\n\nmsg.filename= tmp + \"\"+ msg.datetime + \".csv\";\n\nmsg.payload=msg.payload.dati;\n\nreturn msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "102d84be.f1c8eb"
            ]
        ]
    },
    {
        "id": "102d84be.f1c8eb",
        "type": "file",
        "z": "a22dc052.c61d",
        "name": "Write Backup",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1250,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "51a5b1f9.6d21",
        "type": "join",
        "z": "a22dc052.c61d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 590,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "84e4a6f0.03b998",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "ELAB DATI SENSORE",
        "func": "\nif (msg.hasOwnProperty('flusso_dati')  && msg.flusso_dati.points.length>0  ) {\n    msg.payload= msg.flusso_dati.points;\n    msg.dati_ricevuti=\"ok\";\n}\nelse{\n    msg.payload = {};\n}\n\n\nmsg.topic=\"dati\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "a569b87.b077248"
            ]
        ]
    },
    {
        "id": "a569b87.b077248",
        "type": "csv",
        "z": "a22dc052.c61d",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 750,
        "y": 320,
        "wires": [
            [
                "51a5b1f9.6d21"
            ]
        ]
    },
    {
        "id": "39c3a66f.50c85a",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "info",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"function\":\"info\", \"value\":\"INFORMAZIONI...\"}",
        "payloadType": "str",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "7e3d69f5.8c5878",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "string to json",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "5ca01a00.5abdd8",
                "f1c5e8.0aaf7a18"
            ]
        ]
    },
    {
        "id": "5ca01a00.5abdd8",
        "type": "debug",
        "z": "a22dc052.c61d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 780,
        "wires": []
    },
    {
        "id": "4dcfb122.a77c8",
        "type": "debug",
        "z": "a22dc052.c61d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 780,
        "wires": []
    },
    {
        "id": "1d6de6b9.884cd9",
        "type": "inject",
        "z": "a22dc052.c61d",
        "name": "Rotazione...",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "f245d744.c5f158"
            ]
        ]
    },
    {
        "id": "f245d744.c5f158",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "",
        "func": "msg.payload={};\nvar rotazione=global.get(\"rotazione\");\n\nmsg.payload.function=\"rotazione\";\nmsg.payload.value=rotazione;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "31cfb35f.098dfc"
            ]
        ]
    },
    {
        "id": "f1c5e8.0aaf7a18",
        "type": "function",
        "z": "a22dc052.c61d",
        "name": "",
        "func": "if (msg.payload.funzione==\"calcola_rotazione\"){\n    rot=global.get(\"rotazione_linea_mediana\");\n    global.set(\"rotazione\",rot);\n} \nelse if (msg.payload.funzione==\"reset_rotazione\"){\nglobal.set(\"rotazione\",0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "47c2d0eb.29dc",
        "type": "debug",
        "z": "a22dc052.c61d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 20,
        "wires": []
    },
    {
        "id": "db220533.a4a858",
        "type": "moment",
        "z": "a22dc052.c61d",
        "name": "ts to YYYYMMDD_HHmmss",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYYMMDD-HHmmss",
        "locale": "it-IT",
        "output": "datetime",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 700,
        "y": 1020,
        "wires": [
            [
                "ef19c48a.5e8dd8"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "68e42402.9574ac",
        "type": "moment",
        "z": "a22dc052.c61d",
        "name": "ts to YYYYMMDD_HHmmss",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD HH:mm:ss.ms",
        "locale": "it-IT",
        "output": "datetime",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "7d973612.40f258"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "111a52be.775e1d",
        "type": "moment",
        "z": "a22dc052.c61d",
        "name": "ts to YYYYMMDD_HHmmss",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Europe/Rome",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYYMMDD-HHmmss",
        "locale": "it-IT",
        "output": "datetime",
        "outputType": "msg",
        "outTz": "Europe/Rome",
        "x": 820,
        "y": 420,
        "wires": [
            [
                "777f9eaf.d40eb"
            ]
        ],
        "info": "Timestamp to YYYYMMDD_HHmmss"
    },
    {
        "id": "4fa73dd9.83cca4",
        "type": "comment",
        "z": "14a4eac34f957bfe",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "993d7272.843ae",
        "type": "fs-file-lister",
        "z": "14a4eac34f957bfe",
        "name": "Files",
        "start": "C:\\temp\\profili",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "dd88bd23.37cde",
                "3e094f82.15d6e"
            ]
        ]
    },
    {
        "id": "d185a45.2327a58",
        "type": "inject",
        "z": "14a4eac34f957bfe",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "C:\\temp\\profili",
        "payloadType": "str",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "a715f7a4.a398a8",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "eb17c7ee.e61988",
        "type": "ui_dropdown",
        "z": "14a4eac34f957bfe",
        "name": "File Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a file",
        "group": "160e81fb.f1c86e",
        "order": 9,
        "width": "5",
        "height": "1",
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 910,
        "y": 180,
        "wires": [
            [
                "be4830df.5775d"
            ]
        ]
    },
    {
        "id": "dd88bd23.37cde",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a file\n    obj = {};\n    obj [msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "eb17c7ee.e61988",
                "2d3956e9fa67ae21"
            ]
        ]
    },
    {
        "id": "638728aa.cd0b08",
        "type": "ui_template",
        "z": "14a4eac34f957bfe",
        "group": "160e81fb.f1c86e",
        "name": "",
        "order": 6,
        "width": "18",
        "height": "6",
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1100,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9d27e846.b31db8",
        "type": "template",
        "z": "14a4eac34f957bfe",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>File Name</th><th>Size</th><th>Created</th><th>Changed</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 940,
        "y": 240,
        "wires": [
            [
                "638728aa.cd0b08"
            ]
        ]
    },
    {
        "id": "3e094f82.15d6e",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Convert timestamps",
        "func": "for (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 240,
        "wires": [
            [
                "9d27e846.b31db8",
                "fc4aa24f6851fa4f"
            ]
        ]
    },
    {
        "id": "7b7e0d58.05e244",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 10,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "8da8147a.999af8"
            ]
        ]
    },
    {
        "id": "7d490dd1.8458b4",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    // and delete the context/selection as we are deleting the file as well\n    flow.set(\"fileselected\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 400,
        "wires": [
            [
                "372ee262.fc94de"
            ]
        ]
    },
    {
        "id": "372ee262.fc94de",
        "type": "file",
        "z": "14a4eac34f957bfe",
        "name": "Delete file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 540,
        "y": 400,
        "wires": [
            [
                "993d7272.843ae",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "aa8c482.93734b8",
        "type": "http in",
        "z": "14a4eac34f957bfe",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "d969ba04.e24028"
            ]
        ]
    },
    {
        "id": "d19cc7d8.646328",
        "type": "http response",
        "z": "14a4eac34f957bfe",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 540,
        "wires": []
    },
    {
        "id": "d969ba04.e24028",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 540,
        "wires": [
            [
                "e92381c3.c4cd2"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "e92381c3.c4cd2",
        "type": "file in",
        "z": "14a4eac34f957bfe",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 580,
        "y": 540,
        "wires": [
            [
                "99ff4953.d0d5c8"
            ]
        ]
    },
    {
        "id": "99ff4953.d0d5c8",
        "type": "change",
        "z": "14a4eac34f957bfe",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 540,
        "wires": [
            [
                "d19cc7d8.646328"
            ]
        ]
    },
    {
        "id": "2519dd0d.54d6b2",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 11,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Graph",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "show_chart",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "30f41c01.358a54"
            ]
        ]
    },
    {
        "id": "30f41c01.358a54",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 660,
        "wires": [
            [
                "4f4072b6.0c320c"
            ]
        ]
    },
    {
        "id": "4f4072b6.0c320c",
        "type": "file in",
        "z": "14a4eac34f957bfe",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 440,
        "y": 660,
        "wires": [
            [
                "4d254665.d508e8"
            ]
        ]
    },
    {
        "id": "4d254665.d508e8",
        "type": "csv",
        "z": "14a4eac34f957bfe",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "x": 590,
        "y": 660,
        "wires": [
            [
                "7dcec769.580718"
            ]
        ]
    },
    {
        "id": "84810f0e.43f4e",
        "type": "debug",
        "z": "14a4eac34f957bfe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1010,
        "y": 620,
        "wires": []
    },
    {
        "id": "7dcec769.580718",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Format data for chart",
        "func": "var chart = [{\n    \"series\":[],\n    \"data\":[],\n    \"labels\":[msg.filename]\n}];\n\n\n/*\nvar pressure = [];\nvar out2 = [];\n\nfor (var i=0; i<msg.payload.length; i++) {\n    pressure.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].pressure});\n    out2.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].out2*200});\n\n}\nchart[0].data.push(pressure);\nchart[0].data.push(out2);\n*/\n\nlet columns = 0;\n\nfor(var series in msg.payload[0]) {\n    if(series!==\"timestamp\") {\n        chart[0].series.push(series);\n        chart[0].data.push([]);\n        columns++;\n    }\n}\n\n\nfor (var j=0; j<msg.payload.length; j++) {\n   for(var i=0;i<columns;i++) {\n       chart[0].data[i].push({\"x\":msg.payload[j].timestamp, \"y\":msg.payload[j][chart[0].series[i]]});\n   } \n}\n\n\n\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 660,
        "wires": [
            [
                "5022cb53.8adc44",
                "84810f0e.43f4e"
            ]
        ]
    },
    {
        "id": "5022cb53.8adc44",
        "type": "ui_chart",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 12,
        "width": "18",
        "height": "6",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1000,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "554f0095.ac1b2",
        "type": "ui_toast",
        "z": "14a4eac34f957bfe",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "topic": "",
        "name": "Confirmation",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "24df84fe.ebf45c"
            ]
        ]
    },
    {
        "id": "8da8147a.999af8",
        "type": "change",
        "z": "14a4eac34f957bfe",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Delete confirmation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to delete this file?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "554f0095.ac1b2"
            ]
        ]
    },
    {
        "id": "24df84fe.ebf45c",
        "type": "switch",
        "z": "14a4eac34f957bfe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 340,
        "wires": [
            [
                "7d490dd1.8458b4"
            ]
        ]
    },
    {
        "id": "3d4e5e51.bdf952",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Folder handling",
        "func": "let folder = context.get(\"folder\");\nif (folder===undefined) {\n    folder=\"/\";\n    context.set(\"folder\", folder);\n}\n\nlet hidden = context.get(\"hidden\");\nif (hidden===undefined) {\n    hidden=false;\n    context.set(\"hidden\", hidden);\n}\n\nif (msg.topic===\"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop();\n    folder=the_arr.join('/'); \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"change\") {\n    folder=msg.payload;    \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"hidden\") {\n    hidden=msg.payload;    \n    context.set(\"hidden\", hidden);\n}\n\nmsg.payload = {\"start\":folder, \"hidden\": hidden};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 240,
        "wires": [
            [
                "993d7272.843ae",
                "399ac341.7d43bc",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "399ac341.7d43bc",
        "type": "ui_text",
        "z": "14a4eac34f957bfe",
        "group": "160e81fb.f1c86e",
        "order": 4,
        "width": "9",
        "height": "1",
        "name": "",
        "label": "Folder:",
        "format": "{{msg.payload.start}}",
        "layout": "row-left",
        "x": 500,
        "y": 120,
        "wires": []
    },
    {
        "id": "b40ea1d8.c700a",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Up",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "arrow_upwards",
        "payload": "",
        "payloadType": "str",
        "topic": "up",
        "topicType": "str",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "80940e39.5035b",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Open",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "folder_open",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "8c1dfaac.979588"
            ]
        ]
    },
    {
        "id": "8c1dfaac.979588",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Change folder",
        "func": "// Get the filename from the flow context\nlet folderselected = flow.get(\"folderselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (folderselected===undefined) {\n    return;\n}\n\nmsg.topic = \"change\";\nmsg.payload = folderselected;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 460,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "58414ec4.c716e",
        "type": "ui_button",
        "z": "14a4eac34f957bfe",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 2,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "autorenew",
        "payload": "C:\\temp\\profili",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "5219875b.c070d8",
        "type": "fs-file-lister",
        "z": "14a4eac34f957bfe",
        "name": "Folders",
        "start": "C:\\temp\\profili",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "directories",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 520,
        "y": 280,
        "wires": [
            [
                "ebc234be.d53fe8"
            ]
        ]
    },
    {
        "id": "37485c24.212054",
        "type": "ui_dropdown",
        "z": "14a4eac34f957bfe",
        "name": "Folder Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a folder",
        "group": "160e81fb.f1c86e",
        "order": 7,
        "width": "5",
        "height": "1",
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 920,
        "y": 280,
        "wires": [
            [
                "2875c79f.531558"
            ]
        ]
    },
    {
        "id": "ebc234be.d53fe8",
        "type": "function",
        "z": "14a4eac34f957bfe",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a foler\n    obj = {};\n    obj [\"[\"+msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')+\"]\"]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 280,
        "wires": [
            [
                "37485c24.212054"
            ]
        ]
    },
    {
        "id": "be4830df.5775d",
        "type": "change",
        "z": "14a4eac34f957bfe",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "fileselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2875c79f.531558",
        "type": "change",
        "z": "14a4eac34f957bfe",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "folderselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "928e60a7.994be",
        "type": "ui_switch",
        "z": "14a4eac34f957bfe",
        "name": "",
        "label": "Hidden",
        "tooltip": "Show hidden files or not",
        "group": "160e81fb.f1c86e",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": false,
        "decouple": "false",
        "topic": "hidden",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "check_box",
        "oncolor": "#000000",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "check_box_outline_blank",
        "offcolor": "#000000",
        "animate": true,
        "className": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "2d3956e9fa67ae21",
        "type": "debug",
        "z": "14a4eac34f957bfe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "fc4aa24f6851fa4f",
        "type": "debug",
        "z": "14a4eac34f957bfe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 120,
        "wires": []
    },
    {
        "id": "69669fc0ba590883",
        "type": "comment",
        "z": "5fd4048819c968a5",
        "name": "http://127.0.0.1:1880/vr_pedana",
        "info": "http://127.0.0.1:1880/vr_pedana",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "24f789c77bc8e68a",
        "type": "http in",
        "z": "5fd4048819c968a5",
        "name": "",
        "url": "/vr_pedana",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "952229ecdb129af8"
            ]
        ]
    },
    {
        "id": "952229ecdb129af8",
        "type": "file in",
        "z": "5fd4048819c968a5",
        "name": "",
        "filename": "C:\\Users\\GT STUPIRE\\.node-red\\statiche\\index.html",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "7bb96b9188d85ca8"
            ]
        ]
    },
    {
        "id": "7bb96b9188d85ca8",
        "type": "http response",
        "z": "5fd4048819c968a5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 180,
        "wires": []
    },
    {
        "id": "14a542d2b6bd6981",
        "type": "comment",
        "z": "5fd4048819c968a5",
        "name": "PUBBLICAZIONE DELLA PAGINA WEB C:\\xampp\\htdocs\\arjs\\index.html",
        "info": "\n",
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "f27e6fc148ea984a",
        "type": "websocket out",
        "z": "5fd4048819c968a5",
        "name": "",
        "server": "27824c37.1dfa24",
        "client": "",
        "x": 860,
        "y": 360,
        "wires": []
    },
    {
        "id": "530d60947612834b",
        "type": "inject",
        "z": "5fd4048819c968a5",
        "name": "send",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "16f3a68c1a13389f"
            ]
        ]
    },
    {
        "id": "16f3a68c1a13389f",
        "type": "function",
        "z": "5fd4048819c968a5",
        "name": "",
        "func": "\nvar fase = global.get(\"Fase\");\n\n//valori tutto chiuso:\n//giunto_bracci 140deg\n//giunto_piattaforma -140deg\n\n//valori aperto a riposo\n//giunto_bracci 0deg\n//giunto_piattaforma 0deg\n\n//da 0 a 180deg\nvar giunto_bracci = (140* Math.PI/180.0) * (Math.cos(fase+Math.PI)+1) / 2.0;\nvar giunto_piattaforma = -(140 * Math.PI / 180.0) * (Math.cos(fase + Math.PI) + 1) / 2.0;\nfase+=Math.PI/80.0;\n\nglobal.set(\"Fase\", fase);\n\nmsg.payload = { \"function\": \"rotazione\", \"value\": { \"giunto_bracci\": giunto_bracci, \"giunto_piattaforma\": giunto_piattaforma}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar fase = 0;\nglobal.set(\"Fase\", fase);\n",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 360,
        "wires": [
            [
                "f27e6fc148ea984a"
            ]
        ]
    }
]